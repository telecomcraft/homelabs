{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Welcome to Our Home Labs!","text":"<p>There isn't too much to see here yet, but head over to the network labs to check out what we've developed so far or read a few articles on our blog to learn more about this site and what we have planned.</p>"},{"location":"about/","title":"About This Site","text":"<p>This website is dedicated to documenting our home labs. When we started planning out our home labs and making content, we thought it'd be great to have a place we could organize and share our materials in a way that made it easy for our audience to follow along, at their own pace.</p>"},{"location":"tags/","title":"Content Index","text":"<p>Use this page to find content by tag. Note that content may be marked with multiple tags.</p>"},{"location":"tags/#juniper","title":"Juniper","text":"<ul> <li>Initial Junos OS Configuration on a vSRX</li> <li>Installing Juniper vSRX on Proxmox</li> </ul>"},{"location":"tags/#linux","title":"Linux","text":"<ul> <li>Cloning a Network Host Template in Proxmox</li> <li>Connecting and Configuring Network Hosts in Proxmox</li> <li>Creating a Network Host Template in Proxmox</li> <li>Exploring Subnets and VLANs in Proxmox</li> <li>Exploring Subnets, Broadcast Domains, and Bridges in Proxmox</li> </ul>"},{"location":"tags/#proxmox","title":"Proxmox","text":"<ul> <li>Cloning a Network Host Template in Proxmox</li> <li>Connecting and Configuring Network Hosts in Proxmox</li> <li>Creating a Network Host Template in Proxmox</li> <li>Exploring Subnets and VLANs in Proxmox</li> <li>Exploring Subnets, Broadcast Domains, and Bridges in Proxmox</li> <li>Installing Juniper vSRX on Proxmox</li> <li>Installing VyOS on Proxmox</li> </ul>"},{"location":"tags/#vyos","title":"VyOS","text":"<ul> <li>Initial VyOS Configuration Best Practices</li> <li>Installing VyOS on Proxmox</li> </ul>"},{"location":"blog/the-telecom-craft-homelabs-site-has-launched/","title":"The Telecom Craft Homelabs Site has Launched!","text":"<p>Over the past few months, starting with our fiber optic home lab, we've been slowly making plans and laying the foundation for a broad collection of ICT home lab content. We wanted a place to organize our own learning materials and make that content available as a contribution back to the home lab community that we've learned so much from.</p> <p>We're pleased to share the first attempt at this goal with you here at labs.telecomcraft.com, where we practice the discipline of learning in public.</p> <p>On this site, we'll publish step-by-step lab exercises on topics such as fiber optics, networks, servers, and security, as well as quick references on common knowledge that we like to have handy and think you may, too. All content will be open, licensed under the Creative Commons, and we'll be planning and publishing new material with ideas and feedback from you, our audience.</p> <p>The primary goal of this site is to provide high-quality content that is both technically accurate and accessible so that you can follow along and replicate the steps without struggling too much. We always appreciate great documentation and tutorials and want to provide that level of positive experience to you, too.</p> <p>Be sure to check our blog regularly for announcements and updates, and subscribe to our  YouTube channel and LinkedIn page for related content and activities.</p>"},{"location":"diagrams/notes/","title":"Notes","text":"<p>Diagram notes</p>"},{"location":"labs/networks/overview/","title":"Network Labs Overview","text":"<p>Welcome to the Telecom Craft Network Labs! We're only just getting started, but there are already some labs available in the General section, beginning with Initial Proxmox Network Configuration.</p>"},{"location":"labs/networks/apnic/routing-labs/","title":"Overview","text":""},{"location":"labs/networks/apnic/mikrotik/overview/","title":"MikroTik Hands-On Exercises","text":""},{"location":"labs/networks/general/cloning-a-network-host-template-in-proxmox/","title":"Cloning a Network Host Template","text":"<p>In the Creating a Network Host Template in Proxmox lab, you learned how to create a custom template of Ubuntu Linux to use as a network host for labs.</p> <p>In this lab, you'll learn how to clone and configure that template so it's ready to easily deploy new network hosts in your labs.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/cloning-a-network-host-template-in-proxmox/#step-1-create-the-cloned-network-host","title":"Step 1: Create the Cloned Network Host","text":"<ul> <li>To clone the template, select the <code>host0</code> CT template in the list to bring up that CT's views.</li> <li>Click the <code>More</code> drop-down button at the top-right of the Proxmox VE window, then click <code>Clone</code>.</li> <li>Select the target node (if you have a Proxmox VE cluster), otherwise leave the default selected.</li> <li>Type <code>host1</code> as the Hostname to identify this node.</li> <li>Select <code>Full Clone</code> as the Mode to create a full and unlinked copy of the template.</li> <li>Click the <code>Clone</code> button to proceed.</li> </ul> <p>Clone Dialog</p> <p>Once the cloning is done, you will see a new CT named <code>host1</code> in the list.</p> <ul> <li>Select the <code>host1</code> CT and start it up.</li> <li>Using the <code>Console</code> view, log in with the same non-root administrator account as you used for <code>host0</code>.</li> </ul>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/cloning-a-network-host-template-in-proxmox/#step-2-configure-the-cloned-network-host","title":"Step 2: Configure the Cloned Network Host","text":"<p>Before using the new network host in labs, there are several changes that have to be made to make it different from the template. The hostname, machine ID, and network interface's MAC address are changed as part of the cloning process itself.</p> <p>However there is one crucial change that you'll have to manually make for each new host after the clone is created: generating new SSH keys. This is an essential step for any VM or CT, so always verify this was properly done.</p> <p>First ensure no files starting with <code>ssh_host</code> exist:</p> <pre><code>ls /etc/ssh\n</code></pre> <p>Then generate new key pairs:</p> <pre><code>sudo dpkg-reconfigure openssh-server\n</code></pre> <p>Check again to confirm the creation of the new key pairs:</p> <pre><code>ls /etc/ssh\n</code></pre>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/cloning-a-network-host-template-in-proxmox/#step-3-create-three-more-cloned-network-hosts","title":"Step 3: Create Three More Cloned Network Hosts","text":"<p>Now your network host is ready for use. Remember to always complete the steps above when creating new hosts. Before we wrap this lab up, you'll get some more practice.</p> <p>Use the steps above to create three more hosts named <code>host2</code>, <code>host3</code>, and <code>host4</code>, which we'll be using in the next lab, Connecting and Configuring Network Hosts.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/connecting-and-configuring-network-hosts-in-proxmox/","title":"Connecting and Configuring Network Hosts in Proxmox","text":"<p>Imagine having two physical Linux servers, each with a single network adapter. If you interconnect the two servers with a patch cord, and configure the network adapters so they can communicate, what will you have?</p> <p>A simple, but fully-functional network. And that's where you'll begin your learning on building networks, which is all about connecting hosts together.</p> <p>In this lab, we're going to directly connect our network hosts together virtually by adding them to a Linux bridge and configuring them with basic network settings. No additional routers, switches, or firewalls will be necessary at this point; just the built-in functionality of Linux and Proxmox.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/connecting-and-configuring-network-hosts-in-proxmox/#step-1-create-a-linux-bridge-for-lab-connectivity","title":"Step 1: Create a Linux Bridge for Lab Connectivity","text":"<p>A Linux bridge is like a basic switch integrated into the operating system that supports things like STP and VLAN trunking, and allows virtual machines and containers to communicate within hypervisors, like Proxmox.</p> <p>When installing Proxmox, a Linux bridge named <code>vmbr0</code> will be created to connect the hypervisor to the outside world. In my own lab setup, I use <code>vmbr0</code> to connect the Proxmox cluster and all VMs and CTs to my management subnet. By default, your CTs and Proxmox itself are running on that bridge.</p> <p>For our labs at this point, however, we have no need for our CTs to reach outside the lab subnet we'll be creating, so we'll create a second bridge just for our hosts to connect and communicate across. This provides a self-contained Layer 2 broadcast domain we can completely control, just like having a dedicated hardware switch with only your lab links connected.</p> <ol> <li>At the top of the Proxmox resource tree, select the Proxmox node your lab is running within and then select the <code>System</code> &gt; <code>Network</code> view of the content panel.</li> <li>At the top-left of the network device table, click the <code>Create</code> dropdown button and select <code>Linux Bridge</code>.</li> <li>In the dialog box, ensure the Name is <code>vmbr1</code> and Autostart is checked, then click the Create button.</li> <li>At the top of the network device table, click the Apply Configuration button and the new bridge will be enabled.</li> </ol>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/connecting-and-configuring-network-hosts-in-proxmox/#step-2-connecting-hosts-to-the-lab-bridge","title":"Step 2: Connecting Hosts to the Lab Bridge","text":"<p>With our lab bridge created, we'll need to now change the bridge setting on each host's interface from <code>vmbr0</code> to <code>vmbr1</code>. Think of this like moving a host's patch cord from one hardware switch to another.</p> <p>We'll also be changing each host's MAC address on its interface to match up with the interfaces used in our labs. This helps to ensure your results are consistent with the lab instructions. Use the table below for the MAC address assignments:</p> Host MAC Address host1 00:50:56:94:55:70 host2 00:50:56:AD:0E:33 host3 00:50:56:16:30:C7 host4 00:50:56:AD:24:4A <p>For each host, perform the following:</p> <ol> <li>From the Proxmox Web UI, select the CT in the resource tree and select the Network content panel.</li> <li>Select the network device</li> </ol>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/connecting-and-configuring-network-hosts-in-proxmox/#step-3-configuring-hosts-to-communicate-across-the-bridge","title":"Step 3: Configuring Hosts to Communicate Across the Bridge","text":"<p>With our hosts all added to the same bridge, which by default is also the same broadcast domain, they will be able to communicate once they obtain IP address configurations.</p> <p>For this lab, we will be using the <code>10.0.1.0/24</code> IPv4 subnet for the lab network. Because our network devices are set to static addresses, we'll have to manually assign the right address to the right host. Use the table below for the IP address assignments:</p> Host IPv4 Address host1 10.0.1.1/24 host2 10.0.1.2/24 host3 10.0.1.3/24 host4 10.0.1.4/24 <p>Within each host's <code>Network</code> settings in Proxmox, configure the <code>eth0</code> network device's IPv4 setting to the respective address in the table above and verify the correct assigned address has been configured:</p> <pre><code>sudo ip addr show eth0\n</code></pre>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/connecting-and-configuring-network-hosts-in-proxmox/#step-3-confirm-host-communication-across-the-bridge","title":"Step 3: Confirm Host Communication Across the Bridge","text":"<p>At this point, all hosts should be connected and reachable, or \"up.\" As a best practice, always verify this.</p> <p>The most common method is to use the <code>ping</code> command, so let's use <code>host1</code> to test connectivity to the other three hosts. From <code>host1</code>, check to see if <code>host2</code> is available:</p> <pre><code>sudo ping -c4 10.0.1.2\n</code></pre> <p>Our <code>ping</code> response should be:</p> <pre><code>PING 10.0.1.2 (10.0.1.2) 56(84) bytes of data.\n64 bytes from 10.0.1.2: icmp_seq=1 ttl=64 time=0.069 ms\n64 bytes from 10.0.1.2: icmp_seq=2 ttl=64 time=0.035 ms\n64 bytes from 10.0.1.2: icmp_seq=3 ttl=64 time=0.035 ms\n64 bytes from 10.0.1.2: icmp_seq=4 ttl=64 time=0.036 ms\n\n--- 10.0.1.2 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3071ms\nrtt min/avg/max/mdev = 0.035/0.043/0.069/0.014 ms\n</code></pre> <p>Again from <code>host1</code>, check to see if <code>host3</code> is available:</p> <pre><code>sudo ping -c4 10.0.1.3\n</code></pre> <p>Our <code>ping</code> response should be:</p> <pre><code>PING 10.0.1.3 (10.0.1.3) 56(84) bytes of data.\n64 bytes from 10.0.1.3: icmp_seq=1 ttl=64 time=0.118 ms\n64 bytes from 10.0.1.3: icmp_seq=2 ttl=64 time=0.038 ms\n64 bytes from 10.0.1.3: icmp_seq=3 ttl=64 time=0.037 ms\n64 bytes from 10.0.1.3: icmp_seq=4 ttl=64 time=0.036 ms\n\n--- 10.0.1.3 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3077ms\nrtt min/avg/max/mdev = 0.036/0.057/0.118/0.035 ms\n</code></pre> <p>Again from <code>host1</code>, check to see if <code>host4</code> is available:</p> <pre><code>sudo ping -c4 10.0.1.4\n</code></pre> <p>Our <code>ping</code> response should be:</p> <pre><code>PING 10.0.1.4 (10.0.1.4) 56(84) bytes of data.\n64 bytes from 10.0.1.4: icmp_seq=1 ttl=64 time=0.099 ms\n64 bytes from 10.0.1.4: icmp_seq=2 ttl=64 time=0.029 ms\n64 bytes from 10.0.1.4: icmp_seq=3 ttl=64 time=0.034 ms\n64 bytes from 10.0.1.4: icmp_seq=4 ttl=64 time=0.026 ms\n\n--- 10.0.1.4 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3068ms\nrtt min/avg/max/mdev = 0.026/0.047/0.099/0.030 ms\n</code></pre> <p>While <code>ping</code> is an essential tool for network testing, when you are scanning subnets or looking for more information from hosts (such as what ports are open), use <code>nmap</code>. Let's test host connectivity again from <code>host1</code>, using <code>nmap</code> this time:</p> <pre><code>nmap -sn 10.0.1.0/24\n</code></pre> <p>Our network scan should be:</p> <pre><code>Starting Nmap 7.80 ( https://nmap.org ) at 2023-06-21 11:15 UTC\nNmap scan report for 10.0.1.1\nHost is up (0.00034s latency).\nNmap scan report for 10.0.1.2\nHost is up (0.00031s latency).\nNmap scan report for 10.0.1.3\nHost is up (0.00021s latency).\nNmap scan report for 10.0.1.4\nHost is up (0.00016s latency).\nNmap done: 256 IP addresses (4 hosts up) scanned in 15.91 seconds\n</code></pre> <p>With one command, we can tell <code>nmap</code> to scan the entire <code>/24</code> subnet and report back the status of every host, including <code>host1</code>.</p> <p>Question</p> <p>Practice performing <code>ping</code> and <code>nmap</code> tests between the four hosts to get comfortable with these essential tools. Which approach for network discovery do you think is better?</p> <p>Well done! We have built an entire network of Linux hosts that can communicate with each other. In the next lab, Exploring Bridges, Subnets, and Broadcast Domains in Proxmox, we will begin exploring our network to better understand how everything works together.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/creating-a-network-host-template-in-proxmox/","title":"Creating a Network Host Template in Proxmox","text":"<p>For a long time, network simulators like Packet Tracer and GNS3 would provide a very basic network host such as VPCS, which could only do a very limited subset of network functions such as serving as a DHCP client and responding to pings.</p> <p>But the role of network hosts in your labs can become capable of so much more functionality by using real operating systems such as Linux. Using them offers an opportunity to not only become more familiar with real hosts, but gain a deeper understanding into networking fundamentals as well.</p> <p>In addition, because nearly every network operating system (NOS) is built on Linux, understanding the underlying networking capabilities of the Linux kernel and all the included tools in a Linux host provide insights into how routers, switches, and firewalls work.</p> <p>In this lab we're going to create an Ubuntu Linux \"template\" inside Proxmox VE that can be cloned and used as powerful network hosts to interact with inside our network labs.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/creating-a-network-host-template-in-proxmox/#step-1-download-ubuntu-2204-lxc-template-onto-a-proxmox-ve-node","title":"Step 1: Download Ubuntu 22.04 LXC Template Onto a Proxmox VE Node","text":"<p>A big advantage of Proxmox for creating labs is the availability of Linux Containers (LXC), a lightweight way to create isolated instances of Linux that are much more efficient than using full virtual machines. The Proxmox UI makes it extremely easy to install and manage containers, so that's what we'll do here.</p> <ul> <li>In the Proxmox VE tree, select the <code>local</code> storage view, and select the <code>CT Templates</code> submenu item.</li> <li>At the top of the view, click the <code>Templates</code> button and search for <code>ubuntu-22.04-standard</code> in the search box.</li> <li>Select that item in the list and click the <code>Download</code> button to save that template to your Proxmox VE storage.</li> </ul> <p>Screenshot</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/creating-a-network-host-template-in-proxmox/#step-2-create-a-proxmox-ct-using-the-ubuntu-lxc-template","title":"Step 2: Create a Proxmox CT Using the Ubuntu LXC Template","text":"<p>With the Ubuntu 22.04 LXC template downloaded, we can now create a container in Proxmox (abbreviated to CT) using this template. Click the <code>Create CT</code> button at the top-right of the Proxmox VE window to get started.</p> <ul> <li>On the <code>General</code> tab, make sure the correct node (if you have a Proxmox VE cluster) that you saved the Ubuntu LXC template to is selected.</li> <li>Set the hostname to <code>host0</code>.</li> <li>Set and confirm the root password for the CT.</li> </ul> <p>Screenshot of General</p> <ul> <li>On the <code>Template</code> tab, make sure Storage is set to <code>local</code>, and select <code>ubuntu-22.04-1-standard_22.04-1_amd64.tar.zst</code> (or your equivalent based on the platform) for Template.</li> </ul> <p>Screenshot of Template</p> <ul> <li>One the <code>Disks</code> tab, leave all default configurations in place.</li> </ul> <p>Screenshot of Disks</p> <ul> <li>One the <code>CPU</code> tab, leave all default configurations in place.</li> </ul> <p>Screenshot of CPU</p> <ul> <li>One the <code>Memory</code> tab, leave all default configurations in place.</li> </ul> <p>Screenshot of Memory</p> <ul> <li>One the <code>Network</code> tab, change the IPv4 to <code>DHCP</code>. Note that this assumes the default bridge <code>vmbr0</code> is connected to a gateway that can respond to DHCP requests on an Internet-connected LAN subnet.</li> </ul> <p>Screenshot of Network</p> <ul> <li>One the <code>DNS</code> tab, leave all default configurations in place.</li> </ul> <p>Screenshot of DNS</p> <ul> <li>One the <code>Confirm</code> tab, review all your settings and when complete, click the <code>Finish</code> button.</li> </ul> <p>Screenshot of Confirm</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/creating-a-network-host-template-in-proxmox/#step-3-update-and-configure-the-ubuntu-linux-ct-for-use-as-a-network-host","title":"Step 3: Update and Configure the Ubuntu Linux CT for Use as a Network Host","text":"<p>Before this CT can become a custom template for cloning, there is some configuration to it that must be done. Select the newly-created <code>host0</code> CT from the list, then select the <code>Console</code> tab and click the <code>Start Now</code> button to run the CT.</p> <p>From there, log into the CT's root account using the password entered in Step 2 above, and perform the following configuration tasks.</p> <p>Add a non-root administrator account and fill out the proceeding prompts:</p> <pre><code>adduser admin\n</code></pre> <p>Add the newly-created account to the sudo group to use administrator priveleges:</p> <pre><code>addgroup admin sudo\n</code></pre> <p>Log out of the root account then log in again using your new user name and password:</p> <pre><code>logout\n</code></pre> <p>Tip</p> <p>Upon login, you should see the following message confirming sudo priveleges:</p> <p>To run a command as administrator (user \"root\"), use \"sudo \". See \"man sudo_root\" for details. <p>Upgrade all existing packages:</p> <pre><code>sudo apt update &amp;&amp; sudo apt dist-upgrade\n</code></pre> <p>Install several additional packages:</p> <pre><code>sudo apt install network-manager nmap ipcalc\n</code></pre> <p>Clean up the package database:</p> <pre><code>sudo apt clean\n</code></pre> <p>Clean up unnecessary packages:</p> <pre><code>sudo apt autoremove\n</code></pre> <p>Remove the current SSH host keys so each clone regenerates new keys:</p> <pre><code>sudo rm /etc/ssh/ssh_host_*\n</code></pre> <p>Remove the current machine ID so each clone regenerates a new ID:</p> <pre><code>sudo truncate -s 0 /etc/machine-id\n</code></pre> <p>Shut down the CT:</p> <pre><code>sudo systemctl poweroff\n</code></pre>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/creating-a-network-host-template-in-proxmox/#step-4-convert-the-ubuntu-linux-ct-into-a-custom-container-template","title":"Step 4: Convert the Ubuntu Linux CT into a Custom Container Template","text":"<p>You're now ready to convert this CT into a custom template.</p> <ul> <li>With the CT powered down, click the <code>More</code> drop-down button at the top-right of the Proxmox VE window, then click <code>Convert to template</code>.</li> <li>Click the <code>Yes</code> button to proceed, and the CT will be converted into a template.</li> </ul> <p>Your network host template is now ready. Complete the Cloning a Network Host Template in Proxmox lab to practice creating Ubuntu Linux network hosts for use in upcoming labs.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/exploring-subnets-and-vlans-in-proxmox/","title":"Exploring Subnets and VLANs in Proxmox","text":"","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/exploring-subnets-and-vlans-in-proxmox/#introduction","title":"Introduction","text":"<p>In this lab we're going to continue exploring subnets and begin to look at the role of VLANs in addressing the broadcast domain issue we observed in the previous lab. Recall from that lab that we ended up with two subnets on the same bridge and shared the same broadcast domain.</p> <p>VLANs are a way to logically separate broadcast domains within the same Layer 2 network, such as a bridge or switch. This allows us to reduce broadcasts and flooding, which improves network performance. VLANs also:</p> <ul> <li>increase network security by segmenting Layer 2 networks and enabling fine-grained control of inter-VLAN communication between hosts via routing and firewalls,</li> <li>provide management flexibility in organizing and controlling traffic based on each host or subnet's role, functions, or priority (quality of service [QoS]) and</li> <li>maximize hardware utilization by enabling multiple VLANs to either exist on the same bridge or switch as well as connecting across multiple bridges or switches.</li> </ul> <p>In this lab we're going to concentrate on segmenting broadcast domains using VLANs, but we'll be addressing the other applications of VLANs in future labs.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/exploring-subnets-and-vlans-in-proxmox/#step-1-configure-the-bridge-to-be-vlan-aware","title":"Step 1: Configure the Bridge to Be VLAN Aware","text":"<p>Before we begin experimenting with VLANS, we have to make a change to bridge <code>vmbr1</code> in order to allow VLANs on the hosts. On the <code>Networks</code> view of the Proxmox node, edit <code>vmbr1</code> and check \"VLAN aware.\" Then click the <code>Apply Configuration</code> button and you're ready to use VLANs on the bridge.</p> <p>Warning</p> <p>Ensure this configuration is performed before attempting to apply VLAN settings to hosts on a bridge. Otherwise, you'll get errors.</p> <p>The same is true for attempting to disable VLAN settings on a bridge. In this case, if hosts are configured with VLANs, and you try to uncheck \"VLAN aware\" on the bridge, you will get errors here, as well.</p> <p>There are other VLAN configuration options within Proxmox, but this is simplest and most consistent way to configure them at this point. We'll dig into advanced Proxmox networking in future labs.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/exploring-subnets-and-vlans-in-proxmox/#step-2-assign-subnets-to-vlans","title":"Step 2: Assign Subnets to VLANs","text":"<p>With the bridge now VLAN aware, it's time to assign VLANS to each subnet in order to separate each subnet's broadcast domain. To do this, we'll use a common VLAN to subnet numbering convention that is helpful while learning these concepts.</p> <p>Tip</p> <p>Using one VLAN per subnet is the recommended best practice.</p> <p>We're going to create two new subnets: <code>10.0.10.0/24</code> and <code>10.0.20.0/24</code>, and assign VLAN <code>10</code> to the first subnet and VLAN <code>20</code> to the second subnet. Using this convention, the third octet of the subnet matches the VLAN ID.</p> <p>Warning</p> <p>This numbering convention is helpful for learning purposes, but will often break down or not scale in production networks, and also should not be used as a substitute for good documentation.</p> <p>We'll cover both network address planning and documentation in future labs.</p> <p><code>host1</code> and <code>host2</code> are going to be assigned to the <code>10.0.10.0/24</code> subnet, and <code>host3</code> and <code>host4</code> are going to be assigned to the <code>10.0.20.0/24</code> subnet. Here's the new addressing plan for our four hosts:</p> Host IPv4 Address VLAN host1 10.0.10.1/24 10 host2 10.0.10.2/24 10 host3 10.0.20.3/24 20 host4 10.0.20.4/24 20 <p>Make these changes by updating the IPv4 address and VLAN ID settings within the network configurations for each host in Proxmox. Verify each host has the right IPv4 address by running an <code>ip</code> command that displays host addressing and reviewing the output:</p> <pre><code>ip a\n</code></pre>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/exploring-subnets-and-vlans-in-proxmox/#step-3-verify-broadcast-domain-isolation-for-each-subnet","title":"Step 3: Verify Broadcast Domain Isolation for Each Subnet","text":"<p>Once all configuration changes are made, we'll be ready to verify that the VLANs now isolate the two broadcast domains, as expected. To test, we're going to use <code>nmap</code> again, but this time, we'll also see how it works behind the scenes so you understand why it's a good choice for this test.</p> <p>Open up all four hosts in the quarter tile layout so they're all visible, and begin packet captures on <code>host2</code> and <code>host4</code>:</p> <pre><code>sudo tcpdump\n</code></pre> <p>Next, we're going to perform a quick scan of each subnet and then examine the results. Starting on <code>host1</code>, run the following on <code>host1</code>:</p> <pre><code>nmap -sn 10.0.10.0/24\n</code></pre> <p>Then check the output on both <code>host1</code> and <code>host2</code></p> <pre><code>eron@host1:~$ nmap -sn 10.0.10.0/24\nStarting Nmap 7.80 ( https://nmap.org ) at 2023-06-27 13:54 UTC\nNmap scan report for 10.0.10.1\nHost is up (0.00033s latency).\nNmap scan report for 10.0.10.2\nHost is up (0.00023s latency).\nNmap done: 256 IP addresses (2 hosts up) scanned in 15.91 seconds\n</code></pre> <pre><code>eron@host2:~$ sudo tcpdump\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n13:54:02.238931 IP 10.0.10.1.54440 &gt; 10.0.10.2.http: Flags [S], seq 3772918725, win 64240, options [mss 1460,sackOK,TS val 3851871978 ecr 0,nop,wscale 7], length 0\n13:54:02.238938 IP 10.0.10.2.http &gt; 10.0.10.1.54440: Flags [R.], seq 0, ack 3772918726, win 0, length 0\n13:54:02.238976 ARP, Request who-has 10.0.10.3 tell 10.0.10.1, length 28\n13:54:02.238996 ARP, Request who-has 10.0.10.4 tell 10.0.10.1, length 28\n13:54:02.239034 ARP, Request who-has 10.0.10.5 tell 10.0.10.1, length 28\n13:54:02.239061 ARP, Request who-has 10.0.10.6 tell 10.0.10.1, length 28\n13:54:02.239079 ARP, Request who-has 10.0.10.7 tell 10.0.10.1, length 28\n13:54:02.239114 ARP, Request who-has 10.0.10.8 tell 10.0.10.1, length 28\n13:54:02.239140 ARP, Request who-has 10.0.10.9 tell 10.0.10.1, length 28\n13:54:02.239174 ARP, Request who-has 10.0.10.10 tell 10.0.10.1, length 28\n13:54:02.239278 ARP, Request who-has 10.0.10.13 tell 10.0.10.1, length 28\n13:54:02.239317 ARP, Request who-has 10.0.10.14 tell 10.0.10.1, length 28\n13:54:02.239343 ARP, Request who-has 10.0.10.15 tell 10.0.10.1, length 28\n13:54:02.239359 ARP, Request who-has 10.0.10.16 tell 10.0.10.1, length 28\n13:54:02.339041 ARP, Request who-has 10.0.10.65 tell 10.0.10.1, length 28\n13:54:02.339115 ARP, Request who-has 10.0.10.68 tell 10.0.10.1, length 28\n13:54:02.339142 ARP, Request who-has 10.0.10.69 tell 10.0.10.1, length 28\n13:54:02.339160 ARP, Request who-has 10.0.10.70 tell 10.0.10.1, length 28\n13:54:02.339230 ARP, Request who-has 10.0.10.73 tell 10.0.10.1, length 28\n13:54:02.339249 ARP, Request who-has 10.0.10.74 tell 10.0.10.1, length 28\n13:54:02.339267 ARP, Request who-has 10.0.10.75 tell 10.0.10.1, length 28\n13:54:02.339284 ARP, Request who-has 10.0.10.76 tell 10.0.10.1, length 28\n13:54:02.339345 ARP, Request who-has 10.0.10.79 tell 10.0.10.1, length 28\n13:54:02.339362 ARP, Request who-has 10.0.10.80 tell 10.0.10.1, length 28\n13:54:02.339424 ARP, Request who-has 10.0.10.83 tell 10.0.10.1, length 28\n13:54:02.339441 ARP, Request who-has 10.0.10.84 tell 10.0.10.1, length 28\n13:54:02.439092 ARP, Request who-has 10.0.10.131 tell 10.0.10.1, length 28\n13:54:02.439157 ARP, Request who-has 10.0.10.134 tell 10.0.10.1, length 28\n13:54:02.439220 ARP, Request who-has 10.0.10.137 tell 10.0.10.1, length 28\n13:54:02.439238 ARP, Request who-has 10.0.10.138 tell 10.0.10.1, length 28\n13:54:02.439299 ARP, Request who-has 10.0.10.141 tell 10.0.10.1, length 28\n13:54:02.439317 ARP, Request who-has 10.0.10.142 tell 10.0.10.1, length 28\n13:54:02.439378 ARP, Request who-has 10.0.10.145 tell 10.0.10.1, length 28\n13:54:02.439400 ARP, Request who-has 10.0.10.146 tell 10.0.10.1, length 28\n13:54:02.439464 ARP, Request who-has 10.0.10.149 tell 10.0.10.1, length 28\n13:54:02.439483 ARP, Request who-has 10.0.10.150 tell 10.0.10.1, length 28\n13:54:02.439500 ARP, Request who-has 10.0.10.151 tell 10.0.10.1, length 28\n13:54:02.439558 ARP, Request who-has 10.0.10.154 tell 10.0.10.1, length 28\n13:54:02.539133 ARP, Request who-has 10.0.10.193 tell 10.0.10.1, length 28\n13:54:02.539197 ARP, Request who-has 10.0.10.196 tell 10.0.10.1, length 28\n13:54:02.539257 ARP, Request who-has 10.0.10.199 tell 10.0.10.1, length 28\n13:54:02.539315 ARP, Request who-has 10.0.10.202 tell 10.0.10.1, length 28\n13:54:02.539376 ARP, Request who-has 10.0.10.205 tell 10.0.10.1, length 28\n13:54:02.539395 ARP, Request who-has 10.0.10.206 tell 10.0.10.1, length 28\n13:54:02.539455 ARP, Request who-has 10.0.10.209 tell 10.0.10.1, length 28\n13:54:02.539474 ARP, Request who-has 10.0.10.210 tell 10.0.10.1, length 28\n13:54:02.539547 ARP, Request who-has 10.0.10.213 tell 10.0.10.1, length 28\n13:54:02.539565 ARP, Request who-has 10.0.10.214 tell 10.0.10.1, length 28\n13:54:02.539631 ARP, Request who-has 10.0.10.217 tell 10.0.10.1, length 28\n13:54:02.539651 ARP, Request who-has 10.0.10.218 tell 10.0.10.1, length 28\n13:54:02.639187 ARP, Request who-has 10.0.10.253 tell 10.0.10.1, length 28\n13:54:02.639252 ARP, Request who-has 10.0.10.0 tell 10.0.10.1, length 28\n13:54:02.639311 ARP, Request who-has 10.0.10.11 tell 10.0.10.1, length 28\n13:54:02.639369 ARP, Request who-has 10.0.10.17 tell 10.0.10.1, length 28\n13:54:02.639426 ARP, Request who-has 10.0.10.20 tell 10.0.10.1, length 28\n13:54:02.639483 ARP, Request who-has 10.0.10.23 tell 10.0.10.1, length 28\n13:54:02.639544 ARP, Request who-has 10.0.10.26 tell 10.0.10.1, length 28\n13:54:02.639562 ARP, Request who-has 10.0.10.27 tell 10.0.10.1, length 28\n13:54:02.639622 ARP, Request who-has 10.0.10.30 tell 10.0.10.1, length 28\n13:54:02.639640 ARP, Request who-has 10.0.10.31 tell 10.0.10.1, length 28\n13:54:02.639700 ARP, Request who-has 10.0.10.34 tell 10.0.10.1, length 28\n13:54:02.639718 ARP, Request who-has 10.0.10.35 tell 10.0.10.1, length 28\n13:54:02.739241 ARP, Request who-has 10.0.10.71 tell 10.0.10.1, length 28\n13:54:02.739306 ARP, Request who-has 10.0.10.77 tell 10.0.10.1, length 28\n13:54:02.739367 ARP, Request who-has 10.0.10.81 tell 10.0.10.1, length 28\n13:54:02.739429 ARP, Request who-has 10.0.10.85 tell 10.0.10.1, length 28\n13:54:02.739490 ARP, Request who-has 10.0.10.88 tell 10.0.10.1, length 28\n13:54:02.739549 ARP, Request who-has 10.0.10.91 tell 10.0.10.1, length 28\n13:54:02.739609 ARP, Request who-has 10.0.10.94 tell 10.0.10.1, length 28\n13:54:02.739626 ARP, Request who-has 10.0.10.95 tell 10.0.10.1, length 28\n13:54:02.739688 ARP, Request who-has 10.0.10.98 tell 10.0.10.1, length 28\n13:54:02.739705 ARP, Request who-has 10.0.10.99 tell 10.0.10.1, length 28\n13:54:02.739771 ARP, Request who-has 10.0.10.102 tell 10.0.10.1, length 28\n13:54:02.739793 ARP, Request who-has 10.0.10.103 tell 10.0.10.1, length 28\n13:54:02.839291 ARP, Request who-has 10.0.10.132 tell 10.0.10.1, length 28\n13:54:02.839359 ARP, Request who-has 10.0.10.135 tell 10.0.10.1, length 28\n13:54:02.839420 ARP, Request who-has 10.0.10.139 tell 10.0.10.1, length 28\n13:54:02.839481 ARP, Request who-has 10.0.10.143 tell 10.0.10.1, length 28\n13:54:02.839540 ARP, Request who-has 10.0.10.147 tell 10.0.10.1, length 28\n13:54:02.839599 ARP, Request who-has 10.0.10.152 tell 10.0.10.1, length 28\n13:54:02.839660 ARP, Request who-has 10.0.10.155 tell 10.0.10.1, length 28\n13:54:02.839724 ARP, Request who-has 10.0.10.158 tell 10.0.10.1, length 28\n13:54:02.839743 ARP, Request who-has 10.0.10.159 tell 10.0.10.1, length 28\n13:54:02.839802 ARP, Request who-has 10.0.10.162 tell 10.0.10.1, length 28\n13:54:02.839862 ARP, Request who-has 10.0.10.165 tell 10.0.10.1, length 28\n13:54:02.839880 ARP, Request who-has 10.0.10.166 tell 10.0.10.1, length 28\n13:54:02.939327 ARP, Request who-has 10.0.10.191 tell 10.0.10.1, length 28\n13:54:02.939393 ARP, Request who-has 10.0.10.194 tell 10.0.10.1, length 28\n13:54:02.939454 ARP, Request who-has 10.0.10.197 tell 10.0.10.1, length 28\n13:54:02.939513 ARP, Request who-has 10.0.10.200 tell 10.0.10.1, length 28\n13:54:02.939591 ARP, Request who-has 10.0.10.207 tell 10.0.10.1, length 28\n13:54:02.939649 ARP, Request who-has 10.0.10.211 tell 10.0.10.1, length 28\n13:54:02.939708 ARP, Request who-has 10.0.10.215 tell 10.0.10.1, length 28\n13:54:02.939767 ARP, Request who-has 10.0.10.219 tell 10.0.10.1, length 28\n13:54:02.939825 ARP, Request who-has 10.0.10.222 tell 10.0.10.1, length 28\n13:54:02.939884 ARP, Request who-has 10.0.10.225 tell 10.0.10.1, length 28\n13:54:02.939946 ARP, Request who-has 10.0.10.228 tell 10.0.10.1, length 28\n13:54:02.939966 ARP, Request who-has 10.0.10.229 tell 10.0.10.1, length 28\n13:54:03.040226 ARP, Request who-has 10.0.10.232 tell 10.0.10.1, length 28\n13:54:03.040248 ARP, Request who-has 10.0.10.233 tell 10.0.10.1, length 28\n13:54:03.040266 ARP, Request who-has 10.0.10.234 tell 10.0.10.1, length 28\n13:54:03.040292 ARP, Request who-has 10.0.10.235 tell 10.0.10.1, length 28\n13:54:03.040309 ARP, Request who-has 10.0.10.236 tell 10.0.10.1, length 28\n13:54:03.040327 ARP, Request who-has 10.0.10.237 tell 10.0.10.1, length 28\n13:54:03.040345 ARP, Request who-has 10.0.10.238 tell 10.0.10.1, length 28\n13:54:03.040362 ARP, Request who-has 10.0.10.239 tell 10.0.10.1, length 28\n13:54:03.040378 ARP, Request who-has 10.0.10.240 tell 10.0.10.1, length 28\n13:54:03.040395 ARP, Request who-has 10.0.10.241 tell 10.0.10.1, length 28\n13:54:03.040413 ARP, Request who-has 10.0.10.242 tell 10.0.10.1, length 28\n13:54:03.040430 ARP, Request who-has 10.0.10.243 tell 10.0.10.1, length 28\n13:54:03.140269 ARP, Request who-has 10.0.10.60 tell 10.0.10.1, length 28\n13:54:03.140341 ARP, Request who-has 10.0.10.63 tell 10.0.10.1, length 28\n13:54:03.140361 ARP, Request who-has 10.0.10.64 tell 10.0.10.1, length 28\n13:54:03.140382 ARP, Request who-has 10.0.10.66 tell 10.0.10.1, length 28\n13:54:03.140456 ARP, Request who-has 10.0.10.72 tell 10.0.10.1, length 28\n13:54:03.140475 ARP, Request who-has 10.0.10.78 tell 10.0.10.1, length 28\n13:54:03.140492 ARP, Request who-has 10.0.10.82 tell 10.0.10.1, length 28\n13:54:03.140509 ARP, Request who-has 10.0.10.86 tell 10.0.10.1, length 28\n13:54:03.140526 ARP, Request who-has 10.0.10.87 tell 10.0.10.1, length 28\n13:54:03.140543 ARP, Request who-has 10.0.10.89 tell 10.0.10.1, length 28\n13:54:03.140607 ARP, Request who-has 10.0.10.92 tell 10.0.10.1, length 28\n13:54:03.140630 ARP, Request who-has 10.0.10.93 tell 10.0.10.1, length 28\n13:54:03.240320 ARP, Request who-has 10.0.10.148 tell 10.0.10.1, length 28\n13:54:03.240387 ARP, Request who-has 10.0.10.153 tell 10.0.10.1, length 28\n13:54:03.240455 ARP, Request who-has 10.0.10.156 tell 10.0.10.1, length 28\n13:54:03.240474 ARP, Request who-has 10.0.10.157 tell 10.0.10.1, length 28\n13:54:03.240538 ARP, Request who-has 10.0.10.160 tell 10.0.10.1, length 28\n13:54:03.240556 ARP, Request who-has 10.0.10.161 tell 10.0.10.1, length 28\n13:54:03.240573 ARP, Request who-has 10.0.10.163 tell 10.0.10.1, length 28\n13:54:03.240638 ARP, Request who-has 10.0.10.167 tell 10.0.10.1, length 28\n13:54:03.240663 ARP, Request who-has 10.0.10.168 tell 10.0.10.1, length 28\n13:54:03.240681 ARP, Request who-has 10.0.10.169 tell 10.0.10.1, length 28\n13:54:03.240744 ARP, Request who-has 10.0.10.172 tell 10.0.10.1, length 28\n13:54:03.240764 ARP, Request who-has 10.0.10.173 tell 10.0.10.1, length 28\n13:54:03.240880 ARP, Request who-has 10.0.10.16 tell 10.0.10.1, length 28\n13:54:03.240882 ARP, Request who-has 10.0.10.15 tell 10.0.10.1, length 28\n13:54:03.240882 ARP, Request who-has 10.0.10.14 tell 10.0.10.1, length 28\n13:54:03.240883 ARP, Request who-has 10.0.10.13 tell 10.0.10.1, length 28\n13:54:03.240884 ARP, Request who-has 10.0.10.10 tell 10.0.10.1, length 28\n13:54:03.240885 ARP, Request who-has 10.0.10.9 tell 10.0.10.1, length 28\n13:54:03.240885 ARP, Request who-has 10.0.10.8 tell 10.0.10.1, length 28\n13:54:03.240886 ARP, Request who-has 10.0.10.7 tell 10.0.10.1, length 28\n13:54:03.240887 ARP, Request who-has 10.0.10.6 tell 10.0.10.1, length 28\n13:54:03.240887 ARP, Request who-has 10.0.10.5 tell 10.0.10.1, length 28\n13:54:03.240888 ARP, Request who-has 10.0.10.4 tell 10.0.10.1, length 28\n13:54:03.240889 ARP, Request who-has 10.0.10.3 tell 10.0.10.1, length 28\n13:54:03.368936 ARP, Request who-has 10.0.10.84 tell 10.0.10.1, length 28\n13:54:03.368938 ARP, Request who-has 10.0.10.83 tell 10.0.10.1, length 28\n13:54:03.368939 ARP, Request who-has 10.0.10.80 tell 10.0.10.1, length 28\n13:54:03.368939 ARP, Request who-has 10.0.10.79 tell 10.0.10.1, length 28\n13:54:03.368940 ARP, Request who-has 10.0.10.76 tell 10.0.10.1, length 28\n13:54:03.368940 ARP, Request who-has 10.0.10.75 tell 10.0.10.1, length 28\n13:54:03.368941 ARP, Request who-has 10.0.10.74 tell 10.0.10.1, length 28\n13:54:03.368942 ARP, Request who-has 10.0.10.73 tell 10.0.10.1, length 28\n13:54:03.368942 ARP, Request who-has 10.0.10.70 tell 10.0.10.1, length 28\n13:54:03.368943 ARP, Request who-has 10.0.10.69 tell 10.0.10.1, length 28\n13:54:03.368943 ARP, Request who-has 10.0.10.68 tell 10.0.10.1, length 28\n13:54:03.368944 ARP, Request who-has 10.0.10.65 tell 10.0.10.1, length 28\n13:54:03.464947 ARP, Request who-has 10.0.10.154 tell 10.0.10.1, length 28\n13:54:03.464950 ARP, Request who-has 10.0.10.151 tell 10.0.10.1, length 28\n13:54:03.464951 ARP, Request who-has 10.0.10.150 tell 10.0.10.1, length 28\n13:54:03.464952 ARP, Request who-has 10.0.10.149 tell 10.0.10.1, length 28\n13:54:03.464952 ARP, Request who-has 10.0.10.146 tell 10.0.10.1, length 28\n13:54:03.464953 ARP, Request who-has 10.0.10.145 tell 10.0.10.1, length 28\n13:54:03.464954 ARP, Request who-has 10.0.10.142 tell 10.0.10.1, length 28\n13:54:03.464954 ARP, Request who-has 10.0.10.141 tell 10.0.10.1, length 28\n13:54:03.464955 ARP, Request who-has 10.0.10.138 tell 10.0.10.1, length 28\n13:54:03.464955 ARP, Request who-has 10.0.10.137 tell 10.0.10.1, length 28\n13:54:03.464956 ARP, Request who-has 10.0.10.134 tell 10.0.10.1, length 28\n13:54:03.464957 ARP, Request who-has 10.0.10.131 tell 10.0.10.1, length 28\n13:54:03.540432 IP 10.0.10.1.54454 &gt; 10.0.10.2.http: Flags [S], seq 1946917605, win 64240, options [mss 1460,sackOK,TS val 3851873279 ecr 0,nop,wscale 7], length 0\n13:54:03.540440 IP 10.0.10.2.http &gt; 10.0.10.1.54454: Flags [R.], seq 0, ack 1946917606, win 0, length 0\n13:54:03.540670 ARP, Request who-has 10.0.10.96 tell 10.0.10.1, length 28\n13:54:03.540691 ARP, Request who-has 10.0.10.97 tell 10.0.10.1, length 28\n13:54:03.540709 ARP, Request who-has 10.0.10.100 tell 10.0.10.1, length 28\n13:54:03.540727 ARP, Request who-has 10.0.10.101 tell 10.0.10.1, length 28\n13:54:03.540747 ARP, Request who-has 10.0.10.104 tell 10.0.10.1, length 28\n13:54:03.540765 ARP, Request who-has 10.0.10.105 tell 10.0.10.1, length 28\n13:54:03.540782 ARP, Request who-has 10.0.10.106 tell 10.0.10.1, length 28\n13:54:03.540808 ARP, Request who-has 10.0.10.107 tell 10.0.10.1, length 28\n13:54:03.540842 ARP, Request who-has 10.0.10.108 tell 10.0.10.1, length 28\n13:54:03.540860 ARP, Request who-has 10.0.10.109 tell 10.0.10.1, length 28\n13:54:03.540877 ARP, Request who-has 10.0.10.110 tell 10.0.10.1, length 28\n13:54:03.540896 ARP, Request who-has 10.0.10.111 tell 10.0.10.1, length 28\n13:54:03.540913 ARP, Request who-has 10.0.10.112 tell 10.0.10.1, length 28\n13:54:03.540932 ARP, Request who-has 10.0.10.113 tell 10.0.10.1, length 28\n13:54:03.540950 ARP, Request who-has 10.0.10.114 tell 10.0.10.1, length 28\n13:54:03.540970 ARP, Request who-has 10.0.10.115 tell 10.0.10.1, length 28\n13:54:03.540988 ARP, Request who-has 10.0.10.116 tell 10.0.10.1, length 28\n13:54:03.541005 ARP, Request who-has 10.0.10.117 tell 10.0.10.1, length 28\n13:54:03.541023 ARP, Request who-has 10.0.10.118 tell 10.0.10.1, length 28\n13:54:03.541040 ARP, Request who-has 10.0.10.119 tell 10.0.10.1, length 28\n13:54:03.541058 ARP, Request who-has 10.0.10.120 tell 10.0.10.1, length 28\n13:54:03.541079 ARP, Request who-has 10.0.10.121 tell 10.0.10.1, length 28\n13:54:03.541096 ARP, Request who-has 10.0.10.122 tell 10.0.10.1, length 28\n13:54:03.541114 ARP, Request who-has 10.0.10.123 tell 10.0.10.1, length 28\n13:54:03.541133 ARP, Request who-has 10.0.10.124 tell 10.0.10.1, length 28\n13:54:03.541153 ARP, Request who-has 10.0.10.125 tell 10.0.10.1, length 28\n13:54:03.541170 ARP, Request who-has 10.0.10.126 tell 10.0.10.1, length 28\n13:54:03.541189 ARP, Request who-has 10.0.10.127 tell 10.0.10.1, length 28\n13:54:03.541207 ARP, Request who-has 10.0.10.128 tell 10.0.10.1, length 28\n13:54:03.541229 ARP, Request who-has 10.0.10.129 tell 10.0.10.1, length 28\n13:54:03.541248 ARP, Request who-has 10.0.10.130 tell 10.0.10.1, length 28\n13:54:03.541273 ARP, Request who-has 10.0.10.133 tell 10.0.10.1, length 28\n13:54:03.541298 ARP, Request who-has 10.0.10.136 tell 10.0.10.1, length 28\n13:54:03.541337 ARP, Request who-has 10.0.10.140 tell 10.0.10.1, length 28\n13:54:03.541441 ARP, Request who-has 10.0.10.144 tell 10.0.10.1, length 28\n13:54:03.541514 ARP, Request who-has 10.0.10.164 tell 10.0.10.1, length 28\n13:54:03.541530 ARP, Request who-has 10.0.10.170 tell 10.0.10.1, length 28\n13:54:03.541546 ARP, Request who-has 10.0.10.171 tell 10.0.10.1, length 28\n13:54:03.541561 ARP, Request who-has 10.0.10.174 tell 10.0.10.1, length 28\n13:54:03.541581 ARP, Request who-has 10.0.10.175 tell 10.0.10.1, length 28\n13:54:03.541597 ARP, Request who-has 10.0.10.176 tell 10.0.10.1, length 28\n13:54:03.541613 ARP, Request who-has 10.0.10.177 tell 10.0.10.1, length 28\n13:54:03.541630 ARP, Request who-has 10.0.10.178 tell 10.0.10.1, length 28\n13:54:03.541645 ARP, Request who-has 10.0.10.179 tell 10.0.10.1, length 28\n13:54:03.541661 ARP, Request who-has 10.0.10.180 tell 10.0.10.1, length 28\n13:54:03.541676 ARP, Request who-has 10.0.10.181 tell 10.0.10.1, length 28\n13:54:03.541695 ARP, Request who-has 10.0.10.182 tell 10.0.10.1, length 28\n13:54:03.541711 ARP, Request who-has 10.0.10.183 tell 10.0.10.1, length 28\n13:54:03.541731 ARP, Request who-has 10.0.10.184 tell 10.0.10.1, length 28\n13:54:03.541750 ARP, Request who-has 10.0.10.185 tell 10.0.10.1, length 28\n13:54:03.541766 ARP, Request who-has 10.0.10.186 tell 10.0.10.1, length 28\n13:54:03.541782 ARP, Request who-has 10.0.10.187 tell 10.0.10.1, length 28\n13:54:03.541799 ARP, Request who-has 10.0.10.188 tell 10.0.10.1, length 28\n13:54:03.560932 ARP, Request who-has 10.0.10.218 tell 10.0.10.1, length 28\n13:54:03.560934 ARP, Request who-has 10.0.10.217 tell 10.0.10.1, length 28\n13:54:03.560934 ARP, Request who-has 10.0.10.214 tell 10.0.10.1, length 28\n13:54:03.560935 ARP, Request who-has 10.0.10.213 tell 10.0.10.1, length 28\n13:54:03.560936 ARP, Request who-has 10.0.10.210 tell 10.0.10.1, length 28\n13:54:03.560936 ARP, Request who-has 10.0.10.209 tell 10.0.10.1, length 28\n13:54:03.560937 ARP, Request who-has 10.0.10.206 tell 10.0.10.1, length 28\n13:54:03.560938 ARP, Request who-has 10.0.10.205 tell 10.0.10.1, length 28\n13:54:03.560938 ARP, Request who-has 10.0.10.202 tell 10.0.10.1, length 28\n13:54:03.560939 ARP, Request who-has 10.0.10.199 tell 10.0.10.1, length 28\n13:54:03.560940 ARP, Request who-has 10.0.10.196 tell 10.0.10.1, length 28\n13:54:03.560940 ARP, Request who-has 10.0.10.193 tell 10.0.10.1, length 28\n13:54:03.640866 ARP, Request who-has 10.0.10.244 tell 10.0.10.1, length 28\n13:54:03.640890 ARP, Request who-has 10.0.10.245 tell 10.0.10.1, length 28\n13:54:03.640910 ARP, Request who-has 10.0.10.246 tell 10.0.10.1, length 28\n13:54:03.641026 ARP, Request who-has 10.0.10.249 tell 10.0.10.1, length 28\n13:54:03.641043 ARP, Request who-has 10.0.10.250 tell 10.0.10.1, length 28\n13:54:03.641060 ARP, Request who-has 10.0.10.251 tell 10.0.10.1, length 28\n13:54:03.641077 ARP, Request who-has 10.0.10.252 tell 10.0.10.1, length 28\n13:54:03.641094 ARP, Request who-has 10.0.10.254 tell 10.0.10.1, length 28\n13:54:03.641285 ARP, Request who-has 10.0.10.12 tell 10.0.10.1, length 28\n13:54:03.641340 ARP, Request who-has 10.0.10.18 tell 10.0.10.1, length 28\n13:54:03.641357 ARP, Request who-has 10.0.10.19 tell 10.0.10.1, length 28\n13:54:03.641374 ARP, Request who-has 10.0.10.21 tell 10.0.10.1, length 28\n13:54:03.641391 ARP, Request who-has 10.0.10.22 tell 10.0.10.1, length 28\n13:54:03.641409 ARP, Request who-has 10.0.10.24 tell 10.0.10.1, length 28\n13:54:03.641426 ARP, Request who-has 10.0.10.25 tell 10.0.10.1, length 28\n13:54:03.641443 ARP, Request who-has 10.0.10.28 tell 10.0.10.1, length 28\n13:54:03.641467 ARP, Request who-has 10.0.10.29 tell 10.0.10.1, length 28\n13:54:03.641483 ARP, Request who-has 10.0.10.32 tell 10.0.10.1, length 28\n13:54:03.641701 ARP, Request who-has 10.0.10.36 tell 10.0.10.1, length 28\n13:54:03.641717 ARP, Request who-has 10.0.10.37 tell 10.0.10.1, length 28\n13:54:03.641734 ARP, Request who-has 10.0.10.38 tell 10.0.10.1, length 28\n13:54:03.641749 ARP, Request who-has 10.0.10.39 tell 10.0.10.1, length 28\n13:54:03.641764 ARP, Request who-has 10.0.10.40 tell 10.0.10.1, length 28\n13:54:03.641783 ARP, Request who-has 10.0.10.41 tell 10.0.10.1, length 28\n13:54:03.641799 ARP, Request who-has 10.0.10.42 tell 10.0.10.1, length 28\n13:54:03.641919 ARP, Request who-has 10.0.10.45 tell 10.0.10.1, length 28\n13:54:03.641936 ARP, Request who-has 10.0.10.46 tell 10.0.10.1, length 28\n13:54:03.641953 ARP, Request who-has 10.0.10.47 tell 10.0.10.1, length 28\n13:54:03.641969 ARP, Request who-has 10.0.10.48 tell 10.0.10.1, length 28\n13:54:03.641984 ARP, Request who-has 10.0.10.49 tell 10.0.10.1, length 28\n13:54:03.642000 ARP, Request who-has 10.0.10.50 tell 10.0.10.1, length 28\n13:54:03.642015 ARP, Request who-has 10.0.10.51 tell 10.0.10.1, length 28\n13:54:03.642030 ARP, Request who-has 10.0.10.52 tell 10.0.10.1, length 28\n13:54:03.642046 ARP, Request who-has 10.0.10.53 tell 10.0.10.1, length 28\n13:54:03.642062 ARP, Request who-has 10.0.10.54 tell 10.0.10.1, length 28\n13:54:03.642078 ARP, Request who-has 10.0.10.55 tell 10.0.10.1, length 28\n13:54:03.642094 ARP, Request who-has 10.0.10.56 tell 10.0.10.1, length 28\n13:54:03.642112 ARP, Request who-has 10.0.10.57 tell 10.0.10.1, length 28\n13:54:03.642128 ARP, Request who-has 10.0.10.58 tell 10.0.10.1, length 28\n13:54:03.642143 ARP, Request who-has 10.0.10.59 tell 10.0.10.1, length 28\n13:54:03.642159 ARP, Request who-has 10.0.10.61 tell 10.0.10.1, length 28\n13:54:03.642175 ARP, Request who-has 10.0.10.62 tell 10.0.10.1, length 28\n13:54:03.656893 ARP, Request who-has 10.0.10.35 tell 10.0.10.1, length 28\n13:54:03.656895 ARP, Request who-has 10.0.10.34 tell 10.0.10.1, length 28\n13:54:03.656895 ARP, Request who-has 10.0.10.31 tell 10.0.10.1, length 28\n13:54:03.656896 ARP, Request who-has 10.0.10.30 tell 10.0.10.1, length 28\n13:54:03.656897 ARP, Request who-has 10.0.10.27 tell 10.0.10.1, length 28\n13:54:03.656898 ARP, Request who-has 10.0.10.26 tell 10.0.10.1, length 28\n13:54:03.656898 ARP, Request who-has 10.0.10.23 tell 10.0.10.1, length 28\n13:54:03.656899 ARP, Request who-has 10.0.10.20 tell 10.0.10.1, length 28\n13:54:03.656899 ARP, Request who-has 10.0.10.17 tell 10.0.10.1, length 28\n13:54:03.656900 ARP, Request who-has 10.0.10.11 tell 10.0.10.1, length 28\n13:54:03.656901 ARP, Request who-has 10.0.10.0 tell 10.0.10.1, length 28\n13:54:03.656901 ARP, Request who-has 10.0.10.253 tell 10.0.10.1, length 28\n13:54:03.741047 ARP, Request who-has 10.0.10.189 tell 10.0.10.1, length 28\n13:54:03.741067 ARP, Request who-has 10.0.10.190 tell 10.0.10.1, length 28\n13:54:03.741163 ARP, Request who-has 10.0.10.195 tell 10.0.10.1, length 28\n13:54:03.741190 ARP, Request who-has 10.0.10.198 tell 10.0.10.1, length 28\n13:54:03.741441 ARP, Request who-has 10.0.10.204 tell 10.0.10.1, length 28\n13:54:03.741537 ARP, Request who-has 10.0.10.208 tell 10.0.10.1, length 28\n13:54:03.741572 ARP, Request who-has 10.0.10.212 tell 10.0.10.1, length 28\n13:54:03.741608 ARP, Request who-has 10.0.10.216 tell 10.0.10.1, length 28\n13:54:03.741717 ARP, Request who-has 10.0.10.220 tell 10.0.10.1, length 28\n13:54:03.741733 ARP, Request who-has 10.0.10.221 tell 10.0.10.1, length 28\n13:54:03.741761 ARP, Request who-has 10.0.10.223 tell 10.0.10.1, length 28\n13:54:03.741795 ARP, Request who-has 10.0.10.224 tell 10.0.10.1, length 28\n13:54:03.741810 ARP, Request who-has 10.0.10.226 tell 10.0.10.1, length 28\n13:54:03.741827 ARP, Request who-has 10.0.10.227 tell 10.0.10.1, length 28\n13:54:03.741843 ARP, Request who-has 10.0.10.230 tell 10.0.10.1, length 28\n13:54:03.741877 ARP, Request who-has 10.0.10.231 tell 10.0.10.1, length 28\n13:54:03.741895 ARP, Request who-has 10.0.10.247 tell 10.0.10.1, length 28\n13:54:03.742130 ARP, Request who-has 10.0.10.33 tell 10.0.10.1, length 28\n13:54:03.742162 ARP, Request who-has 10.0.10.43 tell 10.0.10.1, length 28\n13:54:03.742178 ARP, Request who-has 10.0.10.44 tell 10.0.10.1, length 28\n13:54:03.742313 ARP, Request who-has 10.0.10.67 tell 10.0.10.1, length 28\n13:54:03.752936 ARP, Request who-has 10.0.10.103 tell 10.0.10.1, length 28\n13:54:03.752938 ARP, Request who-has 10.0.10.102 tell 10.0.10.1, length 28\n13:54:03.752938 ARP, Request who-has 10.0.10.99 tell 10.0.10.1, length 28\n13:54:03.752939 ARP, Request who-has 10.0.10.98 tell 10.0.10.1, length 28\n13:54:03.752940 ARP, Request who-has 10.0.10.95 tell 10.0.10.1, length 28\n13:54:03.752940 ARP, Request who-has 10.0.10.94 tell 10.0.10.1, length 28\n13:54:03.752941 ARP, Request who-has 10.0.10.91 tell 10.0.10.1, length 28\n13:54:03.752942 ARP, Request who-has 10.0.10.88 tell 10.0.10.1, length 28\n13:54:03.752942 ARP, Request who-has 10.0.10.85 tell 10.0.10.1, length 28\n13:54:03.752943 ARP, Request who-has 10.0.10.81 tell 10.0.10.1, length 28\n13:54:03.752943 ARP, Request who-has 10.0.10.77 tell 10.0.10.1, length 28\n13:54:03.752944 ARP, Request who-has 10.0.10.71 tell 10.0.10.1, length 28\n13:54:03.841344 ARP, Request who-has 10.0.10.192 tell 10.0.10.1, length 28\n13:54:03.841437 ARP, Request who-has 10.0.10.201 tell 10.0.10.1, length 28\n13:54:03.841464 ARP, Request who-has 10.0.10.203 tell 10.0.10.1, length 28\n13:54:03.842322 ARP, Request who-has 10.0.10.90 tell 10.0.10.1, length 28\n13:54:03.848953 ARP, Request who-has 10.0.10.166 tell 10.0.10.1, length 28\n13:54:03.848954 ARP, Request who-has 10.0.10.165 tell 10.0.10.1, length 28\n13:54:03.848955 ARP, Request who-has 10.0.10.162 tell 10.0.10.1, length 28\n13:54:03.848956 ARP, Request who-has 10.0.10.159 tell 10.0.10.1, length 28\n13:54:03.848956 ARP, Request who-has 10.0.10.158 tell 10.0.10.1, length 28\n13:54:03.848957 ARP, Request who-has 10.0.10.155 tell 10.0.10.1, length 28\n13:54:03.848958 ARP, Request who-has 10.0.10.152 tell 10.0.10.1, length 28\n13:54:03.848958 ARP, Request who-has 10.0.10.147 tell 10.0.10.1, length 28\n13:54:03.848959 ARP, Request who-has 10.0.10.143 tell 10.0.10.1, length 28\n13:54:03.848960 ARP, Request who-has 10.0.10.139 tell 10.0.10.1, length 28\n13:54:03.848960 ARP, Request who-has 10.0.10.135 tell 10.0.10.1, length 28\n13:54:03.848961 ARP, Request who-has 10.0.10.132 tell 10.0.10.1, length 28\n13:54:03.941560 ARP, Request who-has 10.0.10.248 tell 10.0.10.1, length 28\n13:54:03.944939 ARP, Request who-has 10.0.10.229 tell 10.0.10.1, length 28\n13:54:03.944941 ARP, Request who-has 10.0.10.228 tell 10.0.10.1, length 28\n13:54:03.944942 ARP, Request who-has 10.0.10.225 tell 10.0.10.1, length 28\n13:54:03.944943 ARP, Request who-has 10.0.10.222 tell 10.0.10.1, length 28\n13:54:03.944943 ARP, Request who-has 10.0.10.219 tell 10.0.10.1, length 28\n13:54:03.944944 ARP, Request who-has 10.0.10.215 tell 10.0.10.1, length 28\n13:54:03.944945 ARP, Request who-has 10.0.10.211 tell 10.0.10.1, length 28\n13:54:03.944945 ARP, Request who-has 10.0.10.207 tell 10.0.10.1, length 28\n13:54:03.944946 ARP, Request who-has 10.0.10.200 tell 10.0.10.1, length 28\n13:54:03.944947 ARP, Request who-has 10.0.10.197 tell 10.0.10.1, length 28\n13:54:03.944947 ARP, Request who-has 10.0.10.194 tell 10.0.10.1, length 28\n13:54:03.944948 ARP, Request who-has 10.0.10.191 tell 10.0.10.1, length 28\n13:54:04.044932 ARP, Request who-has 10.0.10.243 tell 10.0.10.1, length 28\n13:54:04.044934 ARP, Request who-has 10.0.10.242 tell 10.0.10.1, length 28\n13:54:04.044934 ARP, Request who-has 10.0.10.241 tell 10.0.10.1, length 28\n13:54:04.044935 ARP, Request who-has 10.0.10.240 tell 10.0.10.1, length 28\n13:54:04.044935 ARP, Request who-has 10.0.10.239 tell 10.0.10.1, length 28\n13:54:04.044936 ARP, Request who-has 10.0.10.238 tell 10.0.10.1, length 28\n13:54:04.044937 ARP, Request who-has 10.0.10.237 tell 10.0.10.1, length 28\n13:54:04.044937 ARP, Request who-has 10.0.10.236 tell 10.0.10.1, length 28\n13:54:04.044938 ARP, Request who-has 10.0.10.235 tell 10.0.10.1, length 28\n13:54:04.044939 ARP, Request who-has 10.0.10.234 tell 10.0.10.1, length 28\n13:54:04.044939 ARP, Request who-has 10.0.10.233 tell 10.0.10.1, length 28\n13:54:04.044940 ARP, Request who-has 10.0.10.232 tell 10.0.10.1, length 28\n13:54:04.168927 ARP, Request who-has 10.0.10.93 tell 10.0.10.1, length 28\n13:54:04.168929 ARP, Request who-has 10.0.10.92 tell 10.0.10.1, length 28\n13:54:04.168930 ARP, Request who-has 10.0.10.89 tell 10.0.10.1, length 28\n13:54:04.168930 ARP, Request who-has 10.0.10.87 tell 10.0.10.1, length 28\n13:54:04.168931 ARP, Request who-has 10.0.10.86 tell 10.0.10.1, length 28\n13:54:04.168932 ARP, Request who-has 10.0.10.82 tell 10.0.10.1, length 28\n13:54:04.168932 ARP, Request who-has 10.0.10.78 tell 10.0.10.1, length 28\n13:54:04.168933 ARP, Request who-has 10.0.10.72 tell 10.0.10.1, length 28\n13:54:04.168934 ARP, Request who-has 10.0.10.66 tell 10.0.10.1, length 28\n13:54:04.168934 ARP, Request who-has 10.0.10.64 tell 10.0.10.1, length 28\n13:54:04.168935 ARP, Request who-has 10.0.10.63 tell 10.0.10.1, length 28\n13:54:04.168936 ARP, Request who-has 10.0.10.60 tell 10.0.10.1, length 28\n13:54:04.265000 ARP, Request who-has 10.0.10.3 tell 10.0.10.1, length 28\n13:54:04.265002 ARP, Request who-has 10.0.10.4 tell 10.0.10.1, length 28\n13:54:04.265002 ARP, Request who-has 10.0.10.5 tell 10.0.10.1, length 28\n13:54:04.265003 ARP, Request who-has 10.0.10.6 tell 10.0.10.1, length 28\n13:54:04.265004 ARP, Request who-has 10.0.10.7 tell 10.0.10.1, length 28\n13:54:04.265004 ARP, Request who-has 10.0.10.8 tell 10.0.10.1, length 28\n13:54:04.265005 ARP, Request who-has 10.0.10.9 tell 10.0.10.1, length 28\n13:54:04.265006 ARP, Request who-has 10.0.10.10 tell 10.0.10.1, length 28\n13:54:04.265006 ARP, Request who-has 10.0.10.13 tell 10.0.10.1, length 28\n13:54:04.265007 ARP, Request who-has 10.0.10.14 tell 10.0.10.1, length 28\n13:54:04.265007 ARP, Request who-has 10.0.10.15 tell 10.0.10.1, length 28\n13:54:04.265008 ARP, Request who-has 10.0.10.16 tell 10.0.10.1, length 28\n13:54:04.265009 ARP, Request who-has 10.0.10.173 tell 10.0.10.1, length 28\n13:54:04.265009 ARP, Request who-has 10.0.10.172 tell 10.0.10.1, length 28\n13:54:04.265010 ARP, Request who-has 10.0.10.169 tell 10.0.10.1, length 28\n13:54:04.265011 ARP, Request who-has 10.0.10.168 tell 10.0.10.1, length 28\n13:54:04.265011 ARP, Request who-has 10.0.10.167 tell 10.0.10.1, length 28\n13:54:04.265012 ARP, Request who-has 10.0.10.163 tell 10.0.10.1, length 28\n13:54:04.265013 ARP, Request who-has 10.0.10.161 tell 10.0.10.1, length 28\n13:54:04.265013 ARP, Request who-has 10.0.10.160 tell 10.0.10.1, length 28\n13:54:04.265014 ARP, Request who-has 10.0.10.157 tell 10.0.10.1, length 28\n13:54:04.265015 ARP, Request who-has 10.0.10.156 tell 10.0.10.1, length 28\n13:54:04.265015 ARP, Request who-has 10.0.10.153 tell 10.0.10.1, length 28\n13:54:04.265016 ARP, Request who-has 10.0.10.148 tell 10.0.10.1, length 28\n13:54:04.392915 ARP, Request who-has 10.0.10.65 tell 10.0.10.1, length 28\n13:54:04.392917 ARP, Request who-has 10.0.10.68 tell 10.0.10.1, length 28\n13:54:04.392918 ARP, Request who-has 10.0.10.69 tell 10.0.10.1, length 28\n13:54:04.392919 ARP, Request who-has 10.0.10.70 tell 10.0.10.1, length 28\n13:54:04.392919 ARP, Request who-has 10.0.10.73 tell 10.0.10.1, length 28\n13:54:04.392920 ARP, Request who-has 10.0.10.74 tell 10.0.10.1, length 28\n13:54:04.392921 ARP, Request who-has 10.0.10.75 tell 10.0.10.1, length 28\n13:54:04.392921 ARP, Request who-has 10.0.10.76 tell 10.0.10.1, length 28\n13:54:04.392922 ARP, Request who-has 10.0.10.79 tell 10.0.10.1, length 28\n13:54:04.392922 ARP, Request who-has 10.0.10.80 tell 10.0.10.1, length 28\n13:54:04.392923 ARP, Request who-has 10.0.10.83 tell 10.0.10.1, length 28\n13:54:04.392924 ARP, Request who-has 10.0.10.84 tell 10.0.10.1, length 28\n13:54:04.488924 ARP, Request who-has 10.0.10.131 tell 10.0.10.1, length 28\n13:54:04.488925 ARP, Request who-has 10.0.10.134 tell 10.0.10.1, length 28\n13:54:04.488926 ARP, Request who-has 10.0.10.137 tell 10.0.10.1, length 28\n13:54:04.488927 ARP, Request who-has 10.0.10.138 tell 10.0.10.1, length 28\n13:54:04.488927 ARP, Request who-has 10.0.10.141 tell 10.0.10.1, length 28\n13:54:04.488928 ARP, Request who-has 10.0.10.142 tell 10.0.10.1, length 28\n13:54:04.488929 ARP, Request who-has 10.0.10.145 tell 10.0.10.1, length 28\n13:54:04.488929 ARP, Request who-has 10.0.10.146 tell 10.0.10.1, length 28\n13:54:04.488930 ARP, Request who-has 10.0.10.149 tell 10.0.10.1, length 28\n13:54:04.488930 ARP, Request who-has 10.0.10.150 tell 10.0.10.1, length 28\n13:54:04.488931 ARP, Request who-has 10.0.10.151 tell 10.0.10.1, length 28\n13:54:04.488932 ARP, Request who-has 10.0.10.154 tell 10.0.10.1, length 28\n13:54:04.557150 ARP, Request who-has 10.0.10.188 tell 10.0.10.1, length 28\n13:54:04.557152 ARP, Request who-has 10.0.10.187 tell 10.0.10.1, length 28\n13:54:04.557153 ARP, Request who-has 10.0.10.186 tell 10.0.10.1, length 28\n13:54:04.557154 ARP, Request who-has 10.0.10.185 tell 10.0.10.1, length 28\n13:54:04.557154 ARP, Request who-has 10.0.10.184 tell 10.0.10.1, length 28\n13:54:04.557155 ARP, Request who-has 10.0.10.183 tell 10.0.10.1, length 28\n13:54:04.557156 ARP, Request who-has 10.0.10.182 tell 10.0.10.1, length 28\n13:54:04.557156 ARP, Request who-has 10.0.10.181 tell 10.0.10.1, length 28\n13:54:04.557157 ARP, Request who-has 10.0.10.180 tell 10.0.10.1, length 28\n13:54:04.557158 ARP, Request who-has 10.0.10.179 tell 10.0.10.1, length 28\n13:54:04.557158 ARP, Request who-has 10.0.10.178 tell 10.0.10.1, length 28\n13:54:04.557159 ARP, Request who-has 10.0.10.177 tell 10.0.10.1, length 28\n13:54:04.557160 ARP, Request who-has 10.0.10.176 tell 10.0.10.1, length 28\n13:54:04.557160 ARP, Request who-has 10.0.10.175 tell 10.0.10.1, length 28\n13:54:04.557161 ARP, Request who-has 10.0.10.174 tell 10.0.10.1, length 28\n13:54:04.557162 ARP, Request who-has 10.0.10.171 tell 10.0.10.1, length 28\n13:54:04.557162 ARP, Request who-has 10.0.10.170 tell 10.0.10.1, length 28\n13:54:04.557163 ARP, Request who-has 10.0.10.164 tell 10.0.10.1, length 28\n13:54:04.557164 ARP, Request who-has 10.0.10.144 tell 10.0.10.1, length 28\n13:54:04.557165 ARP, Request who-has 10.0.10.140 tell 10.0.10.1, length 28\n13:54:04.557165 ARP, Request who-has 10.0.10.136 tell 10.0.10.1, length 28\n13:54:04.557166 ARP, Request who-has 10.0.10.133 tell 10.0.10.1, length 28\n13:54:04.557167 ARP, Request who-has 10.0.10.130 tell 10.0.10.1, length 28\n13:54:04.557167 ARP, Request who-has 10.0.10.129 tell 10.0.10.1, length 28\n13:54:04.557168 ARP, Request who-has 10.0.10.128 tell 10.0.10.1, length 28\n13:54:04.557168 ARP, Request who-has 10.0.10.127 tell 10.0.10.1, length 28\n13:54:04.557169 ARP, Request who-has 10.0.10.126 tell 10.0.10.1, length 28\n13:54:04.557170 ARP, Request who-has 10.0.10.125 tell 10.0.10.1, length 28\n13:54:04.557170 ARP, Request who-has 10.0.10.124 tell 10.0.10.1, length 28\n13:54:04.557171 ARP, Request who-has 10.0.10.123 tell 10.0.10.1, length 28\n13:54:04.557172 ARP, Request who-has 10.0.10.122 tell 10.0.10.1, length 28\n13:54:04.557172 ARP, Request who-has 10.0.10.121 tell 10.0.10.1, length 28\n13:54:04.557173 ARP, Request who-has 10.0.10.120 tell 10.0.10.1, length 28\n13:54:04.557174 ARP, Request who-has 10.0.10.119 tell 10.0.10.1, length 28\n13:54:04.557174 ARP, Request who-has 10.0.10.118 tell 10.0.10.1, length 28\n13:54:04.557175 ARP, Request who-has 10.0.10.117 tell 10.0.10.1, length 28\n13:54:04.557175 ARP, Request who-has 10.0.10.116 tell 10.0.10.1, length 28\n13:54:04.557176 ARP, Request who-has 10.0.10.115 tell 10.0.10.1, length 28\n13:54:04.557177 ARP, Request who-has 10.0.10.114 tell 10.0.10.1, length 28\n13:54:04.557178 ARP, Request who-has 10.0.10.113 tell 10.0.10.1, length 28\n13:54:04.557178 ARP, Request who-has 10.0.10.112 tell 10.0.10.1, length 28\n13:54:04.557179 ARP, Request who-has 10.0.10.111 tell 10.0.10.1, length 28\n13:54:04.557180 ARP, Request who-has 10.0.10.110 tell 10.0.10.1, length 28\n13:54:04.557180 ARP, Request who-has 10.0.10.109 tell 10.0.10.1, length 28\n13:54:04.557181 ARP, Request who-has 10.0.10.108 tell 10.0.10.1, length 28\n13:54:04.557182 ARP, Request who-has 10.0.10.107 tell 10.0.10.1, length 28\n13:54:04.557182 ARP, Request who-has 10.0.10.106 tell 10.0.10.1, length 28\n13:54:04.557183 ARP, Request who-has 10.0.10.105 tell 10.0.10.1, length 28\n13:54:04.557184 ARP, Request who-has 10.0.10.104 tell 10.0.10.1, length 28\n13:54:04.557184 ARP, Request who-has 10.0.10.101 tell 10.0.10.1, length 28\n13:54:04.557185 ARP, Request who-has 10.0.10.100 tell 10.0.10.1, length 28\n13:54:04.557185 ARP, Request who-has 10.0.10.97 tell 10.0.10.1, length 28\n13:54:04.557186 ARP, Request who-has 10.0.10.96 tell 10.0.10.1, length 28\n13:54:04.588884 ARP, Request who-has 10.0.10.193 tell 10.0.10.1, length 28\n13:54:04.588885 ARP, Request who-has 10.0.10.196 tell 10.0.10.1, length 28\n13:54:04.588886 ARP, Request who-has 10.0.10.199 tell 10.0.10.1, length 28\n13:54:04.588887 ARP, Request who-has 10.0.10.202 tell 10.0.10.1, length 28\n13:54:04.588887 ARP, Request who-has 10.0.10.205 tell 10.0.10.1, length 28\n13:54:04.588888 ARP, Request who-has 10.0.10.206 tell 10.0.10.1, length 28\n13:54:04.588889 ARP, Request who-has 10.0.10.209 tell 10.0.10.1, length 28\n13:54:04.588889 ARP, Request who-has 10.0.10.210 tell 10.0.10.1, length 28\n13:54:04.588890 ARP, Request who-has 10.0.10.213 tell 10.0.10.1, length 28\n13:54:04.588890 ARP, Request who-has 10.0.10.214 tell 10.0.10.1, length 28\n13:54:04.588891 ARP, Request who-has 10.0.10.217 tell 10.0.10.1, length 28\n13:54:04.588892 ARP, Request who-has 10.0.10.218 tell 10.0.10.1, length 28\n13:54:04.649103 ARP, Request who-has 10.0.10.62 tell 10.0.10.1, length 28\n13:54:04.649105 ARP, Request who-has 10.0.10.61 tell 10.0.10.1, length 28\n13:54:04.649105 ARP, Request who-has 10.0.10.59 tell 10.0.10.1, length 28\n13:54:04.649106 ARP, Request who-has 10.0.10.58 tell 10.0.10.1, length 28\n13:54:04.649107 ARP, Request who-has 10.0.10.57 tell 10.0.10.1, length 28\n13:54:04.649107 ARP, Request who-has 10.0.10.56 tell 10.0.10.1, length 28\n13:54:04.649108 ARP, Request who-has 10.0.10.55 tell 10.0.10.1, length 28\n13:54:04.649109 ARP, Request who-has 10.0.10.54 tell 10.0.10.1, length 28\n13:54:04.649109 ARP, Request who-has 10.0.10.53 tell 10.0.10.1, length 28\n13:54:04.649110 ARP, Request who-has 10.0.10.52 tell 10.0.10.1, length 28\n13:54:04.649111 ARP, Request who-has 10.0.10.51 tell 10.0.10.1, length 28\n13:54:04.649111 ARP, Request who-has 10.0.10.50 tell 10.0.10.1, length 28\n13:54:04.649112 ARP, Request who-has 10.0.10.49 tell 10.0.10.1, length 28\n13:54:04.649113 ARP, Request who-has 10.0.10.48 tell 10.0.10.1, length 28\n13:54:04.649113 ARP, Request who-has 10.0.10.47 tell 10.0.10.1, length 28\n13:54:04.649114 ARP, Request who-has 10.0.10.46 tell 10.0.10.1, length 28\n13:54:04.649114 ARP, Request who-has 10.0.10.45 tell 10.0.10.1, length 28\n13:54:04.649115 ARP, Request who-has 10.0.10.42 tell 10.0.10.1, length 28\n13:54:04.649116 ARP, Request who-has 10.0.10.41 tell 10.0.10.1, length 28\n13:54:04.649117 ARP, Request who-has 10.0.10.40 tell 10.0.10.1, length 28\n13:54:04.649117 ARP, Request who-has 10.0.10.39 tell 10.0.10.1, length 28\n13:54:04.649118 ARP, Request who-has 10.0.10.38 tell 10.0.10.1, length 28\n13:54:04.649119 ARP, Request who-has 10.0.10.37 tell 10.0.10.1, length 28\n13:54:04.649119 ARP, Request who-has 10.0.10.36 tell 10.0.10.1, length 28\n13:54:04.649120 ARP, Request who-has 10.0.10.32 tell 10.0.10.1, length 28\n13:54:04.649121 ARP, Request who-has 10.0.10.29 tell 10.0.10.1, length 28\n13:54:04.649121 ARP, Request who-has 10.0.10.28 tell 10.0.10.1, length 28\n13:54:04.649122 ARP, Request who-has 10.0.10.25 tell 10.0.10.1, length 28\n13:54:04.649123 ARP, Request who-has 10.0.10.24 tell 10.0.10.1, length 28\n13:54:04.649123 ARP, Request who-has 10.0.10.22 tell 10.0.10.1, length 28\n13:54:04.649124 ARP, Request who-has 10.0.10.21 tell 10.0.10.1, length 28\n13:54:04.649125 ARP, Request who-has 10.0.10.19 tell 10.0.10.1, length 28\n13:54:04.649125 ARP, Request who-has 10.0.10.18 tell 10.0.10.1, length 28\n13:54:04.649126 ARP, Request who-has 10.0.10.12 tell 10.0.10.1, length 28\n13:54:04.649127 ARP, Request who-has 10.0.10.254 tell 10.0.10.1, length 28\n13:54:04.649127 ARP, Request who-has 10.0.10.252 tell 10.0.10.1, length 28\n13:54:04.649128 ARP, Request who-has 10.0.10.251 tell 10.0.10.1, length 28\n13:54:04.649129 ARP, Request who-has 10.0.10.250 tell 10.0.10.1, length 28\n13:54:04.649129 ARP, Request who-has 10.0.10.249 tell 10.0.10.1, length 28\n13:54:04.649130 ARP, Request who-has 10.0.10.246 tell 10.0.10.1, length 28\n13:54:04.649131 ARP, Request who-has 10.0.10.245 tell 10.0.10.1, length 28\n13:54:04.649131 ARP, Request who-has 10.0.10.244 tell 10.0.10.1, length 28\n13:54:04.680926 ARP, Request who-has 10.0.10.253 tell 10.0.10.1, length 28\n13:54:04.680928 ARP, Request who-has 10.0.10.0 tell 10.0.10.1, length 28\n13:54:04.680928 ARP, Request who-has 10.0.10.11 tell 10.0.10.1, length 28\n13:54:04.680929 ARP, Request who-has 10.0.10.17 tell 10.0.10.1, length 28\n13:54:04.680930 ARP, Request who-has 10.0.10.20 tell 10.0.10.1, length 28\n13:54:04.680930 ARP, Request who-has 10.0.10.23 tell 10.0.10.1, length 28\n13:54:04.680931 ARP, Request who-has 10.0.10.26 tell 10.0.10.1, length 28\n13:54:04.680932 ARP, Request who-has 10.0.10.27 tell 10.0.10.1, length 28\n13:54:04.680932 ARP, Request who-has 10.0.10.30 tell 10.0.10.1, length 28\n13:54:04.680933 ARP, Request who-has 10.0.10.31 tell 10.0.10.1, length 28\n13:54:04.680934 ARP, Request who-has 10.0.10.34 tell 10.0.10.1, length 28\n13:54:04.680934 ARP, Request who-has 10.0.10.35 tell 10.0.10.1, length 28\n13:54:04.744975 ARP, Request who-has 10.0.10.67 tell 10.0.10.1, length 28\n13:54:04.744977 ARP, Request who-has 10.0.10.44 tell 10.0.10.1, length 28\n13:54:04.744978 ARP, Request who-has 10.0.10.43 tell 10.0.10.1, length 28\n13:54:04.744978 ARP, Request who-has 10.0.10.33 tell 10.0.10.1, length 28\n13:54:04.744979 ARP, Request who-has 10.0.10.247 tell 10.0.10.1, length 28\n13:54:04.744980 ARP, Request who-has 10.0.10.231 tell 10.0.10.1, length 28\n13:54:04.744981 ARP, Request who-has 10.0.10.230 tell 10.0.10.1, length 28\n13:54:04.744981 ARP, Request who-has 10.0.10.227 tell 10.0.10.1, length 28\n13:54:04.744982 ARP, Request who-has 10.0.10.226 tell 10.0.10.1, length 28\n13:54:04.744982 ARP, Request who-has 10.0.10.224 tell 10.0.10.1, length 28\n13:54:04.744983 ARP, Request who-has 10.0.10.223 tell 10.0.10.1, length 28\n13:54:04.744984 ARP, Request who-has 10.0.10.221 tell 10.0.10.1, length 28\n13:54:04.744984 ARP, Request who-has 10.0.10.220 tell 10.0.10.1, length 28\n13:54:04.744985 ARP, Request who-has 10.0.10.216 tell 10.0.10.1, length 28\n13:54:04.744986 ARP, Request who-has 10.0.10.212 tell 10.0.10.1, length 28\n13:54:04.744986 ARP, Request who-has 10.0.10.208 tell 10.0.10.1, length 28\n13:54:04.744987 ARP, Request who-has 10.0.10.204 tell 10.0.10.1, length 28\n13:54:04.744988 ARP, Request who-has 10.0.10.198 tell 10.0.10.1, length 28\n13:54:04.744988 ARP, Request who-has 10.0.10.195 tell 10.0.10.1, length 28\n13:54:04.744989 ARP, Request who-has 10.0.10.190 tell 10.0.10.1, length 28\n13:54:04.744989 ARP, Request who-has 10.0.10.189 tell 10.0.10.1, length 28\n13:54:04.776896 ARP, Request who-has 10.0.10.71 tell 10.0.10.1, length 28\n13:54:04.776898 ARP, Request who-has 10.0.10.77 tell 10.0.10.1, length 28\n13:54:04.776898 ARP, Request who-has 10.0.10.81 tell 10.0.10.1, length 28\n13:54:04.776899 ARP, Request who-has 10.0.10.85 tell 10.0.10.1, length 28\n13:54:04.776900 ARP, Request who-has 10.0.10.88 tell 10.0.10.1, length 28\n13:54:04.776900 ARP, Request who-has 10.0.10.91 tell 10.0.10.1, length 28\n13:54:04.776901 ARP, Request who-has 10.0.10.94 tell 10.0.10.1, length 28\n13:54:04.776902 ARP, Request who-has 10.0.10.95 tell 10.0.10.1, length 28\n13:54:04.776902 ARP, Request who-has 10.0.10.98 tell 10.0.10.1, length 28\n13:54:04.776903 ARP, Request who-has 10.0.10.99 tell 10.0.10.1, length 28\n13:54:04.776903 ARP, Request who-has 10.0.10.102 tell 10.0.10.1, length 28\n13:54:04.776904 ARP, Request who-has 10.0.10.103 tell 10.0.10.1, length 28\n13:54:04.872958 ARP, Request who-has 10.0.10.132 tell 10.0.10.1, length 28\n13:54:04.872959 ARP, Request who-has 10.0.10.135 tell 10.0.10.1, length 28\n13:54:04.872960 ARP, Request who-has 10.0.10.139 tell 10.0.10.1, length 28\n13:54:04.872961 ARP, Request who-has 10.0.10.143 tell 10.0.10.1, length 28\n13:54:04.872961 ARP, Request who-has 10.0.10.147 tell 10.0.10.1, length 28\n13:54:04.872962 ARP, Request who-has 10.0.10.152 tell 10.0.10.1, length 28\n13:54:04.872963 ARP, Request who-has 10.0.10.155 tell 10.0.10.1, length 28\n13:54:04.872963 ARP, Request who-has 10.0.10.158 tell 10.0.10.1, length 28\n13:54:04.872964 ARP, Request who-has 10.0.10.159 tell 10.0.10.1, length 28\n13:54:04.872965 ARP, Request who-has 10.0.10.162 tell 10.0.10.1, length 28\n13:54:04.872965 ARP, Request who-has 10.0.10.165 tell 10.0.10.1, length 28\n13:54:04.872966 ARP, Request who-has 10.0.10.166 tell 10.0.10.1, length 28\n13:54:04.872967 ARP, Request who-has 10.0.10.90 tell 10.0.10.1, length 28\n13:54:04.872967 ARP, Request who-has 10.0.10.203 tell 10.0.10.1, length 28\n13:54:04.872968 ARP, Request who-has 10.0.10.201 tell 10.0.10.1, length 28\n13:54:04.872969 ARP, Request who-has 10.0.10.192 tell 10.0.10.1, length 28\n13:54:04.940875 IP 10.0.10.1.57006 &gt; 10.0.10.2.http: Flags [S], seq 2246678905, win 64240, options [mss 1460,sackOK,TS val 3851874680 ecr 0,nop,wscale 7], length 0\n13:54:04.940882 IP 10.0.10.2.http &gt; 10.0.10.1.57006: Flags [R.], seq 0, ack 2246678906, win 0, length 0\n13:54:04.968925 ARP, Request who-has 10.0.10.191 tell 10.0.10.1, length 28\n13:54:04.968927 ARP, Request who-has 10.0.10.194 tell 10.0.10.1, length 28\n13:54:04.968927 ARP, Request who-has 10.0.10.197 tell 10.0.10.1, length 28\n13:54:04.968928 ARP, Request who-has 10.0.10.200 tell 10.0.10.1, length 28\n13:54:04.968929 ARP, Request who-has 10.0.10.207 tell 10.0.10.1, length 28\n13:54:04.968929 ARP, Request who-has 10.0.10.211 tell 10.0.10.1, length 28\n13:54:04.968930 ARP, Request who-has 10.0.10.215 tell 10.0.10.1, length 28\n13:54:04.968930 ARP, Request who-has 10.0.10.219 tell 10.0.10.1, length 28\n13:54:04.968931 ARP, Request who-has 10.0.10.222 tell 10.0.10.1, length 28\n13:54:04.968932 ARP, Request who-has 10.0.10.225 tell 10.0.10.1, length 28\n13:54:04.968932 ARP, Request who-has 10.0.10.228 tell 10.0.10.1, length 28\n13:54:04.968933 ARP, Request who-has 10.0.10.229 tell 10.0.10.1, length 28\n13:54:04.968934 ARP, Request who-has 10.0.10.248 tell 10.0.10.1, length 28\n13:54:05.064931 ARP, Request who-has 10.0.10.232 tell 10.0.10.1, length 28\n13:54:05.064933 ARP, Request who-has 10.0.10.233 tell 10.0.10.1, length 28\n13:54:05.064934 ARP, Request who-has 10.0.10.234 tell 10.0.10.1, length 28\n13:54:05.064934 ARP, Request who-has 10.0.10.235 tell 10.0.10.1, length 28\n13:54:05.064935 ARP, Request who-has 10.0.10.236 tell 10.0.10.1, length 28\n13:54:05.064936 ARP, Request who-has 10.0.10.237 tell 10.0.10.1, length 28\n13:54:05.064936 ARP, Request who-has 10.0.10.238 tell 10.0.10.1, length 28\n13:54:05.064937 ARP, Request who-has 10.0.10.239 tell 10.0.10.1, length 28\n13:54:05.064938 ARP, Request who-has 10.0.10.240 tell 10.0.10.1, length 28\n13:54:05.064938 ARP, Request who-has 10.0.10.241 tell 10.0.10.1, length 28\n13:54:05.064939 ARP, Request who-has 10.0.10.242 tell 10.0.10.1, length 28\n13:54:05.064939 ARP, Request who-has 10.0.10.243 tell 10.0.10.1, length 28\n13:54:05.192927 ARP, Request who-has 10.0.10.60 tell 10.0.10.1, length 28\n13:54:05.192929 ARP, Request who-has 10.0.10.63 tell 10.0.10.1, length 28\n13:54:05.192929 ARP, Request who-has 10.0.10.64 tell 10.0.10.1, length 28\n13:54:05.192930 ARP, Request who-has 10.0.10.66 tell 10.0.10.1, length 28\n13:54:05.192931 ARP, Request who-has 10.0.10.72 tell 10.0.10.1, length 28\n13:54:05.192932 ARP, Request who-has 10.0.10.78 tell 10.0.10.1, length 28\n13:54:05.192932 ARP, Request who-has 10.0.10.82 tell 10.0.10.1, length 28\n13:54:05.192933 ARP, Request who-has 10.0.10.86 tell 10.0.10.1, length 28\n13:54:05.192933 ARP, Request who-has 10.0.10.87 tell 10.0.10.1, length 28\n13:54:05.192934 ARP, Request who-has 10.0.10.89 tell 10.0.10.1, length 28\n13:54:05.192935 ARP, Request who-has 10.0.10.92 tell 10.0.10.1, length 28\n13:54:05.192935 ARP, Request who-has 10.0.10.93 tell 10.0.10.1, length 28\n13:54:05.289141 ARP, Request who-has 10.0.10.148 tell 10.0.10.1, length 28\n13:54:05.289143 ARP, Request who-has 10.0.10.153 tell 10.0.10.1, length 28\n13:54:05.289143 ARP, Request who-has 10.0.10.156 tell 10.0.10.1, length 28\n13:54:05.289144 ARP, Request who-has 10.0.10.157 tell 10.0.10.1, length 28\n13:54:05.289145 ARP, Request who-has 10.0.10.160 tell 10.0.10.1, length 28\n13:54:05.289145 ARP, Request who-has 10.0.10.161 tell 10.0.10.1, length 28\n13:54:05.289146 ARP, Request who-has 10.0.10.163 tell 10.0.10.1, length 28\n13:54:05.289147 ARP, Request who-has 10.0.10.167 tell 10.0.10.1, length 28\n13:54:05.289147 ARP, Request who-has 10.0.10.168 tell 10.0.10.1, length 28\n13:54:05.289148 ARP, Request who-has 10.0.10.169 tell 10.0.10.1, length 28\n13:54:05.289149 ARP, Request who-has 10.0.10.172 tell 10.0.10.1, length 28\n13:54:05.289149 ARP, Request who-has 10.0.10.173 tell 10.0.10.1, length 28\n13:54:05.577198 ARP, Request who-has 10.0.10.96 tell 10.0.10.1, length 28\n13:54:05.577202 ARP, Request who-has 10.0.10.97 tell 10.0.10.1, length 28\n13:54:05.577203 ARP, Request who-has 10.0.10.100 tell 10.0.10.1, length 28\n13:54:05.577203 ARP, Request who-has 10.0.10.101 tell 10.0.10.1, length 28\n13:54:05.577204 ARP, Request who-has 10.0.10.104 tell 10.0.10.1, length 28\n13:54:05.577205 ARP, Request who-has 10.0.10.105 tell 10.0.10.1, length 28\n13:54:05.577205 ARP, Request who-has 10.0.10.106 tell 10.0.10.1, length 28\n13:54:05.577206 ARP, Request who-has 10.0.10.107 tell 10.0.10.1, length 28\n13:54:05.577207 ARP, Request who-has 10.0.10.108 tell 10.0.10.1, length 28\n13:54:05.577207 ARP, Request who-has 10.0.10.109 tell 10.0.10.1, length 28\n13:54:05.577208 ARP, Request who-has 10.0.10.110 tell 10.0.10.1, length 28\n13:54:05.577209 ARP, Request who-has 10.0.10.111 tell 10.0.10.1, length 28\n13:54:05.577209 ARP, Request who-has 10.0.10.112 tell 10.0.10.1, length 28\n13:54:05.577210 ARP, Request who-has 10.0.10.113 tell 10.0.10.1, length 28\n13:54:05.577210 ARP, Request who-has 10.0.10.114 tell 10.0.10.1, length 28\n13:54:05.577211 ARP, Request who-has 10.0.10.115 tell 10.0.10.1, length 28\n13:54:05.577212 ARP, Request who-has 10.0.10.116 tell 10.0.10.1, length 28\n13:54:05.577212 ARP, Request who-has 10.0.10.117 tell 10.0.10.1, length 28\n13:54:05.577213 ARP, Request who-has 10.0.10.118 tell 10.0.10.1, length 28\n13:54:05.577214 ARP, Request who-has 10.0.10.119 tell 10.0.10.1, length 28\n13:54:05.577215 ARP, Request who-has 10.0.10.120 tell 10.0.10.1, length 28\n13:54:05.577216 ARP, Request who-has 10.0.10.121 tell 10.0.10.1, length 28\n13:54:05.577216 ARP, Request who-has 10.0.10.122 tell 10.0.10.1, length 28\n13:54:05.577217 ARP, Request who-has 10.0.10.123 tell 10.0.10.1, length 28\n13:54:05.577218 ARP, Request who-has 10.0.10.124 tell 10.0.10.1, length 28\n13:54:05.577218 ARP, Request who-has 10.0.10.125 tell 10.0.10.1, length 28\n13:54:05.577219 ARP, Request who-has 10.0.10.126 tell 10.0.10.1, length 28\n13:54:05.577220 ARP, Request who-has 10.0.10.127 tell 10.0.10.1, length 28\n13:54:05.577220 ARP, Request who-has 10.0.10.128 tell 10.0.10.1, length 28\n13:54:05.577221 ARP, Request who-has 10.0.10.129 tell 10.0.10.1, length 28\n13:54:05.577222 ARP, Request who-has 10.0.10.130 tell 10.0.10.1, length 28\n13:54:05.577222 ARP, Request who-has 10.0.10.133 tell 10.0.10.1, length 28\n13:54:05.577223 ARP, Request who-has 10.0.10.136 tell 10.0.10.1, length 28\n13:54:05.577224 ARP, Request who-has 10.0.10.140 tell 10.0.10.1, length 28\n13:54:05.577224 ARP, Request who-has 10.0.10.144 tell 10.0.10.1, length 28\n13:54:05.577225 ARP, Request who-has 10.0.10.164 tell 10.0.10.1, length 28\n13:54:05.577226 ARP, Request who-has 10.0.10.170 tell 10.0.10.1, length 28\n13:54:05.577226 ARP, Request who-has 10.0.10.171 tell 10.0.10.1, length 28\n13:54:05.577227 ARP, Request who-has 10.0.10.174 tell 10.0.10.1, length 28\n13:54:05.577228 ARP, Request who-has 10.0.10.175 tell 10.0.10.1, length 28\n13:54:05.577229 ARP, Request who-has 10.0.10.176 tell 10.0.10.1, length 28\n13:54:05.577229 ARP, Request who-has 10.0.10.177 tell 10.0.10.1, length 28\n13:54:05.577230 ARP, Request who-has 10.0.10.178 tell 10.0.10.1, length 28\n13:54:05.577231 ARP, Request who-has 10.0.10.179 tell 10.0.10.1, length 28\n13:54:05.577231 ARP, Request who-has 10.0.10.180 tell 10.0.10.1, length 28\n13:54:05.577232 ARP, Request who-has 10.0.10.181 tell 10.0.10.1, length 28\n13:54:05.577233 ARP, Request who-has 10.0.10.182 tell 10.0.10.1, length 28\n13:54:05.577233 ARP, Request who-has 10.0.10.183 tell 10.0.10.1, length 28\n13:54:05.577234 ARP, Request who-has 10.0.10.184 tell 10.0.10.1, length 28\n13:54:05.577234 ARP, Request who-has 10.0.10.185 tell 10.0.10.1, length 28\n13:54:05.577235 ARP, Request who-has 10.0.10.186 tell 10.0.10.1, length 28\n13:54:05.577236 ARP, Request who-has 10.0.10.187 tell 10.0.10.1, length 28\n13:54:05.577236 ARP, Request who-has 10.0.10.188 tell 10.0.10.1, length 28\n13:54:05.673096 ARP, Request who-has 10.0.10.244 tell 10.0.10.1, length 28\n13:54:05.673099 ARP, Request who-has 10.0.10.245 tell 10.0.10.1, length 28\n13:54:05.673100 ARP, Request who-has 10.0.10.246 tell 10.0.10.1, length 28\n13:54:05.673101 ARP, Request who-has 10.0.10.249 tell 10.0.10.1, length 28\n13:54:05.673101 ARP, Request who-has 10.0.10.250 tell 10.0.10.1, length 28\n13:54:05.673102 ARP, Request who-has 10.0.10.251 tell 10.0.10.1, length 28\n13:54:05.673103 ARP, Request who-has 10.0.10.252 tell 10.0.10.1, length 28\n13:54:05.673103 ARP, Request who-has 10.0.10.254 tell 10.0.10.1, length 28\n13:54:05.673104 ARP, Request who-has 10.0.10.12 tell 10.0.10.1, length 28\n13:54:05.673105 ARP, Request who-has 10.0.10.18 tell 10.0.10.1, length 28\n13:54:05.673105 ARP, Request who-has 10.0.10.19 tell 10.0.10.1, length 28\n13:54:05.673106 ARP, Request who-has 10.0.10.21 tell 10.0.10.1, length 28\n13:54:05.673107 ARP, Request who-has 10.0.10.22 tell 10.0.10.1, length 28\n13:54:05.673107 ARP, Request who-has 10.0.10.24 tell 10.0.10.1, length 28\n13:54:05.673108 ARP, Request who-has 10.0.10.25 tell 10.0.10.1, length 28\n13:54:05.673108 ARP, Request who-has 10.0.10.28 tell 10.0.10.1, length 28\n13:54:05.673109 ARP, Request who-has 10.0.10.29 tell 10.0.10.1, length 28\n13:54:05.673110 ARP, Request who-has 10.0.10.32 tell 10.0.10.1, length 28\n13:54:05.673110 ARP, Request who-has 10.0.10.36 tell 10.0.10.1, length 28\n13:54:05.673111 ARP, Request who-has 10.0.10.37 tell 10.0.10.1, length 28\n13:54:05.673112 ARP, Request who-has 10.0.10.38 tell 10.0.10.1, length 28\n13:54:05.673113 ARP, Request who-has 10.0.10.39 tell 10.0.10.1, length 28\n13:54:05.673113 ARP, Request who-has 10.0.10.40 tell 10.0.10.1, length 28\n13:54:05.673114 ARP, Request who-has 10.0.10.41 tell 10.0.10.1, length 28\n13:54:05.673115 ARP, Request who-has 10.0.10.42 tell 10.0.10.1, length 28\n13:54:05.673115 ARP, Request who-has 10.0.10.45 tell 10.0.10.1, length 28\n13:54:05.673116 ARP, Request who-has 10.0.10.46 tell 10.0.10.1, length 28\n13:54:05.673116 ARP, Request who-has 10.0.10.47 tell 10.0.10.1, length 28\n13:54:05.673117 ARP, Request who-has 10.0.10.48 tell 10.0.10.1, length 28\n13:54:05.673118 ARP, Request who-has 10.0.10.49 tell 10.0.10.1, length 28\n13:54:05.673118 ARP, Request who-has 10.0.10.50 tell 10.0.10.1, length 28\n13:54:05.673119 ARP, Request who-has 10.0.10.51 tell 10.0.10.1, length 28\n13:54:05.673120 ARP, Request who-has 10.0.10.52 tell 10.0.10.1, length 28\n13:54:05.673120 ARP, Request who-has 10.0.10.53 tell 10.0.10.1, length 28\n13:54:05.673121 ARP, Request who-has 10.0.10.54 tell 10.0.10.1, length 28\n13:54:05.673121 ARP, Request who-has 10.0.10.55 tell 10.0.10.1, length 28\n13:54:05.673122 ARP, Request who-has 10.0.10.56 tell 10.0.10.1, length 28\n13:54:05.673123 ARP, Request who-has 10.0.10.57 tell 10.0.10.1, length 28\n13:54:05.673123 ARP, Request who-has 10.0.10.58 tell 10.0.10.1, length 28\n13:54:05.673124 ARP, Request who-has 10.0.10.59 tell 10.0.10.1, length 28\n13:54:05.673125 ARP, Request who-has 10.0.10.61 tell 10.0.10.1, length 28\n13:54:05.673125 ARP, Request who-has 10.0.10.62 tell 10.0.10.1, length 28\n13:54:05.768982 ARP, Request who-has 10.0.10.189 tell 10.0.10.1, length 28\n13:54:05.768985 ARP, Request who-has 10.0.10.190 tell 10.0.10.1, length 28\n13:54:05.768986 ARP, Request who-has 10.0.10.195 tell 10.0.10.1, length 28\n13:54:05.768986 ARP, Request who-has 10.0.10.198 tell 10.0.10.1, length 28\n13:54:05.768987 ARP, Request who-has 10.0.10.204 tell 10.0.10.1, length 28\n13:54:05.768988 ARP, Request who-has 10.0.10.208 tell 10.0.10.1, length 28\n13:54:05.768988 ARP, Request who-has 10.0.10.212 tell 10.0.10.1, length 28\n13:54:05.768989 ARP, Request who-has 10.0.10.216 tell 10.0.10.1, length 28\n13:54:05.768990 ARP, Request who-has 10.0.10.220 tell 10.0.10.1, length 28\n13:54:05.768990 ARP, Request who-has 10.0.10.221 tell 10.0.10.1, length 28\n13:54:05.768991 ARP, Request who-has 10.0.10.223 tell 10.0.10.1, length 28\n13:54:05.768991 ARP, Request who-has 10.0.10.224 tell 10.0.10.1, length 28\n13:54:05.768992 ARP, Request who-has 10.0.10.226 tell 10.0.10.1, length 28\n13:54:05.768993 ARP, Request who-has 10.0.10.227 tell 10.0.10.1, length 28\n13:54:05.768993 ARP, Request who-has 10.0.10.230 tell 10.0.10.1, length 28\n13:54:05.768994 ARP, Request who-has 10.0.10.231 tell 10.0.10.1, length 28\n13:54:05.768995 ARP, Request who-has 10.0.10.247 tell 10.0.10.1, length 28\n13:54:05.768995 ARP, Request who-has 10.0.10.33 tell 10.0.10.1, length 28\n13:54:05.768996 ARP, Request who-has 10.0.10.43 tell 10.0.10.1, length 28\n13:54:05.768997 ARP, Request who-has 10.0.10.44 tell 10.0.10.1, length 28\n13:54:05.768997 ARP, Request who-has 10.0.10.67 tell 10.0.10.1, length 28\n13:54:05.897167 ARP, Request who-has 10.0.10.192 tell 10.0.10.1, length 28\n13:54:05.897170 ARP, Request who-has 10.0.10.201 tell 10.0.10.1, length 28\n13:54:05.897171 ARP, Request who-has 10.0.10.203 tell 10.0.10.1, length 28\n13:54:05.897171 ARP, Request who-has 10.0.10.90 tell 10.0.10.1, length 28\n13:54:05.993145 ARP, Request who-has 10.0.10.248 tell 10.0.10.1, length 28\n13:54:07.432845 ARP, Request who-has 10.0.10.1 tell 10.0.10.2, length 28\n13:54:07.432890 ARP, Request who-has 10.0.10.2 tell 10.0.10.1, length 28\n13:54:07.432893 ARP, Reply 10.0.10.2 is-at 00:50:56:ad:0e:33 (oui Unknown), length 28\n13:54:07.432898 ARP, Reply 10.0.10.1 is-at 00:50:56:94:55:70 (oui Unknown), length 28\n</code></pre> <p>This generated a lot of broadcast traffic! For practice, see if you can find the ARP request and response packets for <code>host1</code> and <code>host2</code> in the packet capture output. We can tell that they were properly discovered in the output from <code>host1</code>.</p> <p>Now check the output on <code>host4</code>, which should pick up the above packets if it was still on the same broadcasting domain:</p> <pre><code>eron@host4:~$ sudo tcpdump\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n</code></pre> <p>Still nothing? Awesome, there should be no packets yet if everything has been set up right.</p> <p>Now we're going to perform a quick scan of the other subnet and examine the results. Starting on <code>host3</code>, run the following:</p> <pre><code>nmap -sn 10.0.10.0/24\n</code></pre> <p>When <code>nmap</code> is finished, cancel the packet capture on <code>host4</code>, and then check the output on both <code>host3</code> and <code>host4</code>:</p> <pre><code>eron@host3:~$ nmap -sn 10.0.20.0/24\nStarting Nmap 7.80 ( https://nmap.org ) at 2023-06-27 13:54 UTC\nNmap scan report for 10.0.20.3\nHost is up (0.00052s latency).\nNmap scan report for 10.0.20.4\nHost is up (0.00040s latency).\nNmap done: 256 IP addresses (2 hosts up) scanned in 15.91 seconds\n</code></pre> <pre><code>eron@host4:~$ sudo tcpdump\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n13:54:49.924495 ARP, Request who-has 10.0.20.1 tell 10.0.20.3, length 28\n13:54:49.924534 ARP, Request who-has 10.0.20.2 tell 10.0.20.3, length 28\n13:54:49.924579 ARP, Request who-has 10.0.20.4 tell 10.0.20.3, length 28\n13:54:49.924593 ARP, Reply 10.0.20.4 is-at 00:50:56:ad:24:4a (oui Unknown), length 28\n13:54:49.924613 IP 10.0.20.3.57422 &gt; 10.0.20.4.http: Flags [S], seq 2960543896, win 64240, options [mss 1460,sackOK,TS val 230221782 ecr 0,nop,wscale 7], length 0\n13:54:49.924619 IP 10.0.20.4.http &gt; 10.0.20.3.57422: Flags [R.], seq 0, ack 2960543897, win 0, length 0\n13:54:49.924956 ARP, Request who-has 10.0.20.5 tell 10.0.20.3, length 28\n13:54:49.924977 ARP, Request who-has 10.0.20.6 tell 10.0.20.3, length 28\n13:54:49.924995 ARP, Request who-has 10.0.20.7 tell 10.0.20.3, length 28\n13:54:49.925013 ARP, Request who-has 10.0.20.8 tell 10.0.20.3, length 28\n13:54:49.925030 ARP, Request who-has 10.0.20.9 tell 10.0.20.3, length 28\n13:54:49.925047 ARP, Request who-has 10.0.20.10 tell 10.0.20.3, length 28\n13:54:49.925135 ARP, Request who-has 10.0.20.13 tell 10.0.20.3, length 28\n13:54:49.925151 ARP, Request who-has 10.0.20.14 tell 10.0.20.3, length 28\n13:54:49.925182 ARP, Request who-has 10.0.20.15 tell 10.0.20.3, length 28\n13:54:49.925199 ARP, Request who-has 10.0.20.16 tell 10.0.20.3, length 28\n13:54:50.025457 ARP, Request who-has 10.0.20.19 tell 10.0.20.3, length 28\n13:54:50.025481 ARP, Request who-has 10.0.20.20 tell 10.0.20.3, length 28\n13:54:50.025504 ARP, Request who-has 10.0.20.21 tell 10.0.20.3, length 28\n13:54:50.025522 ARP, Request who-has 10.0.20.22 tell 10.0.20.3, length 28\n13:54:50.025540 ARP, Request who-has 10.0.20.23 tell 10.0.20.3, length 28\n13:54:50.025557 ARP, Request who-has 10.0.20.24 tell 10.0.20.3, length 28\n13:54:50.025576 ARP, Request who-has 10.0.20.25 tell 10.0.20.3, length 28\n13:54:50.025594 ARP, Request who-has 10.0.20.26 tell 10.0.20.3, length 28\n13:54:50.025611 ARP, Request who-has 10.0.20.27 tell 10.0.20.3, length 28\n13:54:50.025629 ARP, Request who-has 10.0.20.28 tell 10.0.20.3, length 28\n13:54:50.025646 ARP, Request who-has 10.0.20.29 tell 10.0.20.3, length 28\n13:54:50.025664 ARP, Request who-has 10.0.20.30 tell 10.0.20.3, length 28\n13:54:50.125512 ARP, Request who-has 10.0.20.93 tell 10.0.20.3, length 28\n13:54:50.125582 ARP, Request who-has 10.0.20.96 tell 10.0.20.3, length 28\n13:54:50.125602 ARP, Request who-has 10.0.20.97 tell 10.0.20.3, length 28\n13:54:50.125619 ARP, Request who-has 10.0.20.98 tell 10.0.20.3, length 28\n13:54:50.125690 ARP, Request who-has 10.0.20.101 tell 10.0.20.3, length 28\n13:54:50.125708 ARP, Request who-has 10.0.20.102 tell 10.0.20.3, length 28\n13:54:50.125725 ARP, Request who-has 10.0.20.103 tell 10.0.20.3, length 28\n13:54:50.125743 ARP, Request who-has 10.0.20.104 tell 10.0.20.3, length 28\n13:54:50.125760 ARP, Request who-has 10.0.20.105 tell 10.0.20.3, length 28\n13:54:50.125778 ARP, Request who-has 10.0.20.106 tell 10.0.20.3, length 28\n13:54:50.125839 ARP, Request who-has 10.0.20.109 tell 10.0.20.3, length 28\n13:54:50.125858 ARP, Request who-has 10.0.20.110 tell 10.0.20.3, length 28\n13:54:50.225570 ARP, Request who-has 10.0.20.163 tell 10.0.20.3, length 28\n13:54:50.225637 ARP, Request who-has 10.0.20.166 tell 10.0.20.3, length 28\n13:54:50.225701 ARP, Request who-has 10.0.20.169 tell 10.0.20.3, length 28\n13:54:50.225719 ARP, Request who-has 10.0.20.170 tell 10.0.20.3, length 28\n13:54:50.225783 ARP, Request who-has 10.0.20.173 tell 10.0.20.3, length 28\n13:54:50.225801 ARP, Request who-has 10.0.20.174 tell 10.0.20.3, length 28\n13:54:50.225818 ARP, Request who-has 10.0.20.175 tell 10.0.20.3, length 28\n13:54:50.225900 ARP, Request who-has 10.0.20.178 tell 10.0.20.3, length 28\n13:54:50.225918 ARP, Request who-has 10.0.20.179 tell 10.0.20.3, length 28\n13:54:50.225936 ARP, Request who-has 10.0.20.180 tell 10.0.20.3, length 28\n13:54:50.225952 ARP, Request who-has 10.0.20.181 tell 10.0.20.3, length 28\n13:54:50.226013 ARP, Request who-has 10.0.20.184 tell 10.0.20.3, length 28\n13:54:50.325608 ARP, Request who-has 10.0.20.223 tell 10.0.20.3, length 28\n13:54:50.325675 ARP, Request who-has 10.0.20.226 tell 10.0.20.3, length 28\n13:54:50.325737 ARP, Request who-has 10.0.20.229 tell 10.0.20.3, length 28\n13:54:50.325797 ARP, Request who-has 10.0.20.232 tell 10.0.20.3, length 28\n13:54:50.325861 ARP, Request who-has 10.0.20.235 tell 10.0.20.3, length 28\n13:54:50.325880 ARP, Request who-has 10.0.20.236 tell 10.0.20.3, length 28\n13:54:50.325897 ARP, Request who-has 10.0.20.237 tell 10.0.20.3, length 28\n13:54:50.325960 ARP, Request who-has 10.0.20.240 tell 10.0.20.3, length 28\n13:54:50.325979 ARP, Request who-has 10.0.20.241 tell 10.0.20.3, length 28\n13:54:50.326040 ARP, Request who-has 10.0.20.244 tell 10.0.20.3, length 28\n13:54:50.326059 ARP, Request who-has 10.0.20.245 tell 10.0.20.3, length 28\n13:54:50.326118 ARP, Request who-has 10.0.20.248 tell 10.0.20.3, length 28\n13:54:50.425662 ARP, Request who-has 10.0.20.31 tell 10.0.20.3, length 28\n13:54:50.425729 ARP, Request who-has 10.0.20.34 tell 10.0.20.3, length 28\n13:54:50.425791 ARP, Request who-has 10.0.20.37 tell 10.0.20.3, length 28\n13:54:50.425851 ARP, Request who-has 10.0.20.40 tell 10.0.20.3, length 28\n13:54:50.425911 ARP, Request who-has 10.0.20.43 tell 10.0.20.3, length 28\n13:54:50.425972 ARP, Request who-has 10.0.20.46 tell 10.0.20.3, length 28\n13:54:50.425990 ARP, Request who-has 10.0.20.47 tell 10.0.20.3, length 28\n13:54:50.426052 ARP, Request who-has 10.0.20.50 tell 10.0.20.3, length 28\n13:54:50.426070 ARP, Request who-has 10.0.20.51 tell 10.0.20.3, length 28\n13:54:50.426132 ARP, Request who-has 10.0.20.54 tell 10.0.20.3, length 28\n13:54:50.426151 ARP, Request who-has 10.0.20.55 tell 10.0.20.3, length 28\n13:54:50.426216 ARP, Request who-has 10.0.20.58 tell 10.0.20.3, length 28\n13:54:50.525719 ARP, Request who-has 10.0.20.87 tell 10.0.20.3, length 28\n13:54:50.525786 ARP, Request who-has 10.0.20.90 tell 10.0.20.3, length 28\n13:54:50.525849 ARP, Request who-has 10.0.20.94 tell 10.0.20.3, length 28\n13:54:50.525910 ARP, Request who-has 10.0.20.99 tell 10.0.20.3, length 28\n13:54:50.525970 ARP, Request who-has 10.0.20.107 tell 10.0.20.3, length 28\n13:54:50.526032 ARP, Request who-has 10.0.20.111 tell 10.0.20.3, length 28\n13:54:50.526050 ARP, Request who-has 10.0.20.112 tell 10.0.20.3, length 28\n13:54:50.526111 ARP, Request who-has 10.0.20.115 tell 10.0.20.3, length 28\n13:54:50.526129 ARP, Request who-has 10.0.20.116 tell 10.0.20.3, length 28\n13:54:50.526191 ARP, Request who-has 10.0.20.119 tell 10.0.20.3, length 28\n13:54:50.526209 ARP, Request who-has 10.0.20.120 tell 10.0.20.3, length 28\n13:54:50.526269 ARP, Request who-has 10.0.20.123 tell 10.0.20.3, length 28\n13:54:50.625771 ARP, Request who-has 10.0.20.152 tell 10.0.20.3, length 28\n13:54:50.625838 ARP, Request who-has 10.0.20.155 tell 10.0.20.3, length 28\n13:54:50.625900 ARP, Request who-has 10.0.20.158 tell 10.0.20.3, length 28\n13:54:50.625965 ARP, Request who-has 10.0.20.161 tell 10.0.20.3, length 28\n13:54:50.626026 ARP, Request who-has 10.0.20.164 tell 10.0.20.3, length 28\n13:54:50.626086 ARP, Request who-has 10.0.20.167 tell 10.0.20.3, length 28\n13:54:50.626148 ARP, Request who-has 10.0.20.171 tell 10.0.20.3, length 28\n13:54:50.626166 ARP, Request who-has 10.0.20.172 tell 10.0.20.3, length 28\n13:54:50.626227 ARP, Request who-has 10.0.20.176 tell 10.0.20.3, length 28\n13:54:50.626245 ARP, Request who-has 10.0.20.177 tell 10.0.20.3, length 28\n13:54:50.626306 ARP, Request who-has 10.0.20.182 tell 10.0.20.3, length 28\n13:54:50.626324 ARP, Request who-has 10.0.20.183 tell 10.0.20.3, length 28\n13:54:50.725827 ARP, Request who-has 10.0.20.212 tell 10.0.20.3, length 28\n13:54:50.725894 ARP, Request who-has 10.0.20.215 tell 10.0.20.3, length 28\n13:54:50.725955 ARP, Request who-has 10.0.20.218 tell 10.0.20.3, length 28\n13:54:50.726022 ARP, Request who-has 10.0.20.221 tell 10.0.20.3, length 28\n13:54:50.726083 ARP, Request who-has 10.0.20.224 tell 10.0.20.3, length 28\n13:54:50.726143 ARP, Request who-has 10.0.20.227 tell 10.0.20.3, length 28\n13:54:50.726205 ARP, Request who-has 10.0.20.230 tell 10.0.20.3, length 28\n13:54:50.726226 ARP, Request who-has 10.0.20.231 tell 10.0.20.3, length 28\n13:54:50.726289 ARP, Request who-has 10.0.20.234 tell 10.0.20.3, length 28\n13:54:50.726307 ARP, Request who-has 10.0.20.238 tell 10.0.20.3, length 28\n13:54:50.726369 ARP, Request who-has 10.0.20.242 tell 10.0.20.3, length 28\n13:54:50.726388 ARP, Request who-has 10.0.20.243 tell 10.0.20.3, length 28\n13:54:50.825885 ARP, Request who-has 10.0.20.18 tell 10.0.20.3, length 28\n13:54:50.825956 ARP, Request who-has 10.0.20.32 tell 10.0.20.3, length 28\n13:54:50.826018 ARP, Request who-has 10.0.20.35 tell 10.0.20.3, length 28\n13:54:50.826079 ARP, Request who-has 10.0.20.38 tell 10.0.20.3, length 28\n13:54:50.826141 ARP, Request who-has 10.0.20.41 tell 10.0.20.3, length 28\n13:54:50.826203 ARP, Request who-has 10.0.20.44 tell 10.0.20.3, length 28\n13:54:50.826265 ARP, Request who-has 10.0.20.48 tell 10.0.20.3, length 28\n13:54:50.826283 ARP, Request who-has 10.0.20.49 tell 10.0.20.3, length 28\n13:54:50.826342 ARP, Request who-has 10.0.20.52 tell 10.0.20.3, length 28\n13:54:50.826406 ARP, Request who-has 10.0.20.56 tell 10.0.20.3, length 28\n13:54:50.826469 ARP, Request who-has 10.0.20.59 tell 10.0.20.3, length 28\n13:54:50.826489 ARP, Request who-has 10.0.20.60 tell 10.0.20.3, length 28\n13:54:50.925934 ARP, Request who-has 10.0.20.83 tell 10.0.20.3, length 28\n13:54:50.926002 ARP, Request who-has 10.0.20.86 tell 10.0.20.3, length 28\n13:54:50.926065 ARP, Request who-has 10.0.20.89 tell 10.0.20.3, length 28\n13:54:50.926126 ARP, Request who-has 10.0.20.92 tell 10.0.20.3, length 28\n13:54:50.926189 ARP, Request who-has 10.0.20.95 tell 10.0.20.3, length 28\n13:54:50.926249 ARP, Request who-has 10.0.20.100 tell 10.0.20.3, length 28\n13:54:50.926309 ARP, Request who-has 10.0.20.108 tell 10.0.20.3, length 28\n13:54:50.926370 ARP, Request who-has 10.0.20.113 tell 10.0.20.3, length 28\n13:54:50.926437 ARP, Request who-has 10.0.20.117 tell 10.0.20.3, length 28\n13:54:50.926498 ARP, Request who-has 10.0.20.121 tell 10.0.20.3, length 28\n13:54:50.926561 ARP, Request who-has 10.0.20.124 tell 10.0.20.3, length 28\n13:54:50.926582 ARP, Request who-has 10.0.20.125 tell 10.0.20.3, length 28\n13:54:50.952936 ARP, Request who-has 10.0.20.16 tell 10.0.20.3, length 28\n13:54:50.952937 ARP, Request who-has 10.0.20.15 tell 10.0.20.3, length 28\n13:54:50.952938 ARP, Request who-has 10.0.20.14 tell 10.0.20.3, length 28\n13:54:50.952938 ARP, Request who-has 10.0.20.13 tell 10.0.20.3, length 28\n13:54:50.952939 ARP, Request who-has 10.0.20.10 tell 10.0.20.3, length 28\n13:54:50.952940 ARP, Request who-has 10.0.20.9 tell 10.0.20.3, length 28\n13:54:50.952940 ARP, Request who-has 10.0.20.8 tell 10.0.20.3, length 28\n13:54:50.952941 ARP, Request who-has 10.0.20.7 tell 10.0.20.3, length 28\n13:54:50.952942 ARP, Request who-has 10.0.20.6 tell 10.0.20.3, length 28\n13:54:50.952942 ARP, Request who-has 10.0.20.5 tell 10.0.20.3, length 28\n13:54:50.952943 ARP, Request who-has 10.0.20.2 tell 10.0.20.3, length 28\n13:54:50.952943 ARP, Request who-has 10.0.20.1 tell 10.0.20.3, length 28\n13:54:51.048924 ARP, Request who-has 10.0.20.30 tell 10.0.20.3, length 28\n13:54:51.048926 ARP, Request who-has 10.0.20.29 tell 10.0.20.3, length 28\n13:54:51.048927 ARP, Request who-has 10.0.20.28 tell 10.0.20.3, length 28\n13:54:51.048928 ARP, Request who-has 10.0.20.27 tell 10.0.20.3, length 28\n13:54:51.048928 ARP, Request who-has 10.0.20.26 tell 10.0.20.3, length 28\n13:54:51.048929 ARP, Request who-has 10.0.20.25 tell 10.0.20.3, length 28\n13:54:51.048930 ARP, Request who-has 10.0.20.24 tell 10.0.20.3, length 28\n13:54:51.048930 ARP, Request who-has 10.0.20.23 tell 10.0.20.3, length 28\n13:54:51.048931 ARP, Request who-has 10.0.20.22 tell 10.0.20.3, length 28\n13:54:51.048931 ARP, Request who-has 10.0.20.21 tell 10.0.20.3, length 28\n13:54:51.048932 ARP, Request who-has 10.0.20.20 tell 10.0.20.3, length 28\n13:54:51.048933 ARP, Request who-has 10.0.20.19 tell 10.0.20.3, length 28\n13:54:51.144945 ARP, Request who-has 10.0.20.110 tell 10.0.20.3, length 28\n13:54:51.144949 ARP, Request who-has 10.0.20.109 tell 10.0.20.3, length 28\n13:54:51.144949 ARP, Request who-has 10.0.20.106 tell 10.0.20.3, length 28\n13:54:51.144950 ARP, Request who-has 10.0.20.105 tell 10.0.20.3, length 28\n13:54:51.144950 ARP, Request who-has 10.0.20.104 tell 10.0.20.3, length 28\n13:54:51.144951 ARP, Request who-has 10.0.20.103 tell 10.0.20.3, length 28\n13:54:51.144951 ARP, Request who-has 10.0.20.102 tell 10.0.20.3, length 28\n13:54:51.144952 ARP, Request who-has 10.0.20.101 tell 10.0.20.3, length 28\n13:54:51.144953 ARP, Request who-has 10.0.20.98 tell 10.0.20.3, length 28\n13:54:51.144953 ARP, Request who-has 10.0.20.97 tell 10.0.20.3, length 28\n13:54:51.144954 ARP, Request who-has 10.0.20.96 tell 10.0.20.3, length 28\n13:54:51.144954 ARP, Request who-has 10.0.20.93 tell 10.0.20.3, length 28\n13:54:51.226935 IP 10.0.20.3.57436 &gt; 10.0.20.4.http: Flags [S], seq 2574521844, win 64240, options [mss 1460,sackOK,TS val 230223085 ecr 0,nop,wscale 7], length 0\n13:54:51.226947 IP 10.0.20.4.http &gt; 10.0.20.3.57436: Flags [R.], seq 0, ack 2574521845, win 0, length 0\n13:54:51.227247 ARP, Request who-has 10.0.20.11 tell 10.0.20.3, length 28\n13:54:51.227269 ARP, Request who-has 10.0.20.12 tell 10.0.20.3, length 28\n13:54:51.227322 ARP, Request who-has 10.0.20.17 tell 10.0.20.3, length 28\n13:54:51.227454 ARP, Request who-has 10.0.20.33 tell 10.0.20.3, length 28\n13:54:51.227471 ARP, Request who-has 10.0.20.36 tell 10.0.20.3, length 28\n13:54:51.227488 ARP, Request who-has 10.0.20.39 tell 10.0.20.3, length 28\n13:54:51.227504 ARP, Request who-has 10.0.20.42 tell 10.0.20.3, length 28\n13:54:51.227521 ARP, Request who-has 10.0.20.45 tell 10.0.20.3, length 28\n13:54:51.227542 ARP, Request who-has 10.0.20.53 tell 10.0.20.3, length 28\n13:54:51.227559 ARP, Request who-has 10.0.20.57 tell 10.0.20.3, length 28\n13:54:51.227578 ARP, Request who-has 10.0.20.61 tell 10.0.20.3, length 28\n13:54:51.227594 ARP, Request who-has 10.0.20.62 tell 10.0.20.3, length 28\n13:54:51.227614 ARP, Request who-has 10.0.20.63 tell 10.0.20.3, length 28\n13:54:51.227640 ARP, Request who-has 10.0.20.64 tell 10.0.20.3, length 28\n13:54:51.227667 ARP, Request who-has 10.0.20.65 tell 10.0.20.3, length 28\n13:54:51.227682 ARP, Request who-has 10.0.20.66 tell 10.0.20.3, length 28\n13:54:51.227697 ARP, Request who-has 10.0.20.67 tell 10.0.20.3, length 28\n13:54:51.227817 ARP, Request who-has 10.0.20.70 tell 10.0.20.3, length 28\n13:54:51.227848 ARP, Request who-has 10.0.20.71 tell 10.0.20.3, length 28\n13:54:51.227870 ARP, Request who-has 10.0.20.72 tell 10.0.20.3, length 28\n13:54:51.227888 ARP, Request who-has 10.0.20.73 tell 10.0.20.3, length 28\n13:54:51.227908 ARP, Request who-has 10.0.20.74 tell 10.0.20.3, length 28\n13:54:51.227927 ARP, Request who-has 10.0.20.75 tell 10.0.20.3, length 28\n13:54:51.227945 ARP, Request who-has 10.0.20.76 tell 10.0.20.3, length 28\n13:54:51.227963 ARP, Request who-has 10.0.20.77 tell 10.0.20.3, length 28\n13:54:51.227981 ARP, Request who-has 10.0.20.78 tell 10.0.20.3, length 28\n13:54:51.228003 ARP, Request who-has 10.0.20.79 tell 10.0.20.3, length 28\n13:54:51.228037 ARP, Request who-has 10.0.20.80 tell 10.0.20.3, length 28\n13:54:51.228055 ARP, Request who-has 10.0.20.81 tell 10.0.20.3, length 28\n13:54:51.228081 ARP, Request who-has 10.0.20.82 tell 10.0.20.3, length 28\n13:54:51.228097 ARP, Request who-has 10.0.20.84 tell 10.0.20.3, length 28\n13:54:51.228111 ARP, Request who-has 10.0.20.85 tell 10.0.20.3, length 28\n13:54:51.228126 ARP, Request who-has 10.0.20.88 tell 10.0.20.3, length 28\n13:54:51.228141 ARP, Request who-has 10.0.20.91 tell 10.0.20.3, length 28\n13:54:51.240943 ARP, Request who-has 10.0.20.184 tell 10.0.20.3, length 28\n13:54:51.240946 ARP, Request who-has 10.0.20.181 tell 10.0.20.3, length 28\n13:54:51.240956 ARP, Request who-has 10.0.20.180 tell 10.0.20.3, length 28\n13:54:51.240957 ARP, Request who-has 10.0.20.179 tell 10.0.20.3, length 28\n13:54:51.240957 ARP, Request who-has 10.0.20.178 tell 10.0.20.3, length 28\n13:54:51.240958 ARP, Request who-has 10.0.20.175 tell 10.0.20.3, length 28\n13:54:51.240959 ARP, Request who-has 10.0.20.174 tell 10.0.20.3, length 28\n13:54:51.240959 ARP, Request who-has 10.0.20.173 tell 10.0.20.3, length 28\n13:54:51.240960 ARP, Request who-has 10.0.20.170 tell 10.0.20.3, length 28\n13:54:51.240960 ARP, Request who-has 10.0.20.169 tell 10.0.20.3, length 28\n13:54:51.240961 ARP, Request who-has 10.0.20.166 tell 10.0.20.3, length 28\n13:54:51.240962 ARP, Request who-has 10.0.20.163 tell 10.0.20.3, length 28\n13:54:51.327457 ARP, Request who-has 10.0.20.126 tell 10.0.20.3, length 28\n13:54:51.327490 ARP, Request who-has 10.0.20.127 tell 10.0.20.3, length 28\n13:54:51.327781 ARP, Request who-has 10.0.20.130 tell 10.0.20.3, length 28\n13:54:51.327809 ARP, Request who-has 10.0.20.131 tell 10.0.20.3, length 28\n13:54:51.327827 ARP, Request who-has 10.0.20.132 tell 10.0.20.3, length 28\n13:54:51.327843 ARP, Request who-has 10.0.20.133 tell 10.0.20.3, length 28\n13:54:51.327864 ARP, Request who-has 10.0.20.134 tell 10.0.20.3, length 28\n13:54:51.328013 ARP, Request who-has 10.0.20.137 tell 10.0.20.3, length 28\n13:54:51.328053 ARP, Request who-has 10.0.20.138 tell 10.0.20.3, length 28\n13:54:51.328079 ARP, Request who-has 10.0.20.139 tell 10.0.20.3, length 28\n13:54:51.328095 ARP, Request who-has 10.0.20.140 tell 10.0.20.3, length 28\n13:54:51.328111 ARP, Request who-has 10.0.20.141 tell 10.0.20.3, length 28\n13:54:51.328127 ARP, Request who-has 10.0.20.142 tell 10.0.20.3, length 28\n13:54:51.328143 ARP, Request who-has 10.0.20.143 tell 10.0.20.3, length 28\n13:54:51.328160 ARP, Request who-has 10.0.20.144 tell 10.0.20.3, length 28\n13:54:51.328178 ARP, Request who-has 10.0.20.145 tell 10.0.20.3, length 28\n13:54:51.328194 ARP, Request who-has 10.0.20.146 tell 10.0.20.3, length 28\n13:54:51.328211 ARP, Request who-has 10.0.20.147 tell 10.0.20.3, length 28\n13:54:51.328226 ARP, Request who-has 10.0.20.148 tell 10.0.20.3, length 28\n13:54:51.328242 ARP, Request who-has 10.0.20.149 tell 10.0.20.3, length 28\n13:54:51.328258 ARP, Request who-has 10.0.20.150 tell 10.0.20.3, length 28\n13:54:51.328279 ARP, Request who-has 10.0.20.151 tell 10.0.20.3, length 28\n13:54:51.328490 ARP, Request who-has 10.0.20.154 tell 10.0.20.3, length 28\n13:54:51.328509 ARP, Request who-has 10.0.20.156 tell 10.0.20.3, length 28\n13:54:51.328525 ARP, Request who-has 10.0.20.157 tell 10.0.20.3, length 28\n13:54:51.328541 ARP, Request who-has 10.0.20.159 tell 10.0.20.3, length 28\n13:54:51.328557 ARP, Request who-has 10.0.20.160 tell 10.0.20.3, length 28\n13:54:51.328581 ARP, Request who-has 10.0.20.162 tell 10.0.20.3, length 28\n13:54:51.328606 ARP, Request who-has 10.0.20.165 tell 10.0.20.3, length 28\n13:54:51.328630 ARP, Request who-has 10.0.20.168 tell 10.0.20.3, length 28\n13:54:51.336932 ARP, Request who-has 10.0.20.248 tell 10.0.20.3, length 28\n13:54:51.336934 ARP, Request who-has 10.0.20.245 tell 10.0.20.3, length 28\n13:54:51.336935 ARP, Request who-has 10.0.20.244 tell 10.0.20.3, length 28\n13:54:51.336935 ARP, Request who-has 10.0.20.241 tell 10.0.20.3, length 28\n13:54:51.336936 ARP, Request who-has 10.0.20.240 tell 10.0.20.3, length 28\n13:54:51.336946 ARP, Request who-has 10.0.20.237 tell 10.0.20.3, length 28\n13:54:51.336947 ARP, Request who-has 10.0.20.236 tell 10.0.20.3, length 28\n13:54:51.336948 ARP, Request who-has 10.0.20.235 tell 10.0.20.3, length 28\n13:54:51.336948 ARP, Request who-has 10.0.20.232 tell 10.0.20.3, length 28\n13:54:51.336949 ARP, Request who-has 10.0.20.229 tell 10.0.20.3, length 28\n13:54:51.336949 ARP, Request who-has 10.0.20.226 tell 10.0.20.3, length 28\n13:54:51.336950 ARP, Request who-has 10.0.20.223 tell 10.0.20.3, length 28\n13:54:51.427504 ARP, Request who-has 10.0.20.199 tell 10.0.20.3, length 28\n13:54:51.427547 ARP, Request who-has 10.0.20.200 tell 10.0.20.3, length 28\n13:54:51.427661 ARP, Request who-has 10.0.20.203 tell 10.0.20.3, length 28\n13:54:51.427699 ARP, Request who-has 10.0.20.204 tell 10.0.20.3, length 28\n13:54:51.427734 ARP, Request who-has 10.0.20.205 tell 10.0.20.3, length 28\n13:54:51.427763 ARP, Request who-has 10.0.20.206 tell 10.0.20.3, length 28\n13:54:51.427793 ARP, Request who-has 10.0.20.207 tell 10.0.20.3, length 28\n13:54:51.427945 ARP, Request who-has 10.0.20.210 tell 10.0.20.3, length 28\n13:54:51.427981 ARP, Request who-has 10.0.20.211 tell 10.0.20.3, length 28\n13:54:51.428003 ARP, Request who-has 10.0.20.213 tell 10.0.20.3, length 28\n13:54:51.428019 ARP, Request who-has 10.0.20.214 tell 10.0.20.3, length 28\n13:54:51.428036 ARP, Request who-has 10.0.20.216 tell 10.0.20.3, length 28\n13:54:51.428071 ARP, Request who-has 10.0.20.217 tell 10.0.20.3, length 28\n13:54:51.428088 ARP, Request who-has 10.0.20.219 tell 10.0.20.3, length 28\n13:54:51.428105 ARP, Request who-has 10.0.20.220 tell 10.0.20.3, length 28\n13:54:51.428124 ARP, Request who-has 10.0.20.222 tell 10.0.20.3, length 28\n13:54:51.428149 ARP, Request who-has 10.0.20.225 tell 10.0.20.3, length 28\n13:54:51.428174 ARP, Request who-has 10.0.20.228 tell 10.0.20.3, length 28\n13:54:51.428205 ARP, Request who-has 10.0.20.233 tell 10.0.20.3, length 28\n13:54:51.428384 ARP, Request who-has 10.0.20.246 tell 10.0.20.3, length 28\n13:54:51.428401 ARP, Request who-has 10.0.20.247 tell 10.0.20.3, length 28\n13:54:51.428425 ARP, Request who-has 10.0.20.249 tell 10.0.20.3, length 28\n13:54:51.428443 ARP, Request who-has 10.0.20.250 tell 10.0.20.3, length 28\n13:54:51.428460 ARP, Request who-has 10.0.20.251 tell 10.0.20.3, length 28\n13:54:51.428476 ARP, Request who-has 10.0.20.252 tell 10.0.20.3, length 28\n13:54:51.428496 ARP, Request who-has 10.0.20.253 tell 10.0.20.3, length 28\n13:54:51.428513 ARP, Request who-has 10.0.20.254 tell 10.0.20.3, length 28\n13:54:51.428542 ARP, Request who-has 10.0.20.0 tell 10.0.20.3, length 28\n13:54:51.428687 ARP, Request who-has 10.0.20.68 tell 10.0.20.3, length 28\n13:54:51.428706 ARP, Request who-has 10.0.20.69 tell 10.0.20.3, length 28\n13:54:51.428757 ARP, Request who-has 10.0.20.114 tell 10.0.20.3, length 28\n13:54:51.428775 ARP, Request who-has 10.0.20.118 tell 10.0.20.3, length 28\n13:54:51.428795 ARP, Request who-has 10.0.20.122 tell 10.0.20.3, length 28\n13:54:51.432294 ARP, Request who-has 10.0.20.128 tell 10.0.20.3, length 28\n13:54:51.432327 ARP, Request who-has 10.0.20.129 tell 10.0.20.3, length 28\n13:54:51.432353 ARP, Request who-has 10.0.20.135 tell 10.0.20.3, length 28\n13:54:51.432384 ARP, Request who-has 10.0.20.136 tell 10.0.20.3, length 28\n13:54:51.432402 ARP, Request who-has 10.0.20.153 tell 10.0.20.3, length 28\n13:54:51.432897 ARP, Request who-has 10.0.20.58 tell 10.0.20.3, length 28\n13:54:51.432899 ARP, Request who-has 10.0.20.55 tell 10.0.20.3, length 28\n13:54:51.432900 ARP, Request who-has 10.0.20.54 tell 10.0.20.3, length 28\n13:54:51.432900 ARP, Request who-has 10.0.20.51 tell 10.0.20.3, length 28\n13:54:51.432901 ARP, Request who-has 10.0.20.50 tell 10.0.20.3, length 28\n13:54:51.432902 ARP, Request who-has 10.0.20.47 tell 10.0.20.3, length 28\n13:54:51.432902 ARP, Request who-has 10.0.20.46 tell 10.0.20.3, length 28\n13:54:51.432903 ARP, Request who-has 10.0.20.43 tell 10.0.20.3, length 28\n13:54:51.432903 ARP, Request who-has 10.0.20.40 tell 10.0.20.3, length 28\n13:54:51.432904 ARP, Request who-has 10.0.20.37 tell 10.0.20.3, length 28\n13:54:51.432905 ARP, Request who-has 10.0.20.34 tell 10.0.20.3, length 28\n13:54:51.432905 ARP, Request who-has 10.0.20.31 tell 10.0.20.3, length 28\n13:54:51.528083 ARP, Request who-has 10.0.20.239 tell 10.0.20.3, length 28\n13:54:51.532392 ARP, Request who-has 10.0.20.194 tell 10.0.20.3, length 28\n13:54:51.532479 ARP, Request who-has 10.0.20.197 tell 10.0.20.3, length 28\n13:54:51.532500 ARP, Request who-has 10.0.20.198 tell 10.0.20.3, length 28\n13:54:51.532518 ARP, Request who-has 10.0.20.201 tell 10.0.20.3, length 28\n13:54:51.532537 ARP, Request who-has 10.0.20.202 tell 10.0.20.3, length 28\n13:54:51.532614 ARP, Request who-has 10.0.20.208 tell 10.0.20.3, length 28\n13:54:51.532637 ARP, Request who-has 10.0.20.209 tell 10.0.20.3, length 28\n13:54:51.532893 ARP, Request who-has 10.0.20.123 tell 10.0.20.3, length 28\n13:54:51.532894 ARP, Request who-has 10.0.20.120 tell 10.0.20.3, length 28\n13:54:51.532895 ARP, Request who-has 10.0.20.119 tell 10.0.20.3, length 28\n13:54:51.532895 ARP, Request who-has 10.0.20.116 tell 10.0.20.3, length 28\n13:54:51.532896 ARP, Request who-has 10.0.20.115 tell 10.0.20.3, length 28\n13:54:51.532897 ARP, Request who-has 10.0.20.112 tell 10.0.20.3, length 28\n13:54:51.532897 ARP, Request who-has 10.0.20.111 tell 10.0.20.3, length 28\n13:54:51.532898 ARP, Request who-has 10.0.20.107 tell 10.0.20.3, length 28\n13:54:51.532899 ARP, Request who-has 10.0.20.99 tell 10.0.20.3, length 28\n13:54:51.532899 ARP, Request who-has 10.0.20.94 tell 10.0.20.3, length 28\n13:54:51.532900 ARP, Request who-has 10.0.20.90 tell 10.0.20.3, length 28\n13:54:51.532900 ARP, Request who-has 10.0.20.87 tell 10.0.20.3, length 28\n13:54:51.628025 ARP, Request who-has 10.0.20.186 tell 10.0.20.3, length 28\n13:54:51.628094 ARP, Request who-has 10.0.20.189 tell 10.0.20.3, length 28\n13:54:51.628160 ARP, Request who-has 10.0.20.192 tell 10.0.20.3, length 28\n13:54:51.628228 ARP, Request who-has 10.0.20.195 tell 10.0.20.3, length 28\n13:54:51.628610 ARP, Request who-has 10.0.20.185 tell 10.0.20.3, length 28\n13:54:51.628751 ARP, Request who-has 10.0.20.188 tell 10.0.20.3, length 28\n13:54:51.628924 ARP, Request who-has 10.0.20.191 tell 10.0.20.3, length 28\n13:54:51.628958 ARP, Request who-has 10.0.20.193 tell 10.0.20.3, length 28\n13:54:51.629091 ARP, Request who-has 10.0.20.187 tell 10.0.20.3, length 28\n13:54:51.629131 ARP, Request who-has 10.0.20.190 tell 10.0.20.3, length 28\n13:54:51.632603 ARP, Request who-has 10.0.20.196 tell 10.0.20.3, length 28\n13:54:51.656931 ARP, Request who-has 10.0.20.183 tell 10.0.20.3, length 28\n13:54:51.656932 ARP, Request who-has 10.0.20.182 tell 10.0.20.3, length 28\n13:54:51.656933 ARP, Request who-has 10.0.20.177 tell 10.0.20.3, length 28\n13:54:51.656934 ARP, Request who-has 10.0.20.176 tell 10.0.20.3, length 28\n13:54:51.656934 ARP, Request who-has 10.0.20.172 tell 10.0.20.3, length 28\n13:54:51.656935 ARP, Request who-has 10.0.20.171 tell 10.0.20.3, length 28\n13:54:51.656936 ARP, Request who-has 10.0.20.167 tell 10.0.20.3, length 28\n13:54:51.656936 ARP, Request who-has 10.0.20.164 tell 10.0.20.3, length 28\n13:54:51.656937 ARP, Request who-has 10.0.20.161 tell 10.0.20.3, length 28\n13:54:51.656938 ARP, Request who-has 10.0.20.158 tell 10.0.20.3, length 28\n13:54:51.656938 ARP, Request who-has 10.0.20.155 tell 10.0.20.3, length 28\n13:54:51.656939 ARP, Request who-has 10.0.20.152 tell 10.0.20.3, length 28\n13:54:51.752909 ARP, Request who-has 10.0.20.243 tell 10.0.20.3, length 28\n13:54:51.752911 ARP, Request who-has 10.0.20.242 tell 10.0.20.3, length 28\n13:54:51.752912 ARP, Request who-has 10.0.20.238 tell 10.0.20.3, length 28\n13:54:51.752912 ARP, Request who-has 10.0.20.234 tell 10.0.20.3, length 28\n13:54:51.752913 ARP, Request who-has 10.0.20.231 tell 10.0.20.3, length 28\n13:54:51.752913 ARP, Request who-has 10.0.20.230 tell 10.0.20.3, length 28\n13:54:51.752914 ARP, Request who-has 10.0.20.227 tell 10.0.20.3, length 28\n13:54:51.752915 ARP, Request who-has 10.0.20.224 tell 10.0.20.3, length 28\n13:54:51.752915 ARP, Request who-has 10.0.20.221 tell 10.0.20.3, length 28\n13:54:51.752916 ARP, Request who-has 10.0.20.218 tell 10.0.20.3, length 28\n13:54:51.752917 ARP, Request who-has 10.0.20.215 tell 10.0.20.3, length 28\n13:54:51.752917 ARP, Request who-has 10.0.20.212 tell 10.0.20.3, length 28\n13:54:51.848938 ARP, Request who-has 10.0.20.60 tell 10.0.20.3, length 28\n13:54:51.848940 ARP, Request who-has 10.0.20.59 tell 10.0.20.3, length 28\n13:54:51.848941 ARP, Request who-has 10.0.20.56 tell 10.0.20.3, length 28\n13:54:51.848942 ARP, Request who-has 10.0.20.52 tell 10.0.20.3, length 28\n13:54:51.848942 ARP, Request who-has 10.0.20.49 tell 10.0.20.3, length 28\n13:54:51.848943 ARP, Request who-has 10.0.20.48 tell 10.0.20.3, length 28\n13:54:51.848944 ARP, Request who-has 10.0.20.44 tell 10.0.20.3, length 28\n13:54:51.848944 ARP, Request who-has 10.0.20.41 tell 10.0.20.3, length 28\n13:54:51.848945 ARP, Request who-has 10.0.20.38 tell 10.0.20.3, length 28\n13:54:51.848946 ARP, Request who-has 10.0.20.35 tell 10.0.20.3, length 28\n13:54:51.848946 ARP, Request who-has 10.0.20.32 tell 10.0.20.3, length 28\n13:54:51.848947 ARP, Request who-has 10.0.20.18 tell 10.0.20.3, length 28\n13:54:51.948923 ARP, Request who-has 10.0.20.125 tell 10.0.20.3, length 28\n13:54:51.948925 ARP, Request who-has 10.0.20.124 tell 10.0.20.3, length 28\n13:54:51.948925 ARP, Request who-has 10.0.20.121 tell 10.0.20.3, length 28\n13:54:51.948926 ARP, Request who-has 10.0.20.117 tell 10.0.20.3, length 28\n13:54:51.948927 ARP, Request who-has 10.0.20.113 tell 10.0.20.3, length 28\n13:54:51.948927 ARP, Request who-has 10.0.20.108 tell 10.0.20.3, length 28\n13:54:51.948928 ARP, Request who-has 10.0.20.100 tell 10.0.20.3, length 28\n13:54:51.948929 ARP, Request who-has 10.0.20.95 tell 10.0.20.3, length 28\n13:54:51.948929 ARP, Request who-has 10.0.20.92 tell 10.0.20.3, length 28\n13:54:51.948930 ARP, Request who-has 10.0.20.89 tell 10.0.20.3, length 28\n13:54:51.948931 ARP, Request who-has 10.0.20.86 tell 10.0.20.3, length 28\n13:54:51.948931 ARP, Request who-has 10.0.20.83 tell 10.0.20.3, length 28\n13:54:51.976931 ARP, Request who-has 10.0.20.1 tell 10.0.20.3, length 28\n13:54:51.976933 ARP, Request who-has 10.0.20.2 tell 10.0.20.3, length 28\n13:54:51.976934 ARP, Request who-has 10.0.20.5 tell 10.0.20.3, length 28\n13:54:51.976934 ARP, Request who-has 10.0.20.6 tell 10.0.20.3, length 28\n13:54:51.976935 ARP, Request who-has 10.0.20.7 tell 10.0.20.3, length 28\n13:54:51.976936 ARP, Request who-has 10.0.20.8 tell 10.0.20.3, length 28\n13:54:51.976936 ARP, Request who-has 10.0.20.9 tell 10.0.20.3, length 28\n13:54:51.976937 ARP, Request who-has 10.0.20.10 tell 10.0.20.3, length 28\n13:54:51.976938 ARP, Request who-has 10.0.20.13 tell 10.0.20.3, length 28\n13:54:51.976938 ARP, Request who-has 10.0.20.14 tell 10.0.20.3, length 28\n13:54:51.976939 ARP, Request who-has 10.0.20.15 tell 10.0.20.3, length 28\n13:54:51.976939 ARP, Request who-has 10.0.20.16 tell 10.0.20.3, length 28\n13:54:52.072939 ARP, Request who-has 10.0.20.19 tell 10.0.20.3, length 28\n13:54:52.072942 ARP, Request who-has 10.0.20.20 tell 10.0.20.3, length 28\n13:54:52.072943 ARP, Request who-has 10.0.20.21 tell 10.0.20.3, length 28\n13:54:52.072944 ARP, Request who-has 10.0.20.22 tell 10.0.20.3, length 28\n13:54:52.072944 ARP, Request who-has 10.0.20.23 tell 10.0.20.3, length 28\n13:54:52.072945 ARP, Request who-has 10.0.20.24 tell 10.0.20.3, length 28\n13:54:52.072945 ARP, Request who-has 10.0.20.25 tell 10.0.20.3, length 28\n13:54:52.072946 ARP, Request who-has 10.0.20.26 tell 10.0.20.3, length 28\n13:54:52.072946 ARP, Request who-has 10.0.20.27 tell 10.0.20.3, length 28\n13:54:52.072947 ARP, Request who-has 10.0.20.28 tell 10.0.20.3, length 28\n13:54:52.072948 ARP, Request who-has 10.0.20.29 tell 10.0.20.3, length 28\n13:54:52.072948 ARP, Request who-has 10.0.20.30 tell 10.0.20.3, length 28\n13:54:52.168928 ARP, Request who-has 10.0.20.93 tell 10.0.20.3, length 28\n13:54:52.168932 ARP, Request who-has 10.0.20.96 tell 10.0.20.3, length 28\n13:54:52.168932 ARP, Request who-has 10.0.20.97 tell 10.0.20.3, length 28\n13:54:52.168933 ARP, Request who-has 10.0.20.98 tell 10.0.20.3, length 28\n13:54:52.168934 ARP, Request who-has 10.0.20.101 tell 10.0.20.3, length 28\n13:54:52.168934 ARP, Request who-has 10.0.20.102 tell 10.0.20.3, length 28\n13:54:52.168935 ARP, Request who-has 10.0.20.103 tell 10.0.20.3, length 28\n13:54:52.168935 ARP, Request who-has 10.0.20.104 tell 10.0.20.3, length 28\n13:54:52.168936 ARP, Request who-has 10.0.20.105 tell 10.0.20.3, length 28\n13:54:52.168937 ARP, Request who-has 10.0.20.106 tell 10.0.20.3, length 28\n13:54:52.168937 ARP, Request who-has 10.0.20.109 tell 10.0.20.3, length 28\n13:54:52.168938 ARP, Request who-has 10.0.20.110 tell 10.0.20.3, length 28\n13:54:52.233031 ARP, Request who-has 10.0.20.91 tell 10.0.20.3, length 28\n13:54:52.233033 ARP, Request who-has 10.0.20.88 tell 10.0.20.3, length 28\n13:54:52.233034 ARP, Request who-has 10.0.20.85 tell 10.0.20.3, length 28\n13:54:52.233035 ARP, Request who-has 10.0.20.84 tell 10.0.20.3, length 28\n13:54:52.233035 ARP, Request who-has 10.0.20.82 tell 10.0.20.3, length 28\n13:54:52.233036 ARP, Request who-has 10.0.20.81 tell 10.0.20.3, length 28\n13:54:52.233037 ARP, Request who-has 10.0.20.80 tell 10.0.20.3, length 28\n13:54:52.233037 ARP, Request who-has 10.0.20.79 tell 10.0.20.3, length 28\n13:54:52.233038 ARP, Request who-has 10.0.20.78 tell 10.0.20.3, length 28\n13:54:52.233039 ARP, Request who-has 10.0.20.77 tell 10.0.20.3, length 28\n13:54:52.233039 ARP, Request who-has 10.0.20.76 tell 10.0.20.3, length 28\n13:54:52.233040 ARP, Request who-has 10.0.20.75 tell 10.0.20.3, length 28\n13:54:52.233041 ARP, Request who-has 10.0.20.74 tell 10.0.20.3, length 28\n13:54:52.233041 ARP, Request who-has 10.0.20.73 tell 10.0.20.3, length 28\n13:54:52.233042 ARP, Request who-has 10.0.20.72 tell 10.0.20.3, length 28\n13:54:52.233043 ARP, Request who-has 10.0.20.71 tell 10.0.20.3, length 28\n13:54:52.233043 ARP, Request who-has 10.0.20.70 tell 10.0.20.3, length 28\n13:54:52.233044 ARP, Request who-has 10.0.20.67 tell 10.0.20.3, length 28\n13:54:52.233045 ARP, Request who-has 10.0.20.66 tell 10.0.20.3, length 28\n13:54:52.233046 ARP, Request who-has 10.0.20.65 tell 10.0.20.3, length 28\n13:54:52.233047 ARP, Request who-has 10.0.20.64 tell 10.0.20.3, length 28\n13:54:52.233047 ARP, Request who-has 10.0.20.63 tell 10.0.20.3, length 28\n13:54:52.233048 ARP, Request who-has 10.0.20.62 tell 10.0.20.3, length 28\n13:54:52.233048 ARP, Request who-has 10.0.20.61 tell 10.0.20.3, length 28\n13:54:52.233049 ARP, Request who-has 10.0.20.57 tell 10.0.20.3, length 28\n13:54:52.233050 ARP, Request who-has 10.0.20.53 tell 10.0.20.3, length 28\n13:54:52.233050 ARP, Request who-has 10.0.20.45 tell 10.0.20.3, length 28\n13:54:52.233051 ARP, Request who-has 10.0.20.42 tell 10.0.20.3, length 28\n13:54:52.233052 ARP, Request who-has 10.0.20.39 tell 10.0.20.3, length 28\n13:54:52.233052 ARP, Request who-has 10.0.20.36 tell 10.0.20.3, length 28\n13:54:52.233053 ARP, Request who-has 10.0.20.33 tell 10.0.20.3, length 28\n13:54:52.233054 ARP, Request who-has 10.0.20.17 tell 10.0.20.3, length 28\n13:54:52.233054 ARP, Request who-has 10.0.20.12 tell 10.0.20.3, length 28\n13:54:52.233055 ARP, Request who-has 10.0.20.11 tell 10.0.20.3, length 28\n13:54:52.264917 ARP, Request who-has 10.0.20.163 tell 10.0.20.3, length 28\n13:54:52.264918 ARP, Request who-has 10.0.20.166 tell 10.0.20.3, length 28\n13:54:52.264919 ARP, Request who-has 10.0.20.169 tell 10.0.20.3, length 28\n13:54:52.264920 ARP, Request who-has 10.0.20.170 tell 10.0.20.3, length 28\n13:54:52.264920 ARP, Request who-has 10.0.20.173 tell 10.0.20.3, length 28\n13:54:52.264921 ARP, Request who-has 10.0.20.174 tell 10.0.20.3, length 28\n13:54:52.264925 ARP, Request who-has 10.0.20.175 tell 10.0.20.3, length 28\n13:54:52.264925 ARP, Request who-has 10.0.20.178 tell 10.0.20.3, length 28\n13:54:52.264926 ARP, Request who-has 10.0.20.179 tell 10.0.20.3, length 28\n13:54:52.264927 ARP, Request who-has 10.0.20.180 tell 10.0.20.3, length 28\n13:54:52.264927 ARP, Request who-has 10.0.20.181 tell 10.0.20.3, length 28\n13:54:52.264928 ARP, Request who-has 10.0.20.184 tell 10.0.20.3, length 28\n13:54:52.333031 ARP, Request who-has 10.0.20.168 tell 10.0.20.3, length 28\n13:54:52.333032 ARP, Request who-has 10.0.20.165 tell 10.0.20.3, length 28\n13:54:52.333033 ARP, Request who-has 10.0.20.162 tell 10.0.20.3, length 28\n13:54:52.333034 ARP, Request who-has 10.0.20.160 tell 10.0.20.3, length 28\n13:54:52.333034 ARP, Request who-has 10.0.20.159 tell 10.0.20.3, length 28\n13:54:52.333035 ARP, Request who-has 10.0.20.157 tell 10.0.20.3, length 28\n13:54:52.333036 ARP, Request who-has 10.0.20.156 tell 10.0.20.3, length 28\n13:54:52.333036 ARP, Request who-has 10.0.20.154 tell 10.0.20.3, length 28\n13:54:52.333037 ARP, Request who-has 10.0.20.151 tell 10.0.20.3, length 28\n13:54:52.333038 ARP, Request who-has 10.0.20.150 tell 10.0.20.3, length 28\n13:54:52.333039 ARP, Request who-has 10.0.20.149 tell 10.0.20.3, length 28\n13:54:52.333039 ARP, Request who-has 10.0.20.148 tell 10.0.20.3, length 28\n13:54:52.333040 ARP, Request who-has 10.0.20.147 tell 10.0.20.3, length 28\n13:54:52.333040 ARP, Request who-has 10.0.20.146 tell 10.0.20.3, length 28\n13:54:52.333041 ARP, Request who-has 10.0.20.145 tell 10.0.20.3, length 28\n13:54:52.333042 ARP, Request who-has 10.0.20.144 tell 10.0.20.3, length 28\n13:54:52.333042 ARP, Request who-has 10.0.20.143 tell 10.0.20.3, length 28\n13:54:52.333043 ARP, Request who-has 10.0.20.142 tell 10.0.20.3, length 28\n13:54:52.333044 ARP, Request who-has 10.0.20.141 tell 10.0.20.3, length 28\n13:54:52.333044 ARP, Request who-has 10.0.20.140 tell 10.0.20.3, length 28\n13:54:52.333045 ARP, Request who-has 10.0.20.139 tell 10.0.20.3, length 28\n13:54:52.333045 ARP, Request who-has 10.0.20.138 tell 10.0.20.3, length 28\n13:54:52.333046 ARP, Request who-has 10.0.20.137 tell 10.0.20.3, length 28\n13:54:52.333047 ARP, Request who-has 10.0.20.134 tell 10.0.20.3, length 28\n13:54:52.333048 ARP, Request who-has 10.0.20.133 tell 10.0.20.3, length 28\n13:54:52.333048 ARP, Request who-has 10.0.20.132 tell 10.0.20.3, length 28\n13:54:52.333049 ARP, Request who-has 10.0.20.131 tell 10.0.20.3, length 28\n13:54:52.333049 ARP, Request who-has 10.0.20.130 tell 10.0.20.3, length 28\n13:54:52.333050 ARP, Request who-has 10.0.20.127 tell 10.0.20.3, length 28\n13:54:52.333051 ARP, Request who-has 10.0.20.126 tell 10.0.20.3, length 28\n13:54:52.360921 ARP, Request who-has 10.0.20.223 tell 10.0.20.3, length 28\n13:54:52.360922 ARP, Request who-has 10.0.20.226 tell 10.0.20.3, length 28\n13:54:52.360923 ARP, Request who-has 10.0.20.229 tell 10.0.20.3, length 28\n13:54:52.360924 ARP, Request who-has 10.0.20.232 tell 10.0.20.3, length 28\n13:54:52.360924 ARP, Request who-has 10.0.20.235 tell 10.0.20.3, length 28\n13:54:52.360925 ARP, Request who-has 10.0.20.236 tell 10.0.20.3, length 28\n13:54:52.360926 ARP, Request who-has 10.0.20.237 tell 10.0.20.3, length 28\n13:54:52.360926 ARP, Request who-has 10.0.20.240 tell 10.0.20.3, length 28\n13:54:52.360927 ARP, Request who-has 10.0.20.241 tell 10.0.20.3, length 28\n13:54:52.360928 ARP, Request who-has 10.0.20.244 tell 10.0.20.3, length 28\n13:54:52.360928 ARP, Request who-has 10.0.20.245 tell 10.0.20.3, length 28\n13:54:52.360929 ARP, Request who-has 10.0.20.248 tell 10.0.20.3, length 28\n13:54:52.457147 ARP, Request who-has 10.0.20.31 tell 10.0.20.3, length 28\n13:54:52.457149 ARP, Request who-has 10.0.20.34 tell 10.0.20.3, length 28\n13:54:52.457149 ARP, Request who-has 10.0.20.37 tell 10.0.20.3, length 28\n13:54:52.457150 ARP, Request who-has 10.0.20.40 tell 10.0.20.3, length 28\n13:54:52.457151 ARP, Request who-has 10.0.20.43 tell 10.0.20.3, length 28\n13:54:52.457152 ARP, Request who-has 10.0.20.46 tell 10.0.20.3, length 28\n13:54:52.457152 ARP, Request who-has 10.0.20.47 tell 10.0.20.3, length 28\n13:54:52.457153 ARP, Request who-has 10.0.20.50 tell 10.0.20.3, length 28\n13:54:52.457154 ARP, Request who-has 10.0.20.51 tell 10.0.20.3, length 28\n13:54:52.457154 ARP, Request who-has 10.0.20.54 tell 10.0.20.3, length 28\n13:54:52.457155 ARP, Request who-has 10.0.20.55 tell 10.0.20.3, length 28\n13:54:52.457156 ARP, Request who-has 10.0.20.58 tell 10.0.20.3, length 28\n13:54:52.457156 ARP, Request who-has 10.0.20.153 tell 10.0.20.3, length 28\n13:54:52.457157 ARP, Request who-has 10.0.20.136 tell 10.0.20.3, length 28\n13:54:52.457158 ARP, Request who-has 10.0.20.135 tell 10.0.20.3, length 28\n13:54:52.457158 ARP, Request who-has 10.0.20.129 tell 10.0.20.3, length 28\n13:54:52.457159 ARP, Request who-has 10.0.20.128 tell 10.0.20.3, length 28\n13:54:52.457160 ARP, Request who-has 10.0.20.122 tell 10.0.20.3, length 28\n13:54:52.457160 ARP, Request who-has 10.0.20.118 tell 10.0.20.3, length 28\n13:54:52.457161 ARP, Request who-has 10.0.20.114 tell 10.0.20.3, length 28\n13:54:52.457162 ARP, Request who-has 10.0.20.69 tell 10.0.20.3, length 28\n13:54:52.457162 ARP, Request who-has 10.0.20.68 tell 10.0.20.3, length 28\n13:54:52.457163 ARP, Request who-has 10.0.20.0 tell 10.0.20.3, length 28\n13:54:52.457164 ARP, Request who-has 10.0.20.254 tell 10.0.20.3, length 28\n13:54:52.457165 ARP, Request who-has 10.0.20.253 tell 10.0.20.3, length 28\n13:54:52.457165 ARP, Request who-has 10.0.20.252 tell 10.0.20.3, length 28\n13:54:52.457166 ARP, Request who-has 10.0.20.251 tell 10.0.20.3, length 28\n13:54:52.457166 ARP, Request who-has 10.0.20.250 tell 10.0.20.3, length 28\n13:54:52.457167 ARP, Request who-has 10.0.20.249 tell 10.0.20.3, length 28\n13:54:52.457168 ARP, Request who-has 10.0.20.247 tell 10.0.20.3, length 28\n13:54:52.457168 ARP, Request who-has 10.0.20.246 tell 10.0.20.3, length 28\n13:54:52.457169 ARP, Request who-has 10.0.20.233 tell 10.0.20.3, length 28\n13:54:52.457170 ARP, Request who-has 10.0.20.228 tell 10.0.20.3, length 28\n13:54:52.457170 ARP, Request who-has 10.0.20.225 tell 10.0.20.3, length 28\n13:54:52.457171 ARP, Request who-has 10.0.20.222 tell 10.0.20.3, length 28\n13:54:52.457172 ARP, Request who-has 10.0.20.220 tell 10.0.20.3, length 28\n13:54:52.457172 ARP, Request who-has 10.0.20.219 tell 10.0.20.3, length 28\n13:54:52.457173 ARP, Request who-has 10.0.20.217 tell 10.0.20.3, length 28\n13:54:52.457174 ARP, Request who-has 10.0.20.216 tell 10.0.20.3, length 28\n13:54:52.457174 ARP, Request who-has 10.0.20.214 tell 10.0.20.3, length 28\n13:54:52.457175 ARP, Request who-has 10.0.20.213 tell 10.0.20.3, length 28\n13:54:52.457176 ARP, Request who-has 10.0.20.211 tell 10.0.20.3, length 28\n13:54:52.457177 ARP, Request who-has 10.0.20.210 tell 10.0.20.3, length 28\n13:54:52.457177 ARP, Request who-has 10.0.20.207 tell 10.0.20.3, length 28\n13:54:52.457178 ARP, Request who-has 10.0.20.206 tell 10.0.20.3, length 28\n13:54:52.457178 ARP, Request who-has 10.0.20.205 tell 10.0.20.3, length 28\n13:54:52.457179 ARP, Request who-has 10.0.20.204 tell 10.0.20.3, length 28\n13:54:52.457180 ARP, Request who-has 10.0.20.203 tell 10.0.20.3, length 28\n13:54:52.457180 ARP, Request who-has 10.0.20.200 tell 10.0.20.3, length 28\n13:54:52.457181 ARP, Request who-has 10.0.20.199 tell 10.0.20.3, length 28\n13:54:52.552958 ARP, Request who-has 10.0.20.87 tell 10.0.20.3, length 28\n13:54:52.552959 ARP, Request who-has 10.0.20.90 tell 10.0.20.3, length 28\n13:54:52.552960 ARP, Request who-has 10.0.20.94 tell 10.0.20.3, length 28\n13:54:52.552961 ARP, Request who-has 10.0.20.99 tell 10.0.20.3, length 28\n13:54:52.552962 ARP, Request who-has 10.0.20.107 tell 10.0.20.3, length 28\n13:54:52.552962 ARP, Request who-has 10.0.20.111 tell 10.0.20.3, length 28\n13:54:52.552963 ARP, Request who-has 10.0.20.112 tell 10.0.20.3, length 28\n13:54:52.552964 ARP, Request who-has 10.0.20.115 tell 10.0.20.3, length 28\n13:54:52.552964 ARP, Request who-has 10.0.20.116 tell 10.0.20.3, length 28\n13:54:52.552965 ARP, Request who-has 10.0.20.119 tell 10.0.20.3, length 28\n13:54:52.552965 ARP, Request who-has 10.0.20.120 tell 10.0.20.3, length 28\n13:54:52.552966 ARP, Request who-has 10.0.20.123 tell 10.0.20.3, length 28\n13:54:52.552967 ARP, Request who-has 10.0.20.209 tell 10.0.20.3, length 28\n13:54:52.552967 ARP, Request who-has 10.0.20.208 tell 10.0.20.3, length 28\n13:54:52.552968 ARP, Request who-has 10.0.20.202 tell 10.0.20.3, length 28\n13:54:52.552969 ARP, Request who-has 10.0.20.201 tell 10.0.20.3, length 28\n13:54:52.552969 ARP, Request who-has 10.0.20.198 tell 10.0.20.3, length 28\n13:54:52.552970 ARP, Request who-has 10.0.20.197 tell 10.0.20.3, length 28\n13:54:52.552970 ARP, Request who-has 10.0.20.194 tell 10.0.20.3, length 28\n13:54:52.552971 ARP, Request who-has 10.0.20.239 tell 10.0.20.3, length 28\n13:54:52.648942 ARP, Request who-has 10.0.20.196 tell 10.0.20.3, length 28\n13:54:52.648943 ARP, Request who-has 10.0.20.190 tell 10.0.20.3, length 28\n13:54:52.648944 ARP, Request who-has 10.0.20.187 tell 10.0.20.3, length 28\n13:54:52.648945 ARP, Request who-has 10.0.20.193 tell 10.0.20.3, length 28\n13:54:52.648945 ARP, Request who-has 10.0.20.191 tell 10.0.20.3, length 28\n13:54:52.648946 ARP, Request who-has 10.0.20.188 tell 10.0.20.3, length 28\n13:54:52.648947 ARP, Request who-has 10.0.20.185 tell 10.0.20.3, length 28\n13:54:52.648947 ARP, Request who-has 10.0.20.195 tell 10.0.20.3, length 28\n13:54:52.648948 ARP, Request who-has 10.0.20.192 tell 10.0.20.3, length 28\n13:54:52.648948 ARP, Request who-has 10.0.20.189 tell 10.0.20.3, length 28\n13:54:52.648949 ARP, Request who-has 10.0.20.186 tell 10.0.20.3, length 28\n13:54:52.680923 ARP, Request who-has 10.0.20.152 tell 10.0.20.3, length 28\n13:54:52.680924 ARP, Request who-has 10.0.20.155 tell 10.0.20.3, length 28\n13:54:52.680925 ARP, Request who-has 10.0.20.158 tell 10.0.20.3, length 28\n13:54:52.680925 ARP, Request who-has 10.0.20.161 tell 10.0.20.3, length 28\n13:54:52.680926 ARP, Request who-has 10.0.20.164 tell 10.0.20.3, length 28\n13:54:52.680927 ARP, Request who-has 10.0.20.167 tell 10.0.20.3, length 28\n13:54:52.680927 ARP, Request who-has 10.0.20.171 tell 10.0.20.3, length 28\n13:54:52.680928 ARP, Request who-has 10.0.20.172 tell 10.0.20.3, length 28\n13:54:52.680929 ARP, Request who-has 10.0.20.176 tell 10.0.20.3, length 28\n13:54:52.680929 ARP, Request who-has 10.0.20.177 tell 10.0.20.3, length 28\n13:54:52.680930 ARP, Request who-has 10.0.20.182 tell 10.0.20.3, length 28\n13:54:52.680930 ARP, Request who-has 10.0.20.183 tell 10.0.20.3, length 28\n13:54:52.726900 IP 10.0.20.3.57450 &gt; 10.0.20.4.http: Flags [S], seq 1057964882, win 64240, options [mss 1460,sackOK,TS val 230224585 ecr 0,nop,wscale 7], length 0\n13:54:52.726908 IP 10.0.20.4.http &gt; 10.0.20.3.57450: Flags [R.], seq 0, ack 1057964883, win 0, length 0\n13:54:52.776920 ARP, Request who-has 10.0.20.212 tell 10.0.20.3, length 28\n13:54:52.776922 ARP, Request who-has 10.0.20.215 tell 10.0.20.3, length 28\n13:54:52.776922 ARP, Request who-has 10.0.20.218 tell 10.0.20.3, length 28\n13:54:52.776923 ARP, Request who-has 10.0.20.221 tell 10.0.20.3, length 28\n13:54:52.776924 ARP, Request who-has 10.0.20.224 tell 10.0.20.3, length 28\n13:54:52.776924 ARP, Request who-has 10.0.20.227 tell 10.0.20.3, length 28\n13:54:52.776925 ARP, Request who-has 10.0.20.230 tell 10.0.20.3, length 28\n13:54:52.776926 ARP, Request who-has 10.0.20.231 tell 10.0.20.3, length 28\n13:54:52.776926 ARP, Request who-has 10.0.20.234 tell 10.0.20.3, length 28\n13:54:52.776927 ARP, Request who-has 10.0.20.238 tell 10.0.20.3, length 28\n13:54:52.776927 ARP, Request who-has 10.0.20.242 tell 10.0.20.3, length 28\n13:54:52.776928 ARP, Request who-has 10.0.20.243 tell 10.0.20.3, length 28\n13:54:52.872924 ARP, Request who-has 10.0.20.18 tell 10.0.20.3, length 28\n13:54:52.872926 ARP, Request who-has 10.0.20.32 tell 10.0.20.3, length 28\n13:54:52.872927 ARP, Request who-has 10.0.20.35 tell 10.0.20.3, length 28\n13:54:52.872927 ARP, Request who-has 10.0.20.38 tell 10.0.20.3, length 28\n13:54:52.872928 ARP, Request who-has 10.0.20.41 tell 10.0.20.3, length 28\n13:54:52.872929 ARP, Request who-has 10.0.20.44 tell 10.0.20.3, length 28\n13:54:52.872929 ARP, Request who-has 10.0.20.48 tell 10.0.20.3, length 28\n13:54:52.872930 ARP, Request who-has 10.0.20.49 tell 10.0.20.3, length 28\n13:54:52.872930 ARP, Request who-has 10.0.20.52 tell 10.0.20.3, length 28\n13:54:52.872931 ARP, Request who-has 10.0.20.56 tell 10.0.20.3, length 28\n13:54:52.872932 ARP, Request who-has 10.0.20.59 tell 10.0.20.3, length 28\n13:54:52.872932 ARP, Request who-has 10.0.20.60 tell 10.0.20.3, length 28\n13:54:52.968919 ARP, Request who-has 10.0.20.83 tell 10.0.20.3, length 28\n13:54:52.968921 ARP, Request who-has 10.0.20.86 tell 10.0.20.3, length 28\n13:54:52.968922 ARP, Request who-has 10.0.20.89 tell 10.0.20.3, length 28\n13:54:52.968922 ARP, Request who-has 10.0.20.92 tell 10.0.20.3, length 28\n13:54:52.968923 ARP, Request who-has 10.0.20.95 tell 10.0.20.3, length 28\n13:54:52.968923 ARP, Request who-has 10.0.20.100 tell 10.0.20.3, length 28\n13:54:52.968924 ARP, Request who-has 10.0.20.108 tell 10.0.20.3, length 28\n13:54:52.968925 ARP, Request who-has 10.0.20.113 tell 10.0.20.3, length 28\n13:54:52.968925 ARP, Request who-has 10.0.20.117 tell 10.0.20.3, length 28\n13:54:52.968926 ARP, Request who-has 10.0.20.121 tell 10.0.20.3, length 28\n13:54:52.968927 ARP, Request who-has 10.0.20.124 tell 10.0.20.3, length 28\n13:54:52.968927 ARP, Request who-has 10.0.20.125 tell 10.0.20.3, length 28\n13:54:53.257044 ARP, Request who-has 10.0.20.11 tell 10.0.20.3, length 28\n13:54:53.257046 ARP, Request who-has 10.0.20.12 tell 10.0.20.3, length 28\n13:54:53.257047 ARP, Request who-has 10.0.20.17 tell 10.0.20.3, length 28\n13:54:53.257047 ARP, Request who-has 10.0.20.33 tell 10.0.20.3, length 28\n13:54:53.257048 ARP, Request who-has 10.0.20.36 tell 10.0.20.3, length 28\n13:54:53.257048 ARP, Request who-has 10.0.20.39 tell 10.0.20.3, length 28\n13:54:53.257049 ARP, Request who-has 10.0.20.42 tell 10.0.20.3, length 28\n13:54:53.257050 ARP, Request who-has 10.0.20.45 tell 10.0.20.3, length 28\n13:54:53.257050 ARP, Request who-has 10.0.20.53 tell 10.0.20.3, length 28\n13:54:53.257051 ARP, Request who-has 10.0.20.57 tell 10.0.20.3, length 28\n13:54:53.257052 ARP, Request who-has 10.0.20.61 tell 10.0.20.3, length 28\n13:54:53.257052 ARP, Request who-has 10.0.20.62 tell 10.0.20.3, length 28\n13:54:53.257053 ARP, Request who-has 10.0.20.63 tell 10.0.20.3, length 28\n13:54:53.257054 ARP, Request who-has 10.0.20.64 tell 10.0.20.3, length 28\n13:54:53.257055 ARP, Request who-has 10.0.20.65 tell 10.0.20.3, length 28\n13:54:53.257055 ARP, Request who-has 10.0.20.66 tell 10.0.20.3, length 28\n13:54:53.257056 ARP, Request who-has 10.0.20.67 tell 10.0.20.3, length 28\n13:54:53.257057 ARP, Request who-has 10.0.20.70 tell 10.0.20.3, length 28\n13:54:53.257057 ARP, Request who-has 10.0.20.71 tell 10.0.20.3, length 28\n13:54:53.257058 ARP, Request who-has 10.0.20.72 tell 10.0.20.3, length 28\n13:54:53.257059 ARP, Request who-has 10.0.20.73 tell 10.0.20.3, length 28\n13:54:53.257059 ARP, Request who-has 10.0.20.74 tell 10.0.20.3, length 28\n13:54:53.257060 ARP, Request who-has 10.0.20.75 tell 10.0.20.3, length 28\n13:54:53.257061 ARP, Request who-has 10.0.20.76 tell 10.0.20.3, length 28\n13:54:53.257061 ARP, Request who-has 10.0.20.77 tell 10.0.20.3, length 28\n13:54:53.257062 ARP, Request who-has 10.0.20.78 tell 10.0.20.3, length 28\n13:54:53.257063 ARP, Request who-has 10.0.20.79 tell 10.0.20.3, length 28\n13:54:53.257063 ARP, Request who-has 10.0.20.80 tell 10.0.20.3, length 28\n13:54:53.257064 ARP, Request who-has 10.0.20.81 tell 10.0.20.3, length 28\n13:54:53.257064 ARP, Request who-has 10.0.20.82 tell 10.0.20.3, length 28\n13:54:53.257065 ARP, Request who-has 10.0.20.84 tell 10.0.20.3, length 28\n13:54:53.257066 ARP, Request who-has 10.0.20.85 tell 10.0.20.3, length 28\n13:54:53.257067 ARP, Request who-has 10.0.20.88 tell 10.0.20.3, length 28\n13:54:53.257067 ARP, Request who-has 10.0.20.91 tell 10.0.20.3, length 28\n13:54:53.353028 ARP, Request who-has 10.0.20.126 tell 10.0.20.3, length 28\n13:54:53.353030 ARP, Request who-has 10.0.20.127 tell 10.0.20.3, length 28\n13:54:53.353031 ARP, Request who-has 10.0.20.130 tell 10.0.20.3, length 28\n13:54:53.353031 ARP, Request who-has 10.0.20.131 tell 10.0.20.3, length 28\n13:54:53.353032 ARP, Request who-has 10.0.20.132 tell 10.0.20.3, length 28\n13:54:53.353033 ARP, Request who-has 10.0.20.133 tell 10.0.20.3, length 28\n13:54:53.353033 ARP, Request who-has 10.0.20.134 tell 10.0.20.3, length 28\n13:54:53.353034 ARP, Request who-has 10.0.20.137 tell 10.0.20.3, length 28\n13:54:53.353035 ARP, Request who-has 10.0.20.138 tell 10.0.20.3, length 28\n13:54:53.353036 ARP, Request who-has 10.0.20.139 tell 10.0.20.3, length 28\n13:54:53.353036 ARP, Request who-has 10.0.20.140 tell 10.0.20.3, length 28\n13:54:53.353037 ARP, Request who-has 10.0.20.141 tell 10.0.20.3, length 28\n13:54:53.353037 ARP, Request who-has 10.0.20.142 tell 10.0.20.3, length 28\n13:54:53.353038 ARP, Request who-has 10.0.20.143 tell 10.0.20.3, length 28\n13:54:53.353039 ARP, Request who-has 10.0.20.144 tell 10.0.20.3, length 28\n13:54:53.353039 ARP, Request who-has 10.0.20.145 tell 10.0.20.3, length 28\n13:54:53.353040 ARP, Request who-has 10.0.20.146 tell 10.0.20.3, length 28\n13:54:53.353041 ARP, Request who-has 10.0.20.147 tell 10.0.20.3, length 28\n13:54:53.353041 ARP, Request who-has 10.0.20.148 tell 10.0.20.3, length 28\n13:54:53.353042 ARP, Request who-has 10.0.20.149 tell 10.0.20.3, length 28\n13:54:53.353043 ARP, Request who-has 10.0.20.150 tell 10.0.20.3, length 28\n13:54:53.353043 ARP, Request who-has 10.0.20.151 tell 10.0.20.3, length 28\n13:54:53.353044 ARP, Request who-has 10.0.20.154 tell 10.0.20.3, length 28\n13:54:53.353044 ARP, Request who-has 10.0.20.156 tell 10.0.20.3, length 28\n13:54:53.353045 ARP, Request who-has 10.0.20.157 tell 10.0.20.3, length 28\n13:54:53.353046 ARP, Request who-has 10.0.20.159 tell 10.0.20.3, length 28\n13:54:53.353046 ARP, Request who-has 10.0.20.160 tell 10.0.20.3, length 28\n13:54:53.353047 ARP, Request who-has 10.0.20.162 tell 10.0.20.3, length 28\n13:54:53.353047 ARP, Request who-has 10.0.20.165 tell 10.0.20.3, length 28\n13:54:53.353048 ARP, Request who-has 10.0.20.168 tell 10.0.20.3, length 28\n13:54:53.481257 ARP, Request who-has 10.0.20.199 tell 10.0.20.3, length 28\n13:54:53.481259 ARP, Request who-has 10.0.20.200 tell 10.0.20.3, length 28\n13:54:53.481259 ARP, Request who-has 10.0.20.203 tell 10.0.20.3, length 28\n13:54:53.481260 ARP, Request who-has 10.0.20.204 tell 10.0.20.3, length 28\n13:54:53.481261 ARP, Request who-has 10.0.20.205 tell 10.0.20.3, length 28\n13:54:53.481261 ARP, Request who-has 10.0.20.206 tell 10.0.20.3, length 28\n13:54:53.481262 ARP, Request who-has 10.0.20.207 tell 10.0.20.3, length 28\n13:54:53.481263 ARP, Request who-has 10.0.20.210 tell 10.0.20.3, length 28\n13:54:53.481263 ARP, Request who-has 10.0.20.211 tell 10.0.20.3, length 28\n13:54:53.481264 ARP, Request who-has 10.0.20.213 tell 10.0.20.3, length 28\n13:54:53.481265 ARP, Request who-has 10.0.20.214 tell 10.0.20.3, length 28\n13:54:53.481265 ARP, Request who-has 10.0.20.216 tell 10.0.20.3, length 28\n13:54:53.481266 ARP, Request who-has 10.0.20.217 tell 10.0.20.3, length 28\n13:54:53.481266 ARP, Request who-has 10.0.20.219 tell 10.0.20.3, length 28\n13:54:53.481267 ARP, Request who-has 10.0.20.220 tell 10.0.20.3, length 28\n13:54:53.481268 ARP, Request who-has 10.0.20.222 tell 10.0.20.3, length 28\n13:54:53.481268 ARP, Request who-has 10.0.20.225 tell 10.0.20.3, length 28\n13:54:53.481269 ARP, Request who-has 10.0.20.228 tell 10.0.20.3, length 28\n13:54:53.481270 ARP, Request who-has 10.0.20.233 tell 10.0.20.3, length 28\n13:54:53.481271 ARP, Request who-has 10.0.20.246 tell 10.0.20.3, length 28\n13:54:53.481271 ARP, Request who-has 10.0.20.247 tell 10.0.20.3, length 28\n13:54:53.481272 ARP, Request who-has 10.0.20.249 tell 10.0.20.3, length 28\n13:54:53.481273 ARP, Request who-has 10.0.20.250 tell 10.0.20.3, length 28\n13:54:53.481273 ARP, Request who-has 10.0.20.251 tell 10.0.20.3, length 28\n13:54:53.481274 ARP, Request who-has 10.0.20.252 tell 10.0.20.3, length 28\n13:54:53.481274 ARP, Request who-has 10.0.20.253 tell 10.0.20.3, length 28\n13:54:53.481275 ARP, Request who-has 10.0.20.254 tell 10.0.20.3, length 28\n13:54:53.481276 ARP, Request who-has 10.0.20.0 tell 10.0.20.3, length 28\n13:54:53.481276 ARP, Request who-has 10.0.20.68 tell 10.0.20.3, length 28\n13:54:53.481277 ARP, Request who-has 10.0.20.69 tell 10.0.20.3, length 28\n13:54:53.481278 ARP, Request who-has 10.0.20.114 tell 10.0.20.3, length 28\n13:54:53.481278 ARP, Request who-has 10.0.20.118 tell 10.0.20.3, length 28\n13:54:53.481279 ARP, Request who-has 10.0.20.122 tell 10.0.20.3, length 28\n13:54:53.481280 ARP, Request who-has 10.0.20.128 tell 10.0.20.3, length 28\n13:54:53.481280 ARP, Request who-has 10.0.20.129 tell 10.0.20.3, length 28\n13:54:53.481281 ARP, Request who-has 10.0.20.135 tell 10.0.20.3, length 28\n13:54:53.481281 ARP, Request who-has 10.0.20.136 tell 10.0.20.3, length 28\n13:54:53.481282 ARP, Request who-has 10.0.20.153 tell 10.0.20.3, length 28\n13:54:53.577103 ARP, Request who-has 10.0.20.239 tell 10.0.20.3, length 28\n13:54:53.577104 ARP, Request who-has 10.0.20.194 tell 10.0.20.3, length 28\n13:54:53.577105 ARP, Request who-has 10.0.20.197 tell 10.0.20.3, length 28\n13:54:53.577105 ARP, Request who-has 10.0.20.198 tell 10.0.20.3, length 28\n13:54:53.577106 ARP, Request who-has 10.0.20.201 tell 10.0.20.3, length 28\n13:54:53.577106 ARP, Request who-has 10.0.20.202 tell 10.0.20.3, length 28\n13:54:53.577107 ARP, Request who-has 10.0.20.208 tell 10.0.20.3, length 28\n13:54:53.577108 ARP, Request who-has 10.0.20.209 tell 10.0.20.3, length 28\n13:54:53.672917 ARP, Request who-has 10.0.20.186 tell 10.0.20.3, length 28\n13:54:53.672919 ARP, Request who-has 10.0.20.189 tell 10.0.20.3, length 28\n13:54:53.672920 ARP, Request who-has 10.0.20.192 tell 10.0.20.3, length 28\n13:54:53.672920 ARP, Request who-has 10.0.20.195 tell 10.0.20.3, length 28\n13:54:53.672921 ARP, Request who-has 10.0.20.185 tell 10.0.20.3, length 28\n13:54:53.672922 ARP, Request who-has 10.0.20.188 tell 10.0.20.3, length 28\n13:54:53.672922 ARP, Request who-has 10.0.20.191 tell 10.0.20.3, length 28\n13:54:53.672923 ARP, Request who-has 10.0.20.193 tell 10.0.20.3, length 28\n13:54:53.672924 ARP, Request who-has 10.0.20.187 tell 10.0.20.3, length 28\n13:54:53.672924 ARP, Request who-has 10.0.20.190 tell 10.0.20.3, length 28\n13:54:53.672925 ARP, Request who-has 10.0.20.196 tell 10.0.20.3, length 28\n13:54:55.048845 ARP, Request who-has 10.0.20.3 tell 10.0.20.4, length 28\n13:54:55.048960 ARP, Reply 10.0.20.3 is-at 00:50:56:16:30:c7 (oui Unknown), length 28\n^C\n769 packets captured\n769 packets received by filter\n0 packets dropped by kernel\n</code></pre> <p>Another huge flurry of broadcast activity! My apologies for having you scroll through it all, but scanning such output, and even better\u2014analyzing what's going on\u2014is essential practice. Expect lots of output as part of these labs.</p> <p>So what did we see in all that? The network scan output reported that <code>host3</code> and <code>host4</code> were discovered; did you see where in the packet capture the ARP request and replies are? And speaking of packet captures, we left <code>tcpdump</code> running back on <code>host2</code>, so cancel that now and try to find any broadcasts involving <code>10.0.20.0/24</code>.</p> <p>Assuming everything was done correctly, there should be nothing from that second subnet, as shown in the (heavily shortened) output below. Very good.</p> <pre><code>(omitted)\n...\n13:54:05.768997 ARP, Request who-has 10.0.10.44 tell 10.0.10.1, length 28\n13:54:05.768997 ARP, Request who-has 10.0.10.67 tell 10.0.10.1, length 28\n13:54:05.897167 ARP, Request who-has 10.0.10.192 tell 10.0.10.1, length 28\n13:54:05.897170 ARP, Request who-has 10.0.10.201 tell 10.0.10.1, length 28\n13:54:05.897171 ARP, Request who-has 10.0.10.203 tell 10.0.10.1, length 28\n13:54:05.897171 ARP, Request who-has 10.0.10.90 tell 10.0.10.1, length 28\n13:54:05.993145 ARP, Request who-has 10.0.10.248 tell 10.0.10.1, length 28\n13:54:07.432845 ARP, Request who-has 10.0.10.1 tell 10.0.10.2, length 28\n13:54:07.432890 ARP, Request who-has 10.0.10.2 tell 10.0.10.1, length 28\n13:54:07.432893 ARP, Reply 10.0.10.2 is-at 00:50:56:ad:0e:33 (oui Unknown), length 28\n13:54:07.432898 ARP, Reply 10.0.10.1 is-at 00:50:56:94:55:70 (oui Unknown), length 28\n^C\n769 packets captured\n769 packets received by filter\n0 packets dropped by kernel\n</code></pre>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/exploring-subnets-and-vlans-in-proxmox/#conclusion-and-next-lab","title":"Conclusion and Next Lab","text":"<p>So there you have it: use VLANs around your subnets to maintain full control over your broadcast domains and take advantage of all the other benefits of VLANs that I briefly mentioned in the beginning, which we'll dig into in new labs.</p> <p>Now isolating subnets against unwanted broadcast traffic is great, but what about unicast, multicast, or even anycast traffic that needs to be able to reach across subnets? It's time to bring in Layer 3 and the role of routing to enable subnets to communicate and full networks to function. But in order to do that, we'll need to add a router to our lab.</p> <p>In the next lab, Installing VyOS on Proxmox, we'll learn how to install VyOS, a fantastic opensource network operating system (NOS), on Proxmox so we can use it as our router and firewall in future labs.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/exploring-subnets-broadcast-domains-and-bridges-in-proxmox/","title":"Exploring Subnets, Broadcast Domains, and Bridges in Proxmox","text":"<p>Based on our progress in the last lab, Connecting and Configuring Network Hosts in Proxmox, we know that our four hosts are somehow able to communicate within their subnet. But how exactly are the hosts connecting?</p> <p>Recall that each host is configured with a network device connected to the <code>vmbr1</code> bridge and assigned an IPv4 address in the <code>10.0.1.0/24</code> subnet. These two factors are the key to understanding what is happening behind the scenes.</p> <p>In this lab, we're going to begin exploring the concepts of subnets, broadcasting domains, and bridges to allow our hosts to communicate (or not, in some cases). Along the way, we'll see how these fundamental concepts lay the foundation for us to build increasingly complex labs.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/exploring-subnets-broadcast-domains-and-bridges-in-proxmox/#step-1-examining-the-state-of-our-network-hosts","title":"Step 1: Examining the State of Our Network Hosts","text":"<p>The first thing we'll look at is the \"state\" of our network hosts. When <code>host1</code> sent <code>ping</code> requests and an <code>nmap</code> scan to the other hosts, and received responses, it created records of how to reach them. But how did it find them?</p> <p>Remember the Address Resolution Protocol (ARP)? In IPv4, ARP is the first point of contact between hosts on the same subnet. Because <code>host1</code> has already made contact with each of the other hosts, it should have ARP records accessible that map each host's IPv4 address with its MAC address, which is what is actually used to communicate here on Layer 2.</p> <p>When hosts are restarted, however, the ARP cache is flushed, so let's start out with a clean ARP cache here, too, and populate it again so you can visibly see what's happening. First flush <code>host1</code>'s ARP cache:</p> <pre><code>ip neighbor flush dev eth0\n</code></pre> <p>Then perform the <code>nmap</code> network scan again:</p> <pre><code>nmap -sn 10.0.1.0/24\n</code></pre> <p>which should produce something similar to the following output:</p> <pre><code>Starting Nmap 7.80 ( https://nmap.org ) at 2023-06-21 19:07 UTC\nNmap scan report for 10.0.1.1\nHost is up (0.00048s latency).\nNmap scan report for 10.0.1.2\nHost is up (0.00044s latency).\nNmap scan report for 10.0.1.3\nHost is up (0.00022s latency).\nNmap scan report for 10.0.1.4\nHost is up (0.00013s latency).\nNmap done: 256 IP addresses (4 hosts up) scanned in 16.61 seconds\n</code></pre> <p>Now that we have a fresh network scan, let's look at <code>host1</code>'s ARP cache using the <code>ip</code> tool, part of the <code>iproute2</code> suite of tools we'll be using regularly in our labs:</p> <pre><code>ip neighbor\n</code></pre> <p>which should output the following:</p> <pre><code>10.0.1.3 dev eth0 lladdr 00:50:56:16:30:c7 REACHABLE\n10.0.1.4 dev eth0 lladdr 00:50:56:ad:24:4a REACHABLE\n10.0.1.2 dev eth0 lladdr 00:50:56:ad:0e:33 REACHABLE\n</code></pre> <p>Entries in a device's ARP cache are cached for a certain amount of time and then cleared out, with the \"soft\" limit being once 512 entries are reached and the \"hard\" limit being when there are 1,024 entries, at which point the cache is cleared.</p> <p>Check the ARP cache again:</p> <pre><code>ip neighbor\n</code></pre> <p>and you will see the status of the existing entries have changed, and now indicate they may be flushed if new MAC addresses continue actively populating the ARP cache:</p> <pre><code>10.0.1.3 dev eth0 lladdr 00:50:56:16:30:c7 STALE\n10.0.1.4 dev eth0 lladdr 00:50:56:ad:24:4a STALE\n10.0.1.2 dev eth0 lladdr 00:50:56:ad:0e:33 STALE\n</code></pre> <p>We won't go much deeper into the innerworkings of the ARP cache at this point, but we will study how the protocol works for neighbor discovery, so you can see what goes on when hosts attempt to reach each other and how it relates to the ARP cache.</p> <p>To do this, let's operate from <code>host2</code>, and observe its interactions with <code>host1</code> at the protocol level during a <code>ping</code> test. To begin, clear out <code>host2</code>'s ARP cache so we're starting fresh again:</p> <pre><code>sudo ip neighbor flush dev eth0\n</code></pre> <p>Return to <code>host1</code>, and begin a packet capture session using <code>tcpdump</code>, another crucial tool we'll be using constantly in our labs:</p> <pre><code>sudo tcpdump\n</code></pre> <p>Switch back to <code>host2</code>, where we're going to send <code>host1</code> a single <code>ping</code> request:</p> <pre><code>sudo ping -c 1 10.0.1.1\n</code></pre> <p>which should produce the following output:</p> <pre><code>PING 10.0.1.1 (10.0.1.1) 56(84) bytes of data.\n64 bytes from 10.0.1.1: icmp_seq=1 ttl=64 time=0.148 ms\n\n--- 10.0.1.1 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.148/0.148/0.148/0.000 ms\n</code></pre> <p>Here you can see that one request packet was sent from <code>host1</code> to <code>host2</code>, and a reply packet from <code>host2</code> to <code>host1</code> was also successfully transferred, resulting in no packet loss. The two hosts successfully communicated, which means each should now have a record of the other in its ARP cache. Let's check <code>host2</code>'s ARP cache:</p> <pre><code>ip neighbor\n</code></pre> <p>which shows a fresh entry for <code>host2</code>:</p> <pre><code>10.0.1.1 dev eth0 lladdr 00:50:56:94:55:70 REACHABLE\n</code></pre> <p>This means that not only was <code>host2</code>'s <code>ping</code> request successful, but that <code>host1</code> was properly captured in the ARP cache. The same is also true on the other side for <code>host1</code>. How did all of this happen exchanging just two packets? It didn't\u2014there were six packets involved.</p> <p>Let's return to <code>host1</code>, and cancel out (<code>CTRL</code>+<code>C</code> on Windows) of the packet capture. Your output should look very similar to this:</p> <pre><code>tcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n19:21:42.310066 ARP, Request who-has 10.0.1.1 tell 10.0.1.2, length 28\n19:21:42.310088 ARP, Reply 10.0.1.1 is-at 00:50:56:94:55:70 (oui Unknown), length 28\n19:21:42.310132 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 21255, seq 1, length 64\n19:21:42.310140 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 21255, seq 1, length 64\n19:21:47.343328 ARP, Request who-has 10.0.1.2 tell 10.0.1.1, length 28\n19:21:47.343360 ARP, Reply 10.0.1.2 is-at 00:50:56:ad:0e:33 (oui Unknown), length 28\n^C\n6 packets captured\n6 packets received by filter\n0 packets dropped by kernel\n</code></pre> <p>We'll dig deep into analyzing packets in future labs, but knowing the basics is an invaluable skill from the beginning of your learning to enhance your ability to observe how protocols work and troubleshoot network issues that inevitably arise. So let's start with the packet capture from <code>host2</code>.</p> <p>On line 2, you see that <code>tcpdump</code> was listening on <code>host1</code>'s <code>eth0</code> interface, which is connected to <code>host2</code> via bridge <code>vmbr1</code> (again, think \"switch\"). That's obvious for this lab, as there's only one interface, but always check on devices with multiple ports.</p> <p>The next two lines, 3 and 4, are ARP packets. The first, at 19:21:42.310066, is a broadcast request from the bridge <code>vmbr1</code> to all hosts on the subnet asking who is <code>10.0.1.1</code>, as <code>10.0.1.2</code> needs to know. The next packet, at 19:21:42.310088, is  the broadcast reply from <code>10.0.1.1</code> letting the bridge and <code>10.0.1.2</code> that it has that IP address, and its MAC address is <code>00:50:56:94:55:70</code> (we'll discuss OUIs later).</p> <p>The bridge, like any switch, then sends the 3rd packet, at 19:21:42.310132, which is the ICMP echo request (the formal term for the protocol used by <code>ping</code>), to <code>host1</code>, now knowing who it is. <code>host1</code> responds with the proper ICMP echo reply in the packet at 19:21:42.310140, addressed to <code>10.0.1.2</code>, but not sure which host that is.</p> <p>As a result, <code>host1</code> also utilizes ARP in packet 5, at 19:21:47.343328, broadcasting a request asking who has <code>10.0.1.2</code>, as <code>10.0.1.1</code> needs to know. The sixth packet, at 19:21:47.343360, is the broadcast reply from <code>10.0.1.2</code> letting the bridge and <code>10.0.1.2</code> that it has that IP address, and its MAC address is <code>00:50:56:ad:0e:33</code>.</p> <p>When the packet capture was stopped, it completed its job by reporting the number of packets captured, filtered, and dropped. We didn't have a filter defined, such as filtering out ARP packets, and no packets were dropped because of other transmission issues, so it was a successful job.</p> <p>One last point about ARP before we move on. Once <code>host1</code> and <code>host2</code> know each other, is ARP no longer necessary, since they can simply address each other directly during communication? As with anything in our labs, let's test it out.</p> <p>Just like before, put <code>host1</code> into a packet capture mode:</p> <pre><code>sudo tcpdump\n</code></pre> <p>and have <code>host2</code> ping <code>host1</code>. This time, however, have <code>host2</code> flood ping <code>host1</code> 25 times:</p> <pre><code>sudo ping -f -c 25 10.0.1.1\n</code></pre> <p>This should result in something like the following:</p> <pre><code>tcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n02:14:34.087556 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 1, length 64\n02:14:34.087576 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 1, length 64\n02:14:34.087644 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 2, length 64\n02:14:34.087647 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 2, length 64\n02:14:34.087702 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 3, length 64\n02:14:34.087705 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 3, length 64\n02:14:34.087740 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 4, length 64\n02:14:34.087743 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 4, length 64\n02:14:34.087769 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 5, length 64\n02:14:34.087772 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 5, length 64\n02:14:34.087797 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 6, length 64\n02:14:34.087800 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 6, length 64\n02:14:34.087845 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 7, length 64\n02:14:34.087848 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 7, length 64\n02:14:34.087897 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 8, length 64\n02:14:34.087900 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 8, length 64\n02:14:34.087933 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 9, length 64\n02:14:34.087936 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 9, length 64\n02:14:34.087962 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 10, length 64\n02:14:34.087964 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 10, length 64\n02:14:34.087997 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 11, length 64\n02:14:34.088000 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 11, length 64\n02:14:34.088033 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 12, length 64\n02:14:34.088036 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 12, length 64\n02:14:34.088078 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 13, length 64\n02:14:34.088081 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 13, length 64\n02:14:34.088105 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 14, length 64\n02:14:34.088108 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 14, length 64\n02:14:34.088141 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 15, length 64\n02:14:34.088144 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 15, length 64\n02:14:34.088178 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 16, length 64\n02:14:34.088180 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 16, length 64\n02:14:34.088221 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 17, length 64\n02:14:34.088224 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 17, length 64\n02:14:34.088255 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 18, length 64\n02:14:34.088257 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 18, length 64\n02:14:34.088295 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 19, length 64\n02:14:34.088298 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 19, length 64\n02:14:34.088329 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 20, length 64\n02:14:34.088331 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 20, length 64\n02:14:34.088373 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 21, length 64\n02:14:34.088375 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 21, length 64\n02:14:34.088414 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 22, length 64\n02:14:34.088417 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 22, length 64\n02:14:34.088448 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 23, length 64\n02:14:34.088450 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 23, length 64\n02:14:34.088475 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 24, length 64\n02:14:34.088478 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 24, length 64\n02:14:34.088502 IP 10.0.1.2 &gt; 10.0.1.1: ICMP echo request, id 9783, seq 25, length 64\n02:14:34.088504 IP 10.0.1.1 &gt; 10.0.1.2: ICMP echo reply, id 9783, seq 25, length 64\n02:14:39.183337 ARP, Request who-has 10.0.1.2 tell 10.0.1.1, length 28\n02:14:39.183380 ARP, Reply 10.0.1.2 is-at 00:50:56:ad:0e:33 (oui Unknown), length 28\n^C\n52 packets captured\n52 packets received by filter\n0 packets dropped by kernel\n</code></pre> <p>So the basic answer is that, for the most part, once hosts have cached their addresses in the ARP cache, they can communicate via unicast transmission. Every so often, however, ARP checks are sent to verify host addressing, thus the two extra packets in addition to the 25 pairs of ICMP request/reply pairs.</p> <p>Question</p> <p>Wondering how often ARP is part of the transmissions between known hosts? Modify the <code>ping</code> command above to use higher count flood pings and see what happens. If it's too many, does the kernel drop packets?</p> <p>As we saw with the ARP process, communication between hosts begins with broadcasts across their subnet to determine which hosts have which MAC and IP addresses. Let's move on and learn more about the role of subnets and broadcast domains.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/exploring-subnets-broadcast-domains-and-bridges-in-proxmox/#step-2-digging-into-ipv4-subnets-and-broadcast-domains","title":"Step 2: Digging into IPv4 Subnets and Broadcast Domains","text":"<p>Currently our network consists of four hosts all assigned IPv4 addresses in the same subnet of <code>10.0.1.0/24</code>, all contained in the same Layer 2 bridge <code>vmbr1</code>. Because they are in the same subnet, and on the same bridge, they should always be able to communicate. We've verifed this using both <code>ping</code> and <code>nmap</code> tests.</p> <p>Performing a packet capture, we've also seen what happens during communication at the protocol layer, with hosts broadcasting ARP requests/replies to all hosts when identifying each other. How does broadcasting work within a subnet?</p> <p>As we know, a subnet is a defined IP space assigned to hosts. So far, we have assigned the IPs</p> <ul> <li><code>10.0.1.1</code> to <code>host1</code></li> <li><code>10.0.1.2</code> to <code>host2</code></li> <li><code>10.0.1.3</code> to <code>host3</code></li> <li><code>10.0.1.4</code> to <code>host4</code></li> </ul> <p>Note</p> <p>You might have noticed that the last \"octet\" of each host matches the number in each host name. IP addressing is generally arbitrary, but we'll do things like this in some cases to help you follow along in these early labs.</p> <p>How many hosts can we have in this address space? You probably have seen many ways to calculate subnet sizes, but let's make it easy by using another handy tool on our Linux hosts: <code>ipcalc</code>.</p> <p>Ask <code>ipcalc</code> to calculate the details of our <code>10.0.1.0/24</code> subnet from <code>host1</code>:</p> <pre><code>ipcalc 10.0.1.0/24\n</code></pre> <p>which reports back the following:</p> <pre><code>Address:   10.0.1.0             00001010.00000000.00000001. 00000000\nNetmask:   255.255.255.0 = 24   11111111.11111111.11111111. 00000000\nWildcard:  0.0.0.255            00000000.00000000.00000000. 11111111\n=&gt;\nNetwork:   10.0.1.0/24          00001010.00000000.00000001. 00000000\nHostMin:   10.0.1.1             00001010.00000000.00000001. 00000001\nHostMax:   10.0.1.254           00001010.00000000.00000001. 11111110\nBroadcast: 10.0.1.255           00001010.00000000.00000001. 11111111\nHosts/Net: 254                   Class A, Private Internet\n</code></pre> <p><code>ipcalc</code> has provided us everything we need to know about our subnet in a very nice format. On the left is the name of each calculation, followed by the value in IPv4 integer octets, then the value again formatted as binary octets (for all IP-related data). The last line is a bit different, which we'll also cover below.</p> <ul> <li>The Address line shows the address that we submitted in the command</li> <li>The Netmask line shows the netmask that we submitted in the command, both in octet and CIDR format</li> <li>The Wildcard line shows the usable portion of the address within the subnet while everything in the first three octets remains fixed</li> <li>The Network line shows the network ID for this subnet, which you'll recall we used in our <code>nmap</code> network discovery scans</li> <li>The HostMin line shows the first address in this subnet available for host assignment; and we've assigned this value to <code>host1</code></li> <li>The HostMax line shows the last address in this subnet available for host assignment, and we haven't assigned this value to any host yet</li> <li>The Broadcast line shows the broadcast address in this subnet</li> <li>The Hosts/Net line shows the total number of hosts available in this subnet, which is 256 in our case</li> </ul> <p>The Network address cannot be assigned to a host, thus it cannot respond to <code>ping</code> requests, either. Let's verify this with a test from <code>host1</code>:</p> <pre><code>sudo ping -c 4 10.0.1.0\n</code></pre> <p>which results in no replies, as expected:</p> <pre><code>PING 10.0.1.0 (10.0.1.0) 56(84) bytes of data.\nFrom 10.0.1.1 icmp_seq=1 Destination Host Unreachable\nFrom 10.0.1.1 icmp_seq=2 Destination Host Unreachable\nFrom 10.0.1.1 icmp_seq=3 Destination Host Unreachable\nFrom 10.0.1.1 icmp_seq=4 Destination Host Unreachable\n\n--- 10.0.1.0 ping statistics ---\n4 packets transmitted, 0 received, +4 errors, 100% packet loss, time 3077ms\n</code></pre> <p>Tip</p> <p>Before we move on, bring up a detached console window for each host in Proxmox by clicking the <code>Console</code> button near the top-right of each guest view, and arrange them on your screen so they're all visible. Depending on your desktop, there are \"quarter tile\" features built-in, such as in Windows or KDE, or extentions available, such as Rectangle for macOS or WinTile for GNOME.</p> <p>We already know we can ping <code>10.0.1.1</code> through <code>10.0.1.4</code>, and anything up to <code>10.0.1.254</code> if we had hosts assigned to those IP addresses. But what about the broadcast address? Don't hosts use that for ARP request/replies? Let's try to ping it from <code>host1</code>:</p> <pre><code>sudo ping 10.0.1.255\n</code></pre> <p>and we get an interesting response:</p> <pre><code>ping: Do you want to ping broadcast? Then -b. If not, check your local firewall rules\n</code></pre> <p>The <code>ping</code> command is giving us a helpful tip: if we want to ping the broadcast address, we need to add the <code>-c</code> flag to the command. Let's try again from <code>host1</code>:</p> <pre><code>sudo ping -b 10.0.1.255\n</code></pre> <p>and now we get the following output:</p> <pre><code>WARNING: pinging broadcast address\nPING 10.0.1.255 (10.0.1.255) 56(84) bytes of data.\n</code></pre> <p>At this point <code>ping</code> is sending ICMP requests, but nothing is visible in the output like it would a normal ping test. How can we observe what's happening? Let's check our other hosts.</p> <p>On <code>host2</code>, <code>host3</code>, and <code>host4</code>, run the following command:</p> <pre><code>sudo tcpdump\n</code></pre> <p>Upon doing this, you should see something similar to the following:</p> <pre><code>01:15:56.463377 IP 10.0.1.1 &gt; 10.0.1.255: ICMP echo request, id 59888, seq 29, length 64\n01:15:57.487378 IP 10.0.1.1 &gt; 10.0.1.255: ICMP echo request, id 59888, seq 30, length 64\n01:15:58.515390 IP 10.0.1.1 &gt; 10.0.1.255: ICMP echo request, id 59888, seq 31, length 64\n01:15:59.535379 IP 10.0.1.1 &gt; 10.0.1.255: ICMP echo request, id 59888, seq 32, length 64\n01:16:00.559384 IP 10.0.1.1 &gt; 10.0.1.255: ICMP echo request, id 59888, seq 33, length 64\n</code></pre> <p>In these packet captures, you're seeing broadcast requests from <code>host1</code> at <code>10.0.1.1</code> to the broadcast address for this subnet at <code>10.0.1.255</code>. In this case, there are two key things to notice:</p> <ol> <li>Each packet is an ICMP echo request, with no ICMP echo reply being returned</li> <li>Within each host's console, the <code>seq</code> count matches, showing that every host is receiving the broadcasts simultaneously</li> </ol> <p>Return to <code>host1</code> and cancel the broadcast pings with <code>Ctrl</code>+<code>C</code>, and look at the results:</p> <pre><code>WARNING: pinging broadcast address\nPING 10.0.1.255 (10.0.1.255) 56(84) bytes of data.\n^C\n--- 10.0.1.255 ping statistics ---\n33 packets transmitted, 0 received, 100% packet loss, time 32757ms\n</code></pre> <p>In this case, 33 packets (here in my case, for example) were broadcasted, but <code>host1</code> believes none were received resulting in 100% packet loss. However, as we saw using <code>tcpdump</code>, the packets were delivered, but no protocol, such as ARP, was targeted for a reply.</p> <p>Note</p> <p>There are times where hosts may reply to broadcast pings using approaches such as <code>nmap --script broadcast-ping</code>, but it is not a reliable method depending on the host configuration.</p> <p>Now that we've experimented with broadcasts a bit, let's consider the broadcast domain itself. So far, we've observed that all hosts in the subnet can be reached via unicast and broadcast communication. Does this mean the subnet and broadcast domain are contiguous? Let's test this by making a change.</p> <p>From Proxmox's UI, change <code>host2</code>'s IPv4 address to <code>10.0.2.2/24</code>. By doing this, we create a second subnet within the same bridge <code>vmbr1</code>. Next, calculate <code>host2</code>'s subnet details using the <code>ipcalc</code> tool:</p> <pre><code>ipcalc 10.0.2.2/24\n</code></pre> <p>and we can see from the results that <code>host2</code> is now in a completely different subnet:</p> <pre><code>Address:   10.0.2.2             00001010.00000000.00000010. 00000010\nNetmask:   255.255.255.0 = 24   11111111.11111111.11111111. 00000000\nWildcard:  0.0.0.255            00000000.00000000.00000000. 11111111\n=&gt;\nNetwork:   10.0.2.0/24          00001010.00000000.00000010. 00000000\nHostMin:   10.0.2.1             00001010.00000000.00000010. 00000001\nHostMax:   10.0.2.254           00001010.00000000.00000010. 11111110\nBroadcast: 10.0.2.255           00001010.00000000.00000010. 11111111\nHosts/Net: 254                   Class A, Private Internet\n</code></pre> <ul> <li>The Network is now <code>10.0.2.0/24</code>, not <code>10.0.1.0/24</code></li> <li>The HostMin is now <code>10.0.2.1</code> and the HostMax is now <code>10.0.2.254</code></li> <li>The Broadcast is now <code>10.0.2.255</code></li> </ul> <p>Going back to <code>host1</code>, try to ping <code>host2</code>:</p> <pre><code>sudo ping 10.0.2.2\n</code></pre> <p>Doing this will issue an error:</p> <pre><code>ping: connect: Network is unreachable\n</code></pre> <p>Try the same from <code>host2</code>, and try to ping <code>host1</code>:</p> <pre><code>sudo ping 10.0.1.1\n</code></pre> <p>Again, the other subnet is unreachable:</p> <pre><code>ping: connect: Network is unreachable\n</code></pre> <p>It appears both subnets are isolated from each other, and for subnets on the same switch, this is generally what you want. But are they? Let's try a broadcast from <code>host1</code> to its subnet's broadcast address. First start the broadcasting from <code>host1:</code></p> <pre><code>sudo ping -b 10.0.1.255\n</code></pre> <p>Next, start a packet capture on <code>host2</code>:</p> <pre><code>sudo tcpdump\n</code></pre> <p>Did you end up with something similar to the output displayed below? What are you now seeing on <code>host2</code>? ICMP requests from <code>host1</code> on the other network? Apparently broadcast domains are larger in scope than subnets.</p> <pre><code>18:05:12.216806 IP 10.0.1.1 &gt; 10.0.1.255: ICMP echo request, id 2358, seq 1, length 64\n18:05:13.231371 IP 10.0.1.1 &gt; 10.0.1.255: ICMP echo request, id 2358, seq 2, length 64\n18:05:14.255380 IP 10.0.1.1 &gt; 10.0.1.255: ICMP echo request, id 2358, seq 3, length 64\n18:05:15.279377 IP 10.0.1.1 &gt; 10.0.1.255: ICMP echo request, id 2358, seq 4, length 64\n18:05:16.303372 IP 10.0.1.1 &gt; 10.0.1.255: ICMP echo request, id 2358, seq 5, length 64\n18:05:17.327376 IP 10.0.1.1 &gt; 10.0.1.255: ICMP echo request, id 2358, seq 6, length 64\n</code></pre> <p>It appears that hosts on different subnets cannot directly communicate with each other at Layer 3, but communication is still possible at Layer 2. This is because there is a difference between a Layer 3 broadcast address and a Layer 2 broadcast domain.</p> <p>These are the next questions we need to explore with our labs:</p> <ol> <li>How would we prevent communication between subnets at Layer 2</li> <li>How would we allow communication between subnets at Layer 3</li> </ol> <p>Before we wrap up this lab, let's consider the role of bridging in this situation.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/exploring-subnets-broadcast-domains-and-bridges-in-proxmox/#step-3-dipping-our-toes-into-bridging-details","title":"Step 3: Dipping Our Toes into Bridging Details","text":"<p>Recall the differences between hubs and switches. Hubs broadcast all frames out to all connected hosts, and not those destined for the broadcast address. All connected hosts are also in the same collision domain, causing packets to collide when hosts attempt to communicate at the same time.</p> <p>Switches, however, can enable unicast communication between hosts while limiting broadcasts to all hosts. Each port on a switch is a separate collision domain, as well, preventing packet transmissions among hosts from interfering with each other.</p> <p>What about our Linux bridge? In an earlier lab I stated bridges are basically switches, especially in eliminating the impact of collision domains, but they share other characteristics, too. Let's make some more changes to our network to experiment with the impact of bridges on subnets and broadcast domains.</p> <p>The first thing we need to do is create another Linux bridge on our Proxmox hypervisor:</p> <ol> <li>At the top of the Proxmox resource tree, select the Proxmox node your lab is running within and then select the <code>System</code> &gt; <code>Network</code> view of the content panel.</li> <li>At the top-left of the network device table, click the <code>Create</code> dropdown button and select <code>Linux Bridge</code>.</li> <li>In the dialog box, ensure the Name is <code>vmbr2</code> and Autostart is checked, then click the Create button.</li> <li>At the top of the network device table, click the Apply Configuration button and the new bridge will be enabled.</li> </ol> <p>Next, edit <code>host2</code>s network configuration in Proxmox by setting the <code>eth0</code> network device's bridge to <code>vmbr2</code>. Be sure to keep the IPv4 address the same, however.</p> <p>Now, again start pinging from <code>host1</code> to its broadcast address:</p> <pre><code>sudo ping -b 10.0.1.255\n</code></pre> <p>Then start another packet capture on <code>host2</code>:</p> <pre><code>sudo tcpdump\n</code></pre> <p>What happened this time? Let's look at the results of <code>host1</code>'s and <code>host2</code>'s output together:</p> <pre><code>WARNING: pinging broadcast address\nPING 10.0.1.255 (10.0.1.255) 56(84) bytes of data.\n^C\n--- 10.0.1.255 ping statistics ---\n145 packets transmitted, 0 received, 100% packet loss, time 147437ms\n</code></pre> <pre><code>listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n^C\n0 packets captured\n0 packets received by filter\n0 packets dropped by kernel\n</code></pre> <p>In this case, <code>host1</code> transmitted 145 packets, but <code>host2</code> captured none of them. Now Layer 2 communication is blocked by creating a second bridge, thus creating two broadcast domains. Bridging seems key to answering the question about preventing communication between subnets at Layer 2.</p> <p>Before we wrap up, let's perform a larger test of both unicast and broadcast communication. Like <code>host2</code>, change <code>host4</code>'s Bridge to <code>vmbr2</code>, but keep its IPv4 address <code>10.0.1.4/24</code>. Then arrange the console windows for all four hosts in a quarter tile layout so they're all visible.</p> <p>Start a packet capture again on <code>host2</code>:</p> <pre><code>sudo tcpdump\n</code></pre> <p>and start a ping test on <code>host4</code> to that subnet's broadcast address:</p> <pre><code>sudo ping -b -c 4 10.0.1.255\n</code></pre> <p>Next, start a packet capture on <code>host1</code>:</p> <pre><code>sudo tcpdump\n</code></pre> <p>and start a ping test on <code>host3</code>:</p> <pre><code>sudo ping -b -c 4 10.0.1.255\n</code></pre> <p>Let's review the results for each host, grouped by bridge.</p> <p><code>host3</code> sent four ICMP echo requests, which were detected (but not replied to) by <code>host1</code> within bridge <code>vmbr1</code>:</p> <pre><code>eron@host3:~$ sudo ping -b -c 4 10.0.1.255\nWARNING: pinging broadcast address\nPING 10.0.1.255 (10.0.1.255) 56(84) bytes of data.\n\n--- 10.0.1.255 ping statistics ---\n4 packets transmitted, 0 received, 100% packet loss, time 3072ms\n</code></pre> <pre><code>eron@host1:~$ sudo tcpdump\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n11:23:16.591449 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 54008, seq 1, length 64\n11:23:17.615374 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 54008, seq 2, length 64\n11:23:18.639371 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 54008, seq 3, length 64\n11:23:19.663375 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 54008, seq 4, length 64\n^C\n4 packets captured\n4 packets received by filter\n0 packets dropped by kernel\n</code></pre> <p>Just as above, <code>host4</code> sent four ICMP echo requests, which were detected (but not replied to) by <code>host2</code> within bridge <code>vmbr2</code>:</p> <pre><code>eron@host4:~$ sudo ping -b -c 4 10.0.1.255\nWARNING: pinging broadcast address\nPING 10.0.1.255 (10.0.1.255) 56(84) bytes of data.\n\n--- 10.0.1.255 ping statistics ---\n4 packets transmitted, 0 received, 100% packet loss, time 3064ms\n</code></pre> <pre><code>eron@host2:~$ sudo tcpdump\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n11:22:47.191030 IP 10.0.1.4 &gt; 10.0.1.255: ICMP echo request, id 27961, seq 1, length 64\n11:22:48.207371 IP 10.0.1.4 &gt; 10.0.1.255: ICMP echo request, id 27961, seq 2, length 64\n11:22:49.231376 IP 10.0.1.4 &gt; 10.0.1.255: ICMP echo request, id 27961, seq 3, length 64\n11:22:50.255377 IP 10.0.1.4 &gt; 10.0.1.255: ICMP echo request, id 27961, seq 4, length 64\n^C\n4 packets captured\n4 packets received by filter\n0 packets dropped by kernel\n</code></pre> <p>Within bridge <code>vmbr1</code>, the two hosts were in the same subnet, and the broadcasts were captured as expected. Within bridge <code>vmbr2</code>, the two hosts were not in the same subnet, but the broadcasts were still captured.</p> <p>Remember that this was also expected, because regardless of the subnet, broadcasts are being transmitted across the entire Layer 2 broadcast domain, which right now is the entire bridge.</p> <p>So we see that bridges can isolate broadcast domains, but only when there is one subnet per bridge. But that essentially means having to restrict an entire switch to only one subnet, which is unrealistic in nearly any network with multiple subnets. In a physical network, this would require a switch for each subnet.</p> <p>As our final experiment, let's move <code>host2</code> and <code>host4</code> back to <code>vmbr1</code>, and change <code>host4</code>'s IPv4 address to <code>10.0.2.4/24</code>, so it's in the same subnet as <code>host2</code>. With those configuration changes made, we now how two subnets, each with two hosts, on one bridge. What happens when they start communicating?</p> <p>Start a packet capture on <code>host1</code>:</p> <pre><code>sudo tcpdump\n</code></pre> <p>and start a ping test to <code>10.0.1.0/24</code> network's broadcast address from <code>host3</code>:</p> <pre><code>sudo ping -b -c 4 10.0.1.255\n</code></pre> <p>Next start a packet capture on <code>host2</code>:</p> <pre><code>sudo tcpdump\n</code></pre> <p>and start a ping test to <code>10.0.2.0/24</code> network's broadcast address from <code>host4</code>:</p> <pre><code>sudo ping -b -c 4 10.0.2.255\n</code></pre> <p>Again we'll review the results for each host, grouped by bridge.</p> <p><code>host3</code> sent four ICMP echo requests, which were detected (but not replied to) by <code>host1</code> within bridge <code>vmbr1</code>:</p> <pre><code>eron@host3:~$ sudo ping -b -c 4 10.0.1.255\nWARNING: pinging broadcast address\nPING 10.0.1.255 (10.0.1.255) 56(84) bytes of data.\n\n--- 10.0.1.255 ping statistics ---\n4 packets transmitted, 0 received, 100% packet loss, time 3065ms\n</code></pre> <pre><code>eron@host1:~$ sudo tcpdump\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n15:07:12.790897 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 57207, seq 1, length 64\n15:07:13.807380 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 57207, seq 2, length 64\n15:07:14.831382 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 57207, seq 3, length 64\n15:07:15.855384 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 57207, seq 4, length 64\n15:07:44.485779 IP 10.0.2.4 &gt; 10.0.2.255: ICMP echo request, id 7169, seq 1, length 64\n15:07:45.487366 IP 10.0.2.4 &gt; 10.0.2.255: ICMP echo request, id 7169, seq 2, length 64\n15:07:46.511402 IP 10.0.2.4 &gt; 10.0.2.255: ICMP echo request, id 7169, seq 3, length 64\n15:07:47.535375 IP 10.0.2.4 &gt; 10.0.2.255: ICMP echo request, id 7169, seq 4, length 64\n^C\n8 packets captured\n8 packets received by filter\n0 packets dropped by kernel\n</code></pre> <p>But wait, there are four broadcast packets from <code>host4</code> here as well! All <code>host4</code> did was send four ICMP echo requests on its own subnet, which were detected (but not replied to) by <code>host2</code> within bridge <code>vmbr1</code>:</p> <pre><code>eron@host4:~$ sudo ping -b -c 4 10.0.2.255\nWARNING: pinging broadcast address\nPING 10.0.2.255 (10.0.2.255) 56(84) bytes of data.\n\n--- 10.0.2.255 ping statistics ---\n4 packets transmitted, 0 received, 100% packet loss, time 3050ms\n</code></pre> <pre><code>eron@host2:~$ sudo tcpdump\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n15:07:12.790892 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 57207, seq 1, length 64\n15:07:13.807374 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 57207, seq 2, length 64\n15:07:14.831376 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 57207, seq 3, length 64\n15:07:15.855379 IP 10.0.1.3 &gt; 10.0.1.255: ICMP echo request, id 57207, seq 4, length 64\n15:07:44.485776 IP 10.0.2.4 &gt; 10.0.2.255: ICMP echo request, id 7169, seq 1, length 64\n15:07:45.487364 IP 10.0.2.4 &gt; 10.0.2.255: ICMP echo request, id 7169, seq 2, length 64\n15:07:46.511399 IP 10.0.2.4 &gt; 10.0.2.255: ICMP echo request, id 7169, seq 3, length 64\n15:07:47.535372 IP 10.0.2.4 &gt; 10.0.2.255: ICMP echo request, id 7169, seq 4, length 64\n^C\n8 packets captured\n8 packets received by filter\n0 packets dropped by kernel\n</code></pre> <p>The packet capture from <code>host2</code> shows packets from <code>host4</code> along with those from <code>host3</code> as well! So now we really see the problem: how can we restrict broadcast domains within the same bridge or switch containing multiple subnets?</p> <p>We'll figure that out in the next lab, Exploring Subnets and VLANs in Proxmox. Great work today; I know this was a long lab, but hopefully these concepts are starting to make sense.</p>","tags":["Proxmox","Linux"]},{"location":"labs/networks/general/initial-proxmox-network-configuration/","title":"Initial Proxmox Network Configuration","text":"<p>In this lab we'll review Proxmox's initial configuration and discuss some preparatory changes to support our lab activities.</p> <p>Warning</p> <p>Be sure to review the following recommendations before beginning the labs to ensure your setup is configured properly and help you avoid conflicts or downtime on your home LAN.</p>"},{"location":"labs/networks/general/initial-proxmox-network-configuration/#default-network-configuration","title":"Default Network Configuration","text":"<p>Out of the box, Proxmox detects all compatible network interface cards (NICs) on each node and adds them to the node's list of network devices in the \"System\" &gt; \"Network\" panel. The Proxmox installation will also create a Linux Bridge called <code>vmbr0</code> that maps to one of the hardware NICs for LAN connectivity.</p> <p>This bridge will be configured with IP addressing for the node itself and the default gateway for the LAN the node is connected to. The IP addresses for <code>vmbr0</code> will be used for accessing the node via the Web and SSH, and also will provide connectivity for clustering with other nodes.</p> <p>I recommend considering <code>vmbr0</code> to be the node's management network, and restricted for these roles. Depending on the setup, it may also be used for LAN access for production VMs and CTs (often on separate VLANs).</p> <p>For our labs, however, we'll create separate bridges that allow us to create self-contained networks, and eventually we'll implement functionality to extend our networks to additional hardware and the Internet.</p>"},{"location":"labs/networks/general/initial-proxmox-network-configuration/#lab-preparation-changes","title":"Lab Preparation Changes","text":""},{"location":"labs/networks/general/initial-proxmox-network-configuration/#ip-addressing-recommendations","title":"IP Addressing Recommendations","text":"<p>There are many ways to plan out your home lab's IP addressing, and as your skills improve your preferences will evolve along with your lab's needs. However, at the very least I strongly suggest having a separate address space from your home LAN and isolate your home lab activities from taking down the LAN that others in your home depend on.</p> <p>My personal IPv4 address plan is the following:</p> <ul> <li><code>192.168.0.0/16</code> for my home's LAN, split into separate subnets for secure Wi-Fi, guest Wi-Fi, IoT, etc.</li> <li><code>172.16.0.0/12</code> for my home's management network, also split into separate subnets for network equipment, server/storage equipment, security devices, production VMs/CTs, etc.</li> <li><code>10.0.0.0/8</code> for my home lab subnets, as necessary. We'll be using this address space here in the documentation, as well, so you're aware.</li> <li>In addition to the <code>10/8</code> prefix, we'll also be using some non-RFC 1918 prefixes reserved for private use to represent public address space in our labs. This includes the TEST-NET prefixes <code>192.0.2.0/24</code>, <code>198.51.100.0/24</code>, <code>203.0.113.0/24</code>, and the non-allocated prefix <code>128.66.0.0/16</code>.</li> </ul> <p>Not included yet is a IPv6 address plan, which should also be considered an essential discipline for network training. Mastering IPv6 through my home labs is a personal priority of mine, so stay tuned for more on that.</p>"},{"location":"labs/networks/general/initial-proxmox-network-configuration/#hardware-recommendations","title":"Hardware Recommendations","text":"<p>The device used to install Proxmox should have at least two NICs:</p> <ul> <li>One for <code>vmbr0</code> and the management network roles described above</li> <li>Another for lab VM access to your LAN</li> </ul> <p>Ideally, it would be better to have at least four NICs:</p> <ul> <li>One for <code>vmbr0</code></li> <li>One for cluster communication</li> <li>One for production VMs and CTs to access your LAN</li> <li>One for lab VMs and CTs to access your LAN</li> </ul> <p>We'll expand on this setup in future labs, as well as upgrading your node with the necessary hardware, but for now we'll focus on a two NIC configuration.</p>"},{"location":"labs/networks/general/initial-proxmox-network-configuration/#custom-mac-address-prefix","title":"Custom MAC Address Prefix","text":"<p>By default, Proxmox uses unregistered and randomized MAC addresses for the virtual network devices for VMs and CTs, which are listed within the \"Hardware\" view for VMs and the \"Network\" view for CTs. There are called Locally Administered Addresses (LAAs).</p> <p>Used for server VMs and CTs, this doesn't seem to be an issue. However, I ran into and issue when installing VyOS on Proxmox where it wouldn't add all detected interfaces to the configuration because the the MAC addresses weren't Universally Administered Address (UAAs). It may also affect other network operating systems (NOSs) as well, but I haven't yet verified that.</p> <p>It won't prevent you from configuring and using VyOS on Proxmox, but it can help new users to have this functionality in place and the fix is easy: instead of using LAA MAC addresses, set a custom prefix that Promox will use as a UAA OUI for all network devices.</p> <p>To do this, click on the \"Datacenter\" your node is in, then click on \"Options\" and edit the \"MAC address prefix\" to be <code>00:50:56</code>. This is the VMWare OUI used for network devices within their virtualization platforms, and VyOS (or any other OS) should properly recognize it.</p> <p>From now on all virtual network devices will be issued a UAA MAC address with the <code>00:50:56</code> OUI and a random suffix. For some labs I may have you configure specific MAC addresses for lab tasks, so maintaining consistency will be helpful.</p>"},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/","title":"Initial Junos OS Configuration on a vSRX","text":"<p>After installing vSRX in a VM, we\u2019re ready to perform the initial configuration. Log in as user <code>root</code> (no password required), and enter configuration mode with <code>configure</code>.</p>","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#set-root-password","title":"Set root password","text":"<p>Before making any changes to the factory-installed configuration, you will need to first set a password for the root user. Let\u2019s do that before making any other changes:</p> <ol> <li><code>set system root-authentication plain-text-password</code></li> <li>Enter secure password twice when prompted</li> <li><code>commit and-quit</code></li> <li><code>quit</code></li> <li>Log back into Junos OS using the new account credentials to verify</li> </ol>","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#create-a-non-root-user","title":"Create a non-root user","text":"<p>Using the root account for device operation is almost never a good idea, so next let\u2019s create a non-root user with all privileges using the local database:</p> <ol> <li><code>set system login user &lt;user_name&gt; full-name \"&lt;full_name&gt;\"</code></li> <li><code>set system login user &lt;user_name&gt; class super-user</code></li> <li><code>set system login user &lt;user_name&gt; authentication plain-text-password</code></li> <li>Enter secure password twice when prompted</li> <li><code>commit and-quit</code></li> <li><code>quit</code></li> <li>Log back into Junos OS using the new account credentials to verify</li> <li>Re-enter configuration mode with <code>configure</code></li> </ol>","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#set-management-interface","title":"Set management interface","text":"<p>Every network device should have a management interface, ideally out-band-band from the rest of the interfaces, to securely operate the device. For the vSRX, it\u2019s the <code>fxp0</code> interface. For now, let\u2019s have it get an address via DCHP so we can use that address to access the device from here via SSH:</p> <ol> <li><code>set interfaces fxp0 unit 0 family inet dhcp</code></li> </ol>","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#enable-ssh-access","title":"Enable SSH access","text":"<p>Instead of accessing vSRX using a console connection or hypervisor virtual terminal, we can now use SSH through the management interface. Enable it with:</p> <ol> <li><code>set system services ssh</code></li> </ol>","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#set-host-name","title":"Set host name","text":"","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#set-domain-name","title":"Set domain name","text":"","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#set-dns-servers","title":"Set DNS servers","text":"","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#set-static-default-route-with-no-readvertise-option","title":"Set static default route with no-readvertise option","text":"<p>You should be as specific about the route as possible. You can also use the no-readvertise option for the static route used for management traffic. This marks the route ineligible for readvertisement through routing policy.</p>","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#set-time-zone","title":"Set time zone","text":"","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#set-ntp-servers","title":"Set NTP servers","text":"","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#set-rescue-configuration","title":"Set rescue configuration","text":"<p>You can configure a single logical unit for the lo0 interface for each routing instance, and each logical unit associated with a given routing instance can have multiple configured IP addresses.</p>","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#commit-changes","title":"Commit changes","text":"<p><code>commit comment \"Initial configuration performed\"</code></p>","tags":["Juniper"]},{"location":"labs/networks/juniper/initial-junos-os-configuration-best-practices/#verification","title":"Verification","text":"<ul> <li> <p>Using the Proxmox console, check the management network interface IP address with <code>run show dhcp client binding fxp0.0</code>.</p> <p><code>eron@vsrx-r1&gt; show dhcp client binding fxp0.0 IP address        Hardware address   Expires     State      Interface 172.16.0.110      a2:2f:9d:45:aa:2a  263         BOUND      fxp0.0</code></p> </li> <li> <p>Using the IP address above, log into the router with the new non-root user via an SSH client with <code>ssh &lt;user_name&gt;@&lt;ip_address&gt;</code>.</p> <p><code>PS C:\\Users\\eronl&gt; ssh eron@172.16.0.110 Password: Last login: Tue Jun  6 02:16:18 2023 from 172.16.0.53 --- JUNOS 20.3R1.8 Kernel 64-bit XEN JNPR-11.0-20200908.87c9d89_buil eron@vsrx-r1&gt;</code></p> </li> </ul>","tags":["Juniper"]},{"location":"labs/networks/juniper/installing-vsrx-on-proxmox/","title":"Installing Juniper vSRX on Proxmox","text":"","tags":["Juniper","Proxmox"]},{"location":"labs/networks/juniper/installing-vsrx-on-proxmox/#step-1-download-a-vsrx-image-from-juniper","title":"Step 1: Download a vSRX Image From Juniper","text":"<p>Unless you have a licensed copy of vSRX, you will need to download the trial version for home lab use from Juniper's website. And in order to do that, you must have an account and authorization to download trial software.</p> <p>If you already can do this, skip ahead to step two. Otherwise, perform the following tasks:</p> <ul> <li>Log into or register for your Juniper account.</li> <li>Request access to the trial version of vSRX by following these instructions.</li> <li>Once your account is authorized by JTAC, download the trial version of vSRX here. For Proxmox VE, choose the vSRX KVM Appliance.</li> <li>Download and save your trial license, but just hold onto this for now. It shouldn't be necessary for most functionality.</li> </ul>","tags":["Juniper","Proxmox"]},{"location":"labs/networks/juniper/installing-vsrx-on-proxmox/#step-2-upload-the-vsrx-image-to-a-proxmox-ve","title":"Step 2: Upload the vSRX Image to a Proxmox VE","text":"<p>Next you'll need to upload the vSRX trial image to a Proxmox VE machine in preparation for installation. In this case I did <code>scp junos-vsrx3-x86-64-20.3R1.8.qcow2 &lt;user&gt;@&lt;pve&gt;:~</code> to copy the file to my Proxmox VE user's home folder, which is good enough for this step.</p> <p>Verify the file was successfully transferred, and we'll revisit this again after the next step.</p>","tags":["Juniper","Proxmox"]},{"location":"labs/networks/juniper/installing-vsrx-on-proxmox/#step-3-create-the-virtual-machine","title":"Step 3: Create the Virtual Machine","text":"<p>vSRX will run as a VM on Proxmox VE, but it's not ready out of the box. You'll first have to create the VM configuration within Proxmox VE, including naming and hardware settings.</p> <p>The minimum requirements for running vSRX in KVM are</p> <ul> <li>2 CPUs</li> <li>4 GB RAM</li> <li>20 GB storage</li> </ul> <p><code>qm importdisk &lt;vm-id&gt; junos-vsrx3-x86-64-20.3R1.8.qcow2 local-lvm</code></p>","tags":["Juniper","Proxmox"]},{"location":"labs/networks/juniper/installing-vsrx-on-proxmox/#step-4-verify-vm-bootup-and-initial-login","title":"Step 4: Verify VM Bootup and Initial Login","text":"","tags":["Juniper","Proxmox"]},{"location":"labs/networks/mikrotik/installing-routeros-on-proxmox/","title":"Installing RouterOS on Proxmox","text":""},{"location":"labs/networks/mikrotik/installing-routeros-on-proxmox/#introduction","title":"Introduction","text":""},{"location":"labs/networks/mikrotik/installing-routeros-on-proxmox/#step-1-create-a-mikrotik-account","title":"Step 1: Create a MikroTik Account","text":""},{"location":"labs/networks/mikrotik/installing-routeros-on-proxmox/#step-2-adding-routeros-as-an-image-in-proxmox","title":"Step 2: Adding RouterOS as an Image in Proxmox","text":""},{"location":"labs/networks/mikrotik/installing-routeros-on-proxmox/#step-3-creating-and-configuring-a-vm-for-routeros","title":"Step 3: Creating and Configuring a VM for RouterOS","text":""},{"location":"labs/networks/mikrotik/installing-routeros-on-proxmox/#step-3-installing-the-routeros-image-on-a-vm","title":"Step 3: Installing the RouterOS Image on a VM","text":""},{"location":"labs/networks/mikrotik/installing-routeros-on-proxmox/#conclusion-and-next-lab","title":"Conclusion and Next Lab","text":""},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/","title":"Initial VyOS Configuration Best Practices","text":"<p>After installing VyOS in a VM, we\u2019re ready to perform the initial configuration.</p> <p>Log in as the user <code>vyos</code> and the password you created during installation (default is <code>vyos</code>), and enter configuration mode with <code>configure</code>.</p>","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#create-a-unique-admin-user","title":"Create a Unique Admin User","text":"<p>Using the default account for device operation is almost never a good idea, so let\u2019s create a new admin user with all privileges and remove the <code>vyos</code> account.</p> <ol> <li><code>set system login user &lt;user_name&gt; full-name \"&lt;full_name&gt;\"</code></li> <li><code>set system login user &lt;user_name&gt; class super-user</code></li> <li><code>set system login user &lt;user_name&gt; authentication plain-text-password</code></li> <li>Enter secure password twice when prompted</li> <li><code>commit</code></li> <li><code>quit</code></li> <li>Log back into VyOS using the new account credentials to verify</li> <li>Re-enter configuration mode with <code>configure</code></li> </ol>","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#configure-a-management-interface","title":"Configure a Management Interface","text":"<p>Every network device should have a management interface, ideally out-band-band from the rest of the interfaces, to securely operate the device. For VyOS, let's standardize on the <code>eth0</code> interface and have it get an address via DCHP so we can use that address to access the device via SSH.</p> <pre><code>set interfaces fxp0 unit 0 family inet dhcp\n</code></pre>","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#enable-ssh-access","title":"Enable SSH access","text":"<p>Instead of accessing vSRX using a console connection or hypervisor virtual terminal, we can now use SSH through the management interface. Enable it with:</p> <ol> <li><code>set system services ssh</code></li> </ol>","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#set-host-name","title":"Set host name","text":"","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#set-domain-name","title":"Set domain name","text":"","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#set-dns-servers","title":"Set DNS servers","text":"","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#set-static-default-route-with-no-readvertise-option","title":"Set static default route with no-readvertise option","text":"<p>You should be as specific about the route as possible. You can also use the no-readvertise option for the static route used for management traffic. This marks the route ineligible for readvertisement through routing policy.</p>","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#set-time-zone","title":"Set time zone","text":"","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#set-ntp-servers","title":"Set NTP servers","text":"","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#set-rescue-configuration","title":"Set rescue configuration","text":"<p>You can configure a single logical unit for the lo0 interface for each routing instance, and each logical unit associated with a given routing instance can have multiple configured IP addresses.</p>","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#commit-changes","title":"Commit changes","text":"<p><code>commit comment \"Initial configuration performed\"</code></p>","tags":["VyOS"]},{"location":"labs/networks/vyos/initial-vyos-configuration-best-practices/#verification","title":"Verification","text":"<ul> <li> <p>Using the Proxmox console, check the management network interface IP address with <code>run show dhcp client binding fxp0.0</code>.</p> <p><code>eron@vsrx-r1&gt; show dhcp client binding fxp0.0 IP address        Hardware address   Expires     State      Interface 172.16.0.110      a2:2f:9d:45:aa:2a  263         BOUND      fxp0.0</code></p> </li> <li> <p>Using the IP address above, log into the router with the new non-root user via an SSH client with <code>ssh &lt;user_name&gt;@&lt;ip_address&gt;</code>.</p> <p><code>PS C:\\Users\\eronl&gt; ssh eron@172.16.0.110 Password: Last login: Tue Jun  6 02:16:18 2023 from 172.16.0.53 --- JUNOS 20.3R1.8 Kernel 64-bit XEN JNPR-11.0-20200908.87c9d89_buil eron@vsrx-r1&gt;</code></p> </li> </ul>","tags":["VyOS"]},{"location":"labs/networks/vyos/installing-vyos-on-proxmox/","title":"Installing VyOS on Proxmox","text":"","tags":["VyOS","Proxmox"]},{"location":"labs/networks/vyos/installing-vyos-on-proxmox/#introduction","title":"Introduction","text":"<p>To enable our subnets on Linux bridges to communicate within our labs across increasingly complex network topologies, we have to add Layer 3 and 4 capabilities to our setup. To do this, we're going incorporate VyOS into Proxmox and serve in this capacity.</p> <p>If you're not familiar with VyOS and why it's a fantastic platform to learn and use in your networks, check out this blog post where we cover what it is, its background and architecture, and its advantages for both practice labs and production networks.</p> <p>In this lab, we're going to cover the process to install a VyOS virtual machine (VM) in Proxmox and prepare it for use as a full-featured router/firewall/vpn in our networks.</p>","tags":["VyOS","Proxmox"]},{"location":"labs/networks/vyos/installing-vyos-on-proxmox/#step-1-adding-vyos-as-an-image-in-proxmox","title":"Step 1: Adding VyOS as an Image in Proxmox","text":"<p>To create a VM in Proxmox, you'll first need an \"image\" file of the software that will run as the operating system for your VM. This can come in different formats, but it often has a <code>.iso</code> file extension. Let's get the VyOS image we'll use for our router/firewall VMs.</p> <p>Go to https://vyos.io and look for the \"Download\" link in the main menu. Select \u201cFree Download\u201d from the dropdown menu, and look for the list item that says \u201cvyos-rolling-latest.iso.\u201d Instead of downloading it, however, just copy the link URL.</p> <p>Info</p> <p>A quick explanation on the VyOS release models, excerpted from the project's FAQs:</p> <p>VyOS is split into two branches: long term support and rolling release.</p> <ul> <li> <p>The rolling release branch (git branch \u201ccurrent\u201d) includes the latest code from maintainers and all contributions from community members are merged into it. It\u2019s meant for testing and home lab/non-critical router use and is not guaranteed to be stable.</p> </li> <li> <p>Long term support branches are periodically split from the current branch. They are stable, and only proven, strictly compatible changes are merged or backported into it. Use this for production networks.</p> </li> </ul> <p>For our home lab use, we will be using the rolling releases, and in a later video, we'll cover how to regularly update to the latest rolling release as new features become available.</p> <p>Go to the \u201clocal\u201d storage view of your Proxmox hypervisor and click on \"ISO Images\". Click on the \u201cDownload from URL\u201d button and paste the link URL we just copied into the \"URL\" field of the dialog box.</p> <p>Click the \u201cQuery URL\u201d button to verify the file exists and click the \u201cDownload\u201d button to save the latest VyOS rolling release ISO file locally on your hypervisor. Keep the file name the same.</p> <p>Whenever we need to create a new VyOS VM, we'll be able to easily use this local image already stored in Proxmox. Let's do that now.</p>","tags":["VyOS","Proxmox"]},{"location":"labs/networks/vyos/installing-vyos-on-proxmox/#step-2-creating-and-configuring-a-vm-for-vyos","title":"Step 2: Creating and Configuring a VM for VyOS","text":"<p>The next step is to create and configure the actual VM that VyOS will run within. For this we'll model the VM after a physical router device with five ports.</p> <p>On the top-right of the Proxmox UI, click the \u201cCreate VM\u201d button to set up a blank VM configuration. This will bring up a dialog box and walk you through the initial VM setup process:</p> <ul> <li> <p>On the \"General\" tab, name your VM <code>vyos-r1</code> in the \"Name\" field, then click the \"Next\" button.</p> </li> <li> <p>On the \"OS\" tab, select <code>Use CD/DVD disc image file (iso)</code> with \"Storage\" as <code>local</code> and \"ISO Image\" as <code>vyos-rolling-latest.iso.</code> Click the \"Next\" button.</p> </li> <li> <p>On the \"System\" tab, select <code>VirtIO SCSI single</code> for \"SCSI Controller\" if available (use default otherwise) and check the \"Qemu Agent\". Click the \"Next\" button.</p> </li> <li> <p>On the \"Disks\" tab, change \u201cDisk size (GiB)\u201d to <code>10</code>, and leave the rest as the defaults. Click the \"Next\" button.</p> </li> <li> <p>On the \"CPU\" tab, use <code>1</code> for the \"Sockets and Cores\" fields. Click the \"Next\" button.</p> </li> <li> <p>On the \"Memory\" tab, use <code>1024</code> for the \u201cMemory (MiB)\u201d field. Click the \"Next\" button.</p> </li> <li> <p>On the \"Network\" tab, ensure \u201cNo network device\u201d is unchecked, select <code>vmbr0</code> for Bridge, uncheck \"Firewall\", select <code>VirtIO (paravirtualized)</code> for \"Model\", and use <code>auto</code> for \"MAC address\". Click the \"Next\" button.</p> </li> <li> <p>On the \"Confirm\" tab, review all your settings and click the \"Finish\" button to close the dialog box. The VM is now created, but there's more configuration to complete.</p> </li> </ul> <p>Select the <code>vyos-r1</code> VM and open the \"Hardware\" configuration. A router isn\u2019t very useful with just one interface, so let\u2019s add four more. Within the hardware list, click the \"Add\" drop-down button and select \u201cNetwork Device.\u201d</p> <p>Using the same configuration as before on the \"Network\" tab above, create four additional network devices, so our router will have five total ports to work with.</p> <p>Well done; you've just modeled a real-world router as a VM!</p>","tags":["VyOS","Proxmox"]},{"location":"labs/networks/vyos/installing-vyos-on-proxmox/#step-3-installing-the-vyos-image-on-a-vm","title":"Step 3: Installing the VyOS Image on a VM","text":"<p>Now we\u2019re ready to install VyOS onto our VM. Click the \u201cStart\u201d button to power on the VM and boot up the VyOS installer. When VyOS is finished booting, enter the username <code>vyos</code> and password <code>vyos</code> to log in.</p> <p>The VyOS installer is also a live demo instance of a running router, but we want to get it installed in our VM. At the command prompt, type <code>install image</code> to begin the installation.</p> <p>The installation script will begin prompting you to for each step of the process. The options will be in parenthesis and separated with a slash, such as (Yes/No), and the default choice will also appear in square brackets, such as [Yes]. To accept the default choice, simply press the \"Enter\" key, or type out another option then press \"Enter\". At the first question prompt, press \"Enter\" to continue.</p> <p>The next prompt asks how to partition the VM drive used to store VyOS. Press \"Enter\" to accept the \"Auto\" method.</p> <p>There will only be one drive available, so press \"Enter\" to select this drive to install VyOS on. You will again be prompted to confirm any existing data on the drive could be destroyed. This time, type <code>Yes</code> and press \"Enter\" to continue.</p> <p>Next you will be asked what size the root partition should be. Press \"Enter\" to accept the default size.</p> <p>The VyOS filesystem will be created on the disk, then you will be prompted on what to name this VyOS installation. Press \"Enter\" to accept the default name.</p> <p>Next, you will be prompted to select which configuration template to start with. Press \"Enter\" to accept the default configuration.</p> <p>The next two prompts will be to create and confirm the password for the initial administrator user, <code>vyos</code>. Select something secure and document it somewhere safe, as you\u2019ll need this to log into VyOS each time, then press \"Enter\" to continue.</p> <p>Finally, the last prompt will ask which drive should be modified for the boot partition. Press \"Enter\" to access the default drive.</p> <p>At this point, VyOS is now installed. Type <code>reboot</code> and confirm to proceed with rebooting the VM by typing <code>y</code> and pressing \"Enter\". When the VM reboots, you'll be ready to perform the initial configuration.</p>","tags":["VyOS","Proxmox"]},{"location":"labs/networks/vyos/installing-vyos-on-proxmox/#conclusion-and-next-lab","title":"Conclusion and Next Lab","text":"<p>In this lab we created a VM and installed an operating system on it. Well done!</p> <p>You probably noticed there were a lot more steps to do this compared to creating the CTs we used for our network hosts. We'll detail the differences in the server labs section later, but for now, this process is enough to get good at.</p> <p>We'll be creating many router VMs, so be sure to become comfortable with this process. Feel free to practice performing the process multiple times, deleting the VM after each installation.</p> <p>We've still got work to do on our router VM before we can use it in our network, so once you're ready to move on, head over to the Initial VyOS Configuration Best Practices lab.</p>","tags":["VyOS","Proxmox"]},{"location":"labs/servers/overview/","title":"Server Labs Overview","text":""},{"location":"tags/","title":"Content Index","text":"<p>Use this page to find content by tag. Note that content may be marked with multiple tags.</p>"},{"location":"tags/#juniper","title":"Juniper","text":"<ul> <li>Initial Junos OS Configuration on a vSRX</li> <li>Installing Juniper vSRX on Proxmox</li> </ul>"},{"location":"tags/#linux","title":"Linux","text":"<ul> <li>Cloning a Network Host Template in Proxmox</li> <li>Connecting and Configuring Network Hosts in Proxmox</li> <li>Creating a Network Host Template in Proxmox</li> <li>Exploring Subnets and VLANs in Proxmox</li> <li>Exploring Subnets, Broadcast Domains, and Bridges in Proxmox</li> </ul>"},{"location":"tags/#proxmox","title":"Proxmox","text":"<ul> <li>Cloning a Network Host Template in Proxmox</li> <li>Connecting and Configuring Network Hosts in Proxmox</li> <li>Creating a Network Host Template in Proxmox</li> <li>Exploring Subnets and VLANs in Proxmox</li> <li>Exploring Subnets, Broadcast Domains, and Bridges in Proxmox</li> <li>Installing Juniper vSRX on Proxmox</li> <li>Installing VyOS on Proxmox</li> </ul>"},{"location":"tags/#vyos","title":"VyOS","text":"<ul> <li>Initial VyOS Configuration Best Practices</li> <li>Installing VyOS on Proxmox</li> </ul>"}]}